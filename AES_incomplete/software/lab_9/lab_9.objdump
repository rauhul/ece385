
lab_9.elf:     file format elf32-littlenios2
lab_9.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00011c48 memsz 0x00011c48 flags r-x
    LOAD off    0x00012c68 vaddr 0x10011c68 paddr 0x10013854 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00015440 vaddr 0x10015440 paddr 0x10015440 align 2**12
         filesz 0x00000000 memsz 0x00000184 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010eec  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b4c  1001111c  1001111c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  10011c68  10013854  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000184  10015440  10015440  00015440  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014854  2**0
                  CONTENTS
  7 .sdram        00000000  100155c4  100155c4  00014854  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014854  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f38  00000000  00000000  00014878  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00026641  00000000  00000000  000157b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009973  00000000  00000000  0003bdf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c001  00000000  00000000  00045764  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000023e8  00000000  00000000  00051768  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003adc  00000000  00000000  00053b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018015  00000000  00000000  0005762c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0006f644  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019a8  00000000  00000000  0006f658  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007447e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00074481  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007448d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007448e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007448f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00074493  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00074497  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007449b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000744a6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000744b1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000744bc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000000e  00000000  00000000  000744c7  2**0
                  CONTENTS, READONLY
 30 .jdi          00004320  00000000  00000000  000744d5  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005fb71  00000000  00000000  000787f5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
1001111c l    d  .rodata	00000000 .rodata
10011c68 l    d  .rwdata	00000000 .rwdata
10015440 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100155c4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab_9_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
10011d68 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 vfprintf.c
100119b2 l     O .rodata	00000010 zeroes.4404
10003c78 l     F .text	000000bc __sbprintf
100119c2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10003e88 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100059e0 l     F .text	00000008 __fp_unlock
100059f4 l     F .text	0000019c __sinit.part.1
10005b90 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
100121ac l     O .rwdata	00000020 lc_ctype_charset
1001218c l     O .rwdata	00000020 lc_message_charset
100121cc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100119f0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 refill.c
1000821c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10008784 l     F .text	000000fc __sprint_r.part.0
10011b14 l     O .rodata	00000010 zeroes.4349
10009dc0 l     F .text	000000bc __sbprintf
10011b24 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000e964 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000ea8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000eab8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000ebc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000ecbc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000eda8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000ef98 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10013844 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000f220 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000f370 l     F .text	00000038 alt_dev_reg
100127b4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000f658 l     F .text	0000020c altera_avalon_jtag_uart_irq
1000f864 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010004 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100104a8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10010608 l     F .text	00000050 alt_get_errno
10010658 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015474 g     O .bss	00000004 alt_instruction_exception_handler
1000040c g     F .text	00000060 subWord
100018e0 g     F .text	00000018 putchar
10007f3c g     F .text	00000074 _mprec_log10
1000026c g     F .text	000000bc charToHex
10008028 g     F .text	0000008c __any_on
1000a994 g     F .text	00000054 _isatty_r
100119fc g     O .rodata	00000028 __mprec_tinytens
1000eed4 g     F .text	0000007c alt_main
100154c4 g     O .bss	00000100 alt_irq
1000a9e8 g     F .text	00000060 _lseek_r
10013854 g       *ABS*	00000000 __flash_rwdata_start
10011d58 g     O .rwdata	00000010 TEST_ADD_ROUND_KEY
1000d340 g     F .text	00000088 .hidden __eqdf2
10000550 g     F .text	00000090 shiftRows
100155c4 g       *ABS*	00000000 __alt_heap_start
1000189c g     F .text	0000003c printf
1000b168 g     F .text	0000009c _wcrtomb_r
100085ac g     F .text	0000005c __sseek
100011c4 g     F .text	00000048 printParts
10005d40 g     F .text	00000010 __sinit
10009e7c g     F .text	00000140 __swbuf_r
1000634c g     F .text	0000007c _setlocale_r
10005b98 g     F .text	00000078 __sfmoreglue
10000328 g     F .text	00000074 charsToHex
1000ef74 g     F .text	00000024 __malloc_unlock
100154a0 g     O .bss	00000021 decryptedMessage
1000aa48 g     F .text	0000015c memmove
10005d28 g     F .text	00000018 _cleanup
10006ffc g     F .text	000000a8 _Balloc
1000d3c8 g     F .text	000000dc .hidden __gtdf2
10010a50 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1001111c g     O .rodata	00000100 aes_sbox
1000a470 g     F .text	0000005c _fstat_r
10015458 g     O .bss	00000004 errno
1000196c g     F .text	00000014 __srget
10008528 g     F .text	00000008 __seofread
10015460 g     O .bss	00000004 alt_argv
1001131c g     O .rodata	00000600 gf_mul
1001b814 g       *ABS*	00000000 _gp
10012634 g     O .rwdata	00000180 alt_fd_list
1000162c g     F .text	00000070 _getc_r
1000169c g     F .text	00000088 getc
100018d8 g     F .text	00000008 _putchar_r
10010a74 g     F .text	00000090 alt_find_dev
10001724 g     F .text	00000148 memcpy
100006e4 g     F .text	000003d4 keyExpansion
100059e8 g     F .text	0000000c _cleanup_r
1000e77c g     F .text	000000dc .hidden __floatsidf
1001058c g     F .text	0000007c alt_io_redirect
1000d4a4 g     F .text	000000f4 .hidden __ltdf2
1001111c g       *ABS*	00000000 __DTOR_END__
10000e7c g     F .text	000000d8 aes
10010cec g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000046c g     F .text	0000006c subBytes
1000840c g     F .text	00000074 __fpclassifyd
10007e98 g     F .text	000000a4 __ratio
10009da4 g     F .text	0000001c __vfiprintf_internal
1000fa64 g     F .text	0000021c altera_avalon_jtag_uart_read
1000186c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000c008 g     F .text	00000064 .hidden __udivsi3
1000ec10 g     F .text	000000ac isatty
10011a4c g     O .rodata	000000c8 __mprec_tens
100063c8 g     F .text	0000000c __locale_charset
10011d18 g     O .rwdata	00000010 TEST_KEY_EXPANSION
10015454 g     O .bss	00000004 __malloc_top_pad
1001381c g     O .rwdata	00000004 __mb_cur_max
100063f8 g     F .text	0000000c _localeconv_r
1000a4cc g     F .text	000004c8 __sfvwrite_r
10007430 g     F .text	0000003c __i2b
10008480 g     F .text	00000054 _sbrk_r
1000aba4 g     F .text	00000060 _read_r
1001383c g     O .rwdata	00000004 alt_max_fd
1000a164 g     F .text	000000f0 _fclose_r
100059b0 g     F .text	00000030 fflush
10015450 g     O .bss	00000004 __malloc_max_sbrked_mem
1000c0c4 g     F .text	000008ac .hidden __adddf3
10007c40 g     F .text	0000010c __b2d
1000b94c g     F .text	000005c4 .hidden __umoddi3
1000edf8 g     F .text	000000dc lseek
1000039c g     F .text	00000070 subByte
10013814 g     O .rwdata	00000004 _global_impure_ptr
1000ac04 g     F .text	00000564 _realloc_r
100155c4 g       *ABS*	00000000 __bss_end
100103b8 g     F .text	000000f0 alt_iic_isr_register
10010948 g     F .text	00000108 alt_tick
1000b350 g     F .text	000005fc .hidden __udivdi3
1000a3cc g     F .text	00000024 _fputwc_r
10011a24 g     O .rodata	00000028 __mprec_bigtens
10007214 g     F .text	00000104 __s2b
1000e858 g     F .text	000000a8 .hidden __floatunsidf
10007980 g     F .text	00000060 __mcmp
10005d60 g     F .text	00000018 __fp_lock_all
1001036c g     F .text	0000004c alt_ic_irq_enabled
100108ac g     F .text	0000009c alt_alarm_stop
10015468 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
1001260c g     O .rwdata	00000028 alt_dev_null
1000ffe4 g     F .text	00000020 alt_dcache_flush_all
10007318 g     F .text	00000068 __hi0bits
1000e6fc g     F .text	00000080 .hidden __fixdfsi
10013854 g       *ABS*	00000000 __ram_rwdata_end
10013834 g     O .rwdata	00000008 alt_dev_list
1000f270 g     F .text	00000100 write
100080b4 g     F .text	000000a0 _putc_r
100004d8 g     F .text	00000078 rotWord
10011c68 g       *ABS*	00000000 __ram_rodata_end
1000eb08 g     F .text	000000b8 fstat
1000d4a4 g     F .text	000000f4 .hidden __ledf2
100076f8 g     F .text	00000140 __pow5mult
10008898 g     F .text	0000150c ___vfiprintf_internal_r
10015448 g     O .bss	00000004 __nlocale_changed
1000c06c g     F .text	00000058 .hidden __umodsi3
100155c4 g       *ABS*	00000000 end
10011d38 g     O .rwdata	00000010 TEST_SUB_BYTES
1000f590 g     F .text	000000c8 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
1001111c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000e900 g     F .text	00000064 .hidden __clzsi2
1000fc80 g     F .text	00000224 altera_avalon_jtag_uart_write
10005d50 g     F .text	00000004 __sfp_lock_acquire
10006df0 g     F .text	000000e4 memchr
10001980 g     F .text	000022dc ___vfprintf_internal_r
10005eb4 g     F .text	00000310 _free_r
100063d4 g     F .text	00000010 __locale_mb_cur_max
10010f68 g     F .text	00000180 __call_exitprocs
100018f8 g     F .text	00000074 __srget_r
10015444 g     O .bss	00000004 __mlocale_changed
10011d08 g     O .rwdata	00000010 MIX_COLUMNS_MATRIX
10013820 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
1001546c g     O .bss	00000004 _alt_tick_rate
10007838 g     F .text	00000148 __lshift
10015470 g     O .bss	00000004 _alt_nticks
1000efe8 g     F .text	00000104 read
1000f3e0 g     F .text	0000004c alt_sys_init
10010e50 g     F .text	00000118 __register_exitproc
1000746c g     F .text	0000028c __multiply
1000f90c g     F .text	00000068 altera_avalon_jtag_uart_close
10001604 g     F .text	00000028 .hidden __mulsi3
10011c68 g       *ABS*	00000000 __ram_rwdata_start
1001111c g       *ABS*	00000000 __ram_rodata_start
10015478 g     O .bss	00000028 __malloc_current_mallinfo
10007d4c g     F .text	0000014c __d2b
1000f42c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1001121c g     O .rodata	00000100 aes_invsbox
10010c18 g     F .text	000000d4 alt_get_fd
1000a034 g     F .text	00000054 _close_r
10010dd4 g     F .text	0000007c memcmp
1000f4ec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100155c4 g       *ABS*	00000000 __alt_stack_base
1000f53c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10003d34 g     F .text	00000154 __swsetup_r
1000c970 g     F .text	000009d0 .hidden __divdf3
10005c10 g     F .text	00000118 __sfp
10007fb0 g     F .text	00000078 __copybits
10012204 g     O .rwdata	00000408 __malloc_av_
10005d5c g     F .text	00000004 __sinit_lock_release
1000d598 g     F .text	00000868 .hidden __muldf3
100084d4 g     F .text	00000054 __sread
10010b04 g     F .text	00000114 alt_find_file
10010054 g     F .text	000000a4 alt_dev_llist_insert
1000ef50 g     F .text	00000024 __malloc_lock
1000f170 g     F .text	000000b0 sbrk
10005954 g     F .text	0000005c _fflush_r
1000a088 g     F .text	000000dc _calloc_r
10015440 g       *ABS*	00000000 __bss_start
10006ed4 g     F .text	00000128 memset
1000120c g     F .text	000003f8 main
10015464 g     O .bss	00000004 alt_envp
1001544c g     O .bss	00000004 __malloc_max_total_mem
1000f48c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10009fbc g     F .text	00000018 __swbuf
10008608 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000a254 g     F .text	00000014 fclose
100040b0 g     F .text	00001688 _dtoa_r
100065e4 g     F .text	0000080c _malloc_r
1000b2c4 g     F .text	00000030 __ascii_wctomb
10013840 g     O .rwdata	00000004 alt_errno
100061c4 g     F .text	000000c4 _fwalk
100005e0 g     F .text	00000104 addRoundKey
10008154 g     F .text	000000c8 putc
1000bf10 g     F .text	00000084 .hidden __divsi3
10000ab8 g     F .text	000003c4 mixColumns
10005d90 g     F .text	00000124 _malloc_trim_r
1001111c g       *ABS*	00000000 __CTOR_END__
10008610 g     F .text	000000dc strcmp
1001111c g       *ABS*	00000000 __flash_rodata_start
1001111c g       *ABS*	00000000 __DTOR_LIST__
10011d28 g     O .rwdata	00000010 TEST_MIX_COLUMNS
1000d340 g     F .text	00000088 .hidden __nedf2
1000f3a8 g     F .text	00000038 alt_irq_init
1000f0ec g     F .text	00000084 alt_release_fd
10011b34 g     O .rodata	00000100 .hidden __clz_tab
10015440 g     O .bss	00000004 _PathLocale
10010d88 g     F .text	00000014 atexit
10009fd4 g     F .text	00000060 _write_r
10006404 g     F .text	00000018 setlocale
10011d48 g     O .rwdata	00000010 TEST_SHIFT_ROWS
10013818 g     O .rwdata	00000004 _impure_ptr
1001545c g     O .bss	00000004 alt_argc
10005738 g     F .text	0000021c __sflush_r
10010158 g     F .text	00000060 _do_dtors
100063f0 g     F .text	00000008 __locale_cjk_lang
10008238 g     F .text	000001d4 __srefill_r
10000020 g       .exceptions	00000000 alt_irq_entry
10007bdc g     F .text	00000064 __ulp
10005d78 g     F .text	00000018 __fp_unlock_all
1001382c g     O .rwdata	00000008 alt_fs_list
10011c68 g     O .rwdata	000000a0 Rcon
10000f54 g     F .text	00000128 sendMessage
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000641c g     F .text	0000000c localeconv
100101d8 g     F .text	00000050 alt_ic_isr_register
10013854 g       *ABS*	00000000 _edata
100155c4 g       *ABS*	00000000 _end
1000a268 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
1000f974 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
100102c8 g     F .text	000000a4 alt_ic_irq_disable
10008530 g     F .text	0000007c __swrite
10013824 g     O .rwdata	00000004 __malloc_trim_threshold
100063e4 g     F .text	0000000c __locale_msgcharset
10010d9c g     F .text	00000038 exit
10006288 g     F .text	000000c4 _fwalk_reent
100079e0 g     F .text	000001fc __mdiff
1000bf94 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10005d54 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000107c g     F .text	00000148 sendKey
100110e8 g     F .text	00000034 _exit
1000fea4 g     F .text	00000140 alt_alarm_start
10006428 g     F .text	000001bc __smakebuf_r
100086ec g     F .text	00000098 strlen
1001074c g     F .text	00000160 open
1000d3c8 g     F .text	000000dc .hidden __gedf2
10013828 g     O .rwdata	00000004 __wctomb
10008880 g     F .text	00000018 __sprint_r
100101b8 g     F .text	00000020 alt_icache_flush_all
10013848 g     O .rwdata	00000004 alt_priority_mask
10010228 g     F .text	000000a0 alt_ic_irq_enable
10003c5c g     F .text	0000001c __vfprintf_internal
1000b2f4 g     F .text	0000005c _wctomb_r
1000de00 g     F .text	000008fc .hidden __subdf3
10007380 g     F .text	000000b0 __lo0bits
1001384c g     O .rwdata	00000008 alt_alarm_list
100100f8 g     F .text	00000060 _do_ctors
1000b204 g     F .text	000000c0 wcrtomb
1000e9b4 g     F .text	000000d8 close
1000ed24 g     F .text	00000084 alt_load
1000a3f0 g     F .text	00000080 fputwc
10005d58 g     F .text	00000004 __sinit_lock_acquire
100070cc g     F .text	00000148 __multadd
100070a4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10953104 	addi	r2,r2,21700
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10953104 	addi	r2,r2,21700
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a71817 	ldw	r2,-25504(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a71817 	ldw	r2,-25504(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6ae0514 	ori	gp,gp,47124
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10951014 	ori	r2,r2,21568

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18d57114 	ori	r3,r3,21956

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000ed240 	call	1000ed24 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	000eed40 	call	1000eed4 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <charToHex>:
    {0x81, 0x19, 0xD3, 0x26},
    {0xE5, 0x9A, 0x7A, 0x4C}
};

/* helper functions */
char charToHex(char c) {
1000026c:	defffd04 	addi	sp,sp,-12
10000270:	df000215 	stw	fp,8(sp)
10000274:	df000204 	addi	fp,sp,8
10000278:	2005883a 	mov	r2,r4
1000027c:	e0bfff05 	stb	r2,-4(fp)
    char hex = c;
10000280:	e0bfff03 	ldbu	r2,-4(fp)
10000284:	e0bffe05 	stb	r2,-8(fp)
    if (hex >= '0' && hex <= '9') {
10000288:	e0bffe07 	ldb	r2,-8(fp)
1000028c:	10800c10 	cmplti	r2,r2,48
10000290:	1000071e 	bne	r2,zero,100002b0 <charToHex+0x44>
10000294:	e0bffe07 	ldb	r2,-8(fp)
10000298:	10800e88 	cmpgei	r2,r2,58
1000029c:	1000041e 	bne	r2,zero,100002b0 <charToHex+0x44>
        hex -= '0';
100002a0:	e0bffe03 	ldbu	r2,-8(fp)
100002a4:	10bff404 	addi	r2,r2,-48
100002a8:	e0bffe05 	stb	r2,-8(fp)
100002ac:	00001906 	br	10000314 <charToHex+0xa8>
    } else if (hex >= 'A' && hex <='F') {
100002b0:	e0bffe07 	ldb	r2,-8(fp)
100002b4:	10801050 	cmplti	r2,r2,65
100002b8:	10000a1e 	bne	r2,zero,100002e4 <charToHex+0x78>
100002bc:	e0bffe07 	ldb	r2,-8(fp)
100002c0:	108011c8 	cmpgei	r2,r2,71
100002c4:	1000071e 	bne	r2,zero,100002e4 <charToHex+0x78>
        hex -= 'A';
100002c8:	e0bffe03 	ldbu	r2,-8(fp)
100002cc:	10bfefc4 	addi	r2,r2,-65
100002d0:	e0bffe05 	stb	r2,-8(fp)
        hex += 10;
100002d4:	e0bffe03 	ldbu	r2,-8(fp)
100002d8:	10800284 	addi	r2,r2,10
100002dc:	e0bffe05 	stb	r2,-8(fp)
100002e0:	00000c06 	br	10000314 <charToHex+0xa8>
    } else if (hex >= 'a' && hex <='f') {
100002e4:	e0bffe07 	ldb	r2,-8(fp)
100002e8:	10801850 	cmplti	r2,r2,97
100002ec:	1000091e 	bne	r2,zero,10000314 <charToHex+0xa8>
100002f0:	e0bffe07 	ldb	r2,-8(fp)
100002f4:	108019c8 	cmpgei	r2,r2,103
100002f8:	1000061e 	bne	r2,zero,10000314 <charToHex+0xa8>
        hex -= 'a';
100002fc:	e0bffe03 	ldbu	r2,-8(fp)
10000300:	10bfe7c4 	addi	r2,r2,-97
10000304:	e0bffe05 	stb	r2,-8(fp)
        hex += 10;
10000308:	e0bffe03 	ldbu	r2,-8(fp)
1000030c:	10800284 	addi	r2,r2,10
10000310:	e0bffe05 	stb	r2,-8(fp)
    }
    return hex;
10000314:	e0bffe03 	ldbu	r2,-8(fp)
}
10000318:	e037883a 	mov	sp,fp
1000031c:	df000017 	ldw	fp,0(sp)
10000320:	dec00104 	addi	sp,sp,4
10000324:	f800283a 	ret

10000328 <charsToHex>:

unsigned char charsToHex(char c1, char c2) {
10000328:	defffb04 	addi	sp,sp,-20
1000032c:	dfc00415 	stw	ra,16(sp)
10000330:	df000315 	stw	fp,12(sp)
10000334:	df000304 	addi	fp,sp,12
10000338:	2007883a 	mov	r3,r4
1000033c:	2805883a 	mov	r2,r5
10000340:	e0fffe05 	stb	r3,-8(fp)
10000344:	e0bfff05 	stb	r2,-4(fp)
    char hex1 = charToHex(c1);
10000348:	e0bffe07 	ldb	r2,-8(fp)
1000034c:	1009883a 	mov	r4,r2
10000350:	000026c0 	call	1000026c <charToHex>
10000354:	e0bffd05 	stb	r2,-12(fp)
    char hex2 = charToHex(c2);
10000358:	e0bfff07 	ldb	r2,-4(fp)
1000035c:	1009883a 	mov	r4,r2
10000360:	000026c0 	call	1000026c <charToHex>
10000364:	e0bffd45 	stb	r2,-11(fp)
    char y = (unsigned char)(hex1 << 4);
10000368:	e0bffd03 	ldbu	r2,-12(fp)
1000036c:	1004913a 	slli	r2,r2,4
10000370:	e0bffd85 	stb	r2,-10(fp)
    unsigned char x = (unsigned char)(y & 0xFF) + hex2;
10000374:	e0fffd83 	ldbu	r3,-10(fp)
10000378:	e0bffd43 	ldbu	r2,-11(fp)
1000037c:	1885883a 	add	r2,r3,r2
10000380:	e0bffdc5 	stb	r2,-9(fp)
    return x;
10000384:	e0bffdc3 	ldbu	r2,-9(fp)
}
10000388:	e037883a 	mov	sp,fp
1000038c:	dfc00117 	ldw	ra,4(sp)
10000390:	df000017 	ldw	fp,0(sp)
10000394:	dec00204 	addi	sp,sp,8
10000398:	f800283a 	ret

1000039c <subByte>:

void subByte(uint8_t* byte) {
1000039c:	defffd04 	addi	sp,sp,-12
100003a0:	df000215 	stw	fp,8(sp)
100003a4:	df000204 	addi	fp,sp,8
100003a8:	e13fff15 	stw	r4,-4(fp)
    // substitute with sbox values in place
    uint8_t new_row = *byte >> 4;
100003ac:	e0bfff17 	ldw	r2,-4(fp)
100003b0:	10800003 	ldbu	r2,0(r2)
100003b4:	10803fcc 	andi	r2,r2,255
100003b8:	1004d13a 	srli	r2,r2,4
100003bc:	e0bffe05 	stb	r2,-8(fp)
    uint8_t new_col = *byte & 0x0F;
100003c0:	e0bfff17 	ldw	r2,-4(fp)
100003c4:	10800003 	ldbu	r2,0(r2)
100003c8:	108003cc 	andi	r2,r2,15
100003cc:	e0bffe45 	stb	r2,-7(fp)
    *byte = aes_sbox[new_row][new_col];
100003d0:	e13ffe03 	ldbu	r4,-8(fp)
100003d4:	e0fffe43 	ldbu	r3,-7(fp)
100003d8:	00840074 	movhi	r2,4097
100003dc:	10844704 	addi	r2,r2,4380
100003e0:	2008913a 	slli	r4,r4,4
100003e4:	1105883a 	add	r2,r2,r4
100003e8:	10c5883a 	add	r2,r2,r3
100003ec:	10c00003 	ldbu	r3,0(r2)
100003f0:	e0bfff17 	ldw	r2,-4(fp)
100003f4:	10c00005 	stb	r3,0(r2)
}
100003f8:	0001883a 	nop
100003fc:	e037883a 	mov	sp,fp
10000400:	df000017 	ldw	fp,0(sp)
10000404:	dec00104 	addi	sp,sp,4
10000408:	f800283a 	ret

1000040c <subWord>:

void subWord(uint8_t word[_NB]) {
1000040c:	defffc04 	addi	sp,sp,-16
10000410:	dfc00315 	stw	ra,12(sp)
10000414:	df000215 	stw	fp,8(sp)
10000418:	df000204 	addi	fp,sp,8
1000041c:	e13fff15 	stw	r4,-4(fp)
    // substitute a whole word
    for (int byte = 0; byte < _NB; byte++) {
10000420:	e03ffe15 	stw	zero,-8(fp)
10000424:	00000806 	br	10000448 <subWord+0x3c>
        subByte(word + byte);
10000428:	e0bffe17 	ldw	r2,-8(fp)
1000042c:	e0ffff17 	ldw	r3,-4(fp)
10000430:	1885883a 	add	r2,r3,r2
10000434:	1009883a 	mov	r4,r2
10000438:	000039c0 	call	1000039c <subByte>
    *byte = aes_sbox[new_row][new_col];
}

void subWord(uint8_t word[_NB]) {
    // substitute a whole word
    for (int byte = 0; byte < _NB; byte++) {
1000043c:	e0bffe17 	ldw	r2,-8(fp)
10000440:	10800044 	addi	r2,r2,1
10000444:	e0bffe15 	stw	r2,-8(fp)
10000448:	e0bffe17 	ldw	r2,-8(fp)
1000044c:	10800110 	cmplti	r2,r2,4
10000450:	103ff51e 	bne	r2,zero,10000428 <__alt_data_end+0xf8000428>
        subByte(word + byte);
    }
}
10000454:	0001883a 	nop
10000458:	e037883a 	mov	sp,fp
1000045c:	dfc00117 	ldw	ra,4(sp)
10000460:	df000017 	ldw	fp,0(sp)
10000464:	dec00204 	addi	sp,sp,8
10000468:	f800283a 	ret

1000046c <subBytes>:

void subBytes(uint8_t state[_NB][_NB]) {
1000046c:	defffc04 	addi	sp,sp,-16
10000470:	dfc00315 	stw	ra,12(sp)
10000474:	df000215 	stw	fp,8(sp)
10000478:	df000204 	addi	fp,sp,8
1000047c:	e13fff15 	stw	r4,-4(fp)
    // substitute a whole state
    for (int row = 0; row < _NB; row++) {
10000480:	e03ffe15 	stw	zero,-8(fp)
10000484:	00000b06 	br	100004b4 <subBytes+0x48>
        subWord(state[row]);
10000488:	e0bffe17 	ldw	r2,-8(fp)
1000048c:	1085883a 	add	r2,r2,r2
10000490:	1085883a 	add	r2,r2,r2
10000494:	1007883a 	mov	r3,r2
10000498:	e0bfff17 	ldw	r2,-4(fp)
1000049c:	10c5883a 	add	r2,r2,r3
100004a0:	1009883a 	mov	r4,r2
100004a4:	000040c0 	call	1000040c <subWord>
    }
}

void subBytes(uint8_t state[_NB][_NB]) {
    // substitute a whole state
    for (int row = 0; row < _NB; row++) {
100004a8:	e0bffe17 	ldw	r2,-8(fp)
100004ac:	10800044 	addi	r2,r2,1
100004b0:	e0bffe15 	stw	r2,-8(fp)
100004b4:	e0bffe17 	ldw	r2,-8(fp)
100004b8:	10800110 	cmplti	r2,r2,4
100004bc:	103ff21e 	bne	r2,zero,10000488 <__alt_data_end+0xf8000488>
        subWord(state[row]);
    }
}
100004c0:	0001883a 	nop
100004c4:	e037883a 	mov	sp,fp
100004c8:	dfc00117 	ldw	ra,4(sp)
100004cc:	df000017 	ldw	fp,0(sp)
100004d0:	dec00204 	addi	sp,sp,8
100004d4:	f800283a 	ret

100004d8 <rotWord>:

void rotWord(uint8_t word[_NB]) {
100004d8:	defffd04 	addi	sp,sp,-12
100004dc:	df000215 	stw	fp,8(sp)
100004e0:	df000204 	addi	fp,sp,8
100004e4:	e13fff15 	stw	r4,-4(fp)
    // rotate word once
    uint8_t tmp = word[0];
100004e8:	e0bfff17 	ldw	r2,-4(fp)
100004ec:	10800003 	ldbu	r2,0(r2)
100004f0:	e0bffe05 	stb	r2,-8(fp)
    word[0] = word[1];
100004f4:	e0bfff17 	ldw	r2,-4(fp)
100004f8:	10c00043 	ldbu	r3,1(r2)
100004fc:	e0bfff17 	ldw	r2,-4(fp)
10000500:	10c00005 	stb	r3,0(r2)
    word[1] = word[2];
10000504:	e0bfff17 	ldw	r2,-4(fp)
10000508:	10800044 	addi	r2,r2,1
1000050c:	e0ffff17 	ldw	r3,-4(fp)
10000510:	18c00083 	ldbu	r3,2(r3)
10000514:	10c00005 	stb	r3,0(r2)
    word[2] = word[3];
10000518:	e0bfff17 	ldw	r2,-4(fp)
1000051c:	10800084 	addi	r2,r2,2
10000520:	e0ffff17 	ldw	r3,-4(fp)
10000524:	18c000c3 	ldbu	r3,3(r3)
10000528:	10c00005 	stb	r3,0(r2)
    word[3] = tmp;
1000052c:	e0bfff17 	ldw	r2,-4(fp)
10000530:	108000c4 	addi	r2,r2,3
10000534:	e0fffe03 	ldbu	r3,-8(fp)
10000538:	10c00005 	stb	r3,0(r2)
}
1000053c:	0001883a 	nop
10000540:	e037883a 	mov	sp,fp
10000544:	df000017 	ldw	fp,0(sp)
10000548:	dec00104 	addi	sp,sp,4
1000054c:	f800283a 	ret

10000550 <shiftRows>:

void shiftRows(uint8_t state[_NB][_NB]) {
10000550:	defffb04 	addi	sp,sp,-20
10000554:	dfc00415 	stw	ra,16(sp)
10000558:	df000315 	stw	fp,12(sp)
1000055c:	df000304 	addi	fp,sp,12
10000560:	e13fff15 	stw	r4,-4(fp)
    // rotate an entire state
    for (int row = 1; row < _NB; row++) {
10000564:	00800044 	movi	r2,1
10000568:	e0bffd15 	stw	r2,-12(fp)
1000056c:	00001306 	br	100005bc <shiftRows+0x6c>
        for (int i = 0; i < row; i++) {
10000570:	e03ffe15 	stw	zero,-8(fp)
10000574:	00000b06 	br	100005a4 <shiftRows+0x54>
            rotWord(state[row]);
10000578:	e0bffd17 	ldw	r2,-12(fp)
1000057c:	1085883a 	add	r2,r2,r2
10000580:	1085883a 	add	r2,r2,r2
10000584:	1007883a 	mov	r3,r2
10000588:	e0bfff17 	ldw	r2,-4(fp)
1000058c:	10c5883a 	add	r2,r2,r3
10000590:	1009883a 	mov	r4,r2
10000594:	00004d80 	call	100004d8 <rotWord>
}

void shiftRows(uint8_t state[_NB][_NB]) {
    // rotate an entire state
    for (int row = 1; row < _NB; row++) {
        for (int i = 0; i < row; i++) {
10000598:	e0bffe17 	ldw	r2,-8(fp)
1000059c:	10800044 	addi	r2,r2,1
100005a0:	e0bffe15 	stw	r2,-8(fp)
100005a4:	e0fffe17 	ldw	r3,-8(fp)
100005a8:	e0bffd17 	ldw	r2,-12(fp)
100005ac:	18bff216 	blt	r3,r2,10000578 <__alt_data_end+0xf8000578>
    word[3] = tmp;
}

void shiftRows(uint8_t state[_NB][_NB]) {
    // rotate an entire state
    for (int row = 1; row < _NB; row++) {
100005b0:	e0bffd17 	ldw	r2,-12(fp)
100005b4:	10800044 	addi	r2,r2,1
100005b8:	e0bffd15 	stw	r2,-12(fp)
100005bc:	e0bffd17 	ldw	r2,-12(fp)
100005c0:	10800110 	cmplti	r2,r2,4
100005c4:	103fea1e 	bne	r2,zero,10000570 <__alt_data_end+0xf8000570>
        for (int i = 0; i < row; i++) {
            rotWord(state[row]);
        }
    }
}
100005c8:	0001883a 	nop
100005cc:	e037883a 	mov	sp,fp
100005d0:	dfc00117 	ldw	ra,4(sp)
100005d4:	df000017 	ldw	fp,0(sp)
100005d8:	dec00204 	addi	sp,sp,8
100005dc:	f800283a 	ret

100005e0 <addRoundKey>:

void addRoundKey(uint8_t state[_NB][_NB], uint8_t key[_NK][_NK * (_NR + 1)], int offset) {
100005e0:	defff704 	addi	sp,sp,-36
100005e4:	dfc00815 	stw	ra,32(sp)
100005e8:	df000715 	stw	fp,28(sp)
100005ec:	dc400615 	stw	r17,24(sp)
100005f0:	dc000515 	stw	r16,20(sp)
100005f4:	df000704 	addi	fp,sp,28
100005f8:	e13ffb15 	stw	r4,-20(fp)
100005fc:	e17ffc15 	stw	r5,-16(fp)
10000600:	e1bffd15 	stw	r6,-12(fp)
    // xor the state with the key
    for (int row = 0; row < _NB; row++) {
10000604:	e03ff915 	stw	zero,-28(fp)
10000608:	00002b06 	br	100006b8 <addRoundKey+0xd8>
        for (int col = 0; col < _NK; col++) {
1000060c:	e03ffa15 	stw	zero,-24(fp)
10000610:	00002306 	br	100006a0 <addRoundKey+0xc0>
            state[row][col] ^= key[row][col + offset];
10000614:	e0bff917 	ldw	r2,-28(fp)
10000618:	1085883a 	add	r2,r2,r2
1000061c:	1085883a 	add	r2,r2,r2
10000620:	1007883a 	mov	r3,r2
10000624:	e0bffb17 	ldw	r2,-20(fp)
10000628:	10e1883a 	add	r16,r2,r3
1000062c:	e0bff917 	ldw	r2,-28(fp)
10000630:	1085883a 	add	r2,r2,r2
10000634:	1085883a 	add	r2,r2,r2
10000638:	1007883a 	mov	r3,r2
1000063c:	e0bffb17 	ldw	r2,-20(fp)
10000640:	10c7883a 	add	r3,r2,r3
10000644:	e0bffa17 	ldw	r2,-24(fp)
10000648:	1885883a 	add	r2,r3,r2
1000064c:	14400003 	ldbu	r17,0(r2)
10000650:	e0bff917 	ldw	r2,-28(fp)
10000654:	01400b04 	movi	r5,44
10000658:	1009883a 	mov	r4,r2
1000065c:	00016040 	call	10001604 <__mulsi3>
10000660:	1007883a 	mov	r3,r2
10000664:	e0bffc17 	ldw	r2,-16(fp)
10000668:	10c7883a 	add	r3,r2,r3
1000066c:	e13ffa17 	ldw	r4,-24(fp)
10000670:	e0bffd17 	ldw	r2,-12(fp)
10000674:	2085883a 	add	r2,r4,r2
10000678:	1885883a 	add	r2,r3,r2
1000067c:	10800003 	ldbu	r2,0(r2)
10000680:	8884f03a 	xor	r2,r17,r2
10000684:	1007883a 	mov	r3,r2
10000688:	e0bffa17 	ldw	r2,-24(fp)
1000068c:	8085883a 	add	r2,r16,r2
10000690:	10c00005 	stb	r3,0(r2)
}

void addRoundKey(uint8_t state[_NB][_NB], uint8_t key[_NK][_NK * (_NR + 1)], int offset) {
    // xor the state with the key
    for (int row = 0; row < _NB; row++) {
        for (int col = 0; col < _NK; col++) {
10000694:	e0bffa17 	ldw	r2,-24(fp)
10000698:	10800044 	addi	r2,r2,1
1000069c:	e0bffa15 	stw	r2,-24(fp)
100006a0:	e0bffa17 	ldw	r2,-24(fp)
100006a4:	10800110 	cmplti	r2,r2,4
100006a8:	103fda1e 	bne	r2,zero,10000614 <__alt_data_end+0xf8000614>
    }
}

void addRoundKey(uint8_t state[_NB][_NB], uint8_t key[_NK][_NK * (_NR + 1)], int offset) {
    // xor the state with the key
    for (int row = 0; row < _NB; row++) {
100006ac:	e0bff917 	ldw	r2,-28(fp)
100006b0:	10800044 	addi	r2,r2,1
100006b4:	e0bff915 	stw	r2,-28(fp)
100006b8:	e0bff917 	ldw	r2,-28(fp)
100006bc:	10800110 	cmplti	r2,r2,4
100006c0:	103fd21e 	bne	r2,zero,1000060c <__alt_data_end+0xf800060c>
        for (int col = 0; col < _NK; col++) {
            state[row][col] ^= key[row][col + offset];
        }
    }
}
100006c4:	0001883a 	nop
100006c8:	e6fffe04 	addi	sp,fp,-8
100006cc:	dfc00317 	ldw	ra,12(sp)
100006d0:	df000217 	ldw	fp,8(sp)
100006d4:	dc400117 	ldw	r17,4(sp)
100006d8:	dc000017 	ldw	r16,0(sp)
100006dc:	dec00404 	addi	sp,sp,16
100006e0:	f800283a 	ret

100006e4 <keyExpansion>:

void keyExpansion(uint8_t inputKey[_NK][_NK], uint8_t roundKeys[_NK][(_NR + 1) * _NK]) {
100006e4:	defff004 	addi	sp,sp,-64
100006e8:	dfc00f15 	stw	ra,60(sp)
100006ec:	df000e15 	stw	fp,56(sp)
100006f0:	dcc00d15 	stw	r19,52(sp)
100006f4:	dc800c15 	stw	r18,48(sp)
100006f8:	dc400b15 	stw	r17,44(sp)
100006fc:	dc000a15 	stw	r16,40(sp)
10000700:	df000e04 	addi	fp,sp,56
10000704:	e13ffa15 	stw	r4,-24(fp)
10000708:	e17ffb15 	stw	r5,-20(fp)
    // set the round keys to the input key initially
    for (int row = 0; row < _NB; row++) {
1000070c:	e03ff215 	stw	zero,-56(fp)
10000710:	00001e06 	br	1000078c <keyExpansion+0xa8>
        for (int col = 0; col < _NB; col++) {
10000714:	e03ff315 	stw	zero,-52(fp)
10000718:	00001606 	br	10000774 <keyExpansion+0x90>
            roundKeys[row][col] = inputKey[row][col];
1000071c:	e0bff217 	ldw	r2,-56(fp)
10000720:	01400b04 	movi	r5,44
10000724:	1009883a 	mov	r4,r2
10000728:	00016040 	call	10001604 <__mulsi3>
1000072c:	1007883a 	mov	r3,r2
10000730:	e0bffb17 	ldw	r2,-20(fp)
10000734:	10c9883a 	add	r4,r2,r3
10000738:	e0bff217 	ldw	r2,-56(fp)
1000073c:	1085883a 	add	r2,r2,r2
10000740:	1085883a 	add	r2,r2,r2
10000744:	1007883a 	mov	r3,r2
10000748:	e0bffa17 	ldw	r2,-24(fp)
1000074c:	10c7883a 	add	r3,r2,r3
10000750:	e0bff317 	ldw	r2,-52(fp)
10000754:	1885883a 	add	r2,r3,r2
10000758:	10c00003 	ldbu	r3,0(r2)
1000075c:	e0bff317 	ldw	r2,-52(fp)
10000760:	2085883a 	add	r2,r4,r2
10000764:	10c00005 	stb	r3,0(r2)
}

void keyExpansion(uint8_t inputKey[_NK][_NK], uint8_t roundKeys[_NK][(_NR + 1) * _NK]) {
    // set the round keys to the input key initially
    for (int row = 0; row < _NB; row++) {
        for (int col = 0; col < _NB; col++) {
10000768:	e0bff317 	ldw	r2,-52(fp)
1000076c:	10800044 	addi	r2,r2,1
10000770:	e0bff315 	stw	r2,-52(fp)
10000774:	e0bff317 	ldw	r2,-52(fp)
10000778:	10800110 	cmplti	r2,r2,4
1000077c:	103fe71e 	bne	r2,zero,1000071c <__alt_data_end+0xf800071c>
    }
}

void keyExpansion(uint8_t inputKey[_NK][_NK], uint8_t roundKeys[_NK][(_NR + 1) * _NK]) {
    // set the round keys to the input key initially
    for (int row = 0; row < _NB; row++) {
10000780:	e0bff217 	ldw	r2,-56(fp)
10000784:	10800044 	addi	r2,r2,1
10000788:	e0bff215 	stw	r2,-56(fp)
1000078c:	e0bff217 	ldw	r2,-56(fp)
10000790:	10800110 	cmplti	r2,r2,4
10000794:	103fdf1e 	bne	r2,zero,10000714 <__alt_data_end+0xf8000714>
            roundKeys[row][col] = inputKey[row][col];
        }
    }

    // loop through the entire state array
    for(int col = 4; col < ((_NR + 1) * _NK); col++) {
10000798:	00800104 	movi	r2,4
1000079c:	e0bff415 	stw	r2,-48(fp)
100007a0:	0000b806 	br	10000a84 <keyExpansion+0x3a0>
        if(col % 4 == 0) {
100007a4:	e0bff417 	ldw	r2,-48(fp)
100007a8:	108000cc 	andi	r2,r2,3
100007ac:	10003a1e 	bne	r2,zero,10000898 <keyExpansion+0x1b4>
            // if this is a new state block, set the round key to a previous one
            for(int row = 0; row < _NB; row++) {
100007b0:	e03ff515 	stw	zero,-44(fp)
100007b4:	00002106 	br	1000083c <keyExpansion+0x158>
                roundKeys[row][col] = roundKeys[(row + 1) % _NB][col - 1];
100007b8:	e0bff517 	ldw	r2,-44(fp)
100007bc:	01400b04 	movi	r5,44
100007c0:	1009883a 	mov	r4,r2
100007c4:	00016040 	call	10001604 <__mulsi3>
100007c8:	1007883a 	mov	r3,r2
100007cc:	e0bffb17 	ldw	r2,-20(fp)
100007d0:	10e1883a 	add	r16,r2,r3
100007d4:	e0bff517 	ldw	r2,-44(fp)
100007d8:	10c00044 	addi	r3,r2,1
100007dc:	00a00034 	movhi	r2,32768
100007e0:	108000c4 	addi	r2,r2,3
100007e4:	1884703a 	and	r2,r3,r2
100007e8:	1000040e 	bge	r2,zero,100007fc <keyExpansion+0x118>
100007ec:	10bfffc4 	addi	r2,r2,-1
100007f0:	00ffff04 	movi	r3,-4
100007f4:	10c4b03a 	or	r2,r2,r3
100007f8:	10800044 	addi	r2,r2,1
100007fc:	01400b04 	movi	r5,44
10000800:	1009883a 	mov	r4,r2
10000804:	00016040 	call	10001604 <__mulsi3>
10000808:	1007883a 	mov	r3,r2
1000080c:	e0bffb17 	ldw	r2,-20(fp)
10000810:	10c7883a 	add	r3,r2,r3
10000814:	e0bff417 	ldw	r2,-48(fp)
10000818:	10bfffc4 	addi	r2,r2,-1
1000081c:	1885883a 	add	r2,r3,r2
10000820:	10c00003 	ldbu	r3,0(r2)
10000824:	e0bff417 	ldw	r2,-48(fp)
10000828:	8085883a 	add	r2,r16,r2
1000082c:	10c00005 	stb	r3,0(r2)

    // loop through the entire state array
    for(int col = 4; col < ((_NR + 1) * _NK); col++) {
        if(col % 4 == 0) {
            // if this is a new state block, set the round key to a previous one
            for(int row = 0; row < _NB; row++) {
10000830:	e0bff517 	ldw	r2,-44(fp)
10000834:	10800044 	addi	r2,r2,1
10000838:	e0bff515 	stw	r2,-44(fp)
1000083c:	e0bff517 	ldw	r2,-44(fp)
10000840:	10800110 	cmplti	r2,r2,4
10000844:	103fdc1e 	bne	r2,zero,100007b8 <__alt_data_end+0xf80007b8>
                roundKeys[row][col] = roundKeys[(row + 1) % _NB][col - 1];
            }

            // substitute the bytes for this column
            for(int row = 0; row < _NB; row++) {
10000848:	e03ff615 	stw	zero,-40(fp)
1000084c:	00000e06 	br	10000888 <keyExpansion+0x1a4>
                subByte(roundKeys[row] + col);
10000850:	e0bff617 	ldw	r2,-40(fp)
10000854:	01400b04 	movi	r5,44
10000858:	1009883a 	mov	r4,r2
1000085c:	00016040 	call	10001604 <__mulsi3>
10000860:	1007883a 	mov	r3,r2
10000864:	e0bff417 	ldw	r2,-48(fp)
10000868:	1885883a 	add	r2,r3,r2
1000086c:	e0fffb17 	ldw	r3,-20(fp)
10000870:	1885883a 	add	r2,r3,r2
10000874:	1009883a 	mov	r4,r2
10000878:	000039c0 	call	1000039c <subByte>
            for(int row = 0; row < _NB; row++) {
                roundKeys[row][col] = roundKeys[(row + 1) % _NB][col - 1];
            }

            // substitute the bytes for this column
            for(int row = 0; row < _NB; row++) {
1000087c:	e0bff617 	ldw	r2,-40(fp)
10000880:	10800044 	addi	r2,r2,1
10000884:	e0bff615 	stw	r2,-40(fp)
10000888:	e0bff617 	ldw	r2,-40(fp)
1000088c:	10800110 	cmplti	r2,r2,4
10000890:	103fef1e 	bne	r2,zero,10000850 <__alt_data_end+0xf8000850>
10000894:	00001d06 	br	1000090c <keyExpansion+0x228>
                subByte(roundKeys[row] + col);
            }
        } else {
            // if it isnt, we still need to set it to the previous column at first
            for(int row = 0; row < _NB; row++) {
10000898:	e03ff715 	stw	zero,-36(fp)
1000089c:	00001806 	br	10000900 <keyExpansion+0x21c>
                roundKeys[row][col] = roundKeys[row][col - 1];
100008a0:	e0bff717 	ldw	r2,-36(fp)
100008a4:	01400b04 	movi	r5,44
100008a8:	1009883a 	mov	r4,r2
100008ac:	00016040 	call	10001604 <__mulsi3>
100008b0:	1007883a 	mov	r3,r2
100008b4:	e0bffb17 	ldw	r2,-20(fp)
100008b8:	10e1883a 	add	r16,r2,r3
100008bc:	e0bff717 	ldw	r2,-36(fp)
100008c0:	01400b04 	movi	r5,44
100008c4:	1009883a 	mov	r4,r2
100008c8:	00016040 	call	10001604 <__mulsi3>
100008cc:	1007883a 	mov	r3,r2
100008d0:	e0bffb17 	ldw	r2,-20(fp)
100008d4:	10c7883a 	add	r3,r2,r3
100008d8:	e0bff417 	ldw	r2,-48(fp)
100008dc:	10bfffc4 	addi	r2,r2,-1
100008e0:	1885883a 	add	r2,r3,r2
100008e4:	10c00003 	ldbu	r3,0(r2)
100008e8:	e0bff417 	ldw	r2,-48(fp)
100008ec:	8085883a 	add	r2,r16,r2
100008f0:	10c00005 	stb	r3,0(r2)
            for(int row = 0; row < _NB; row++) {
                subByte(roundKeys[row] + col);
            }
        } else {
            // if it isnt, we still need to set it to the previous column at first
            for(int row = 0; row < _NB; row++) {
100008f4:	e0bff717 	ldw	r2,-36(fp)
100008f8:	10800044 	addi	r2,r2,1
100008fc:	e0bff715 	stw	r2,-36(fp)
10000900:	e0bff717 	ldw	r2,-36(fp)
10000904:	10800110 	cmplti	r2,r2,4
10000908:	103fe51e 	bne	r2,zero,100008a0 <__alt_data_end+0xf80008a0>
                roundKeys[row][col] = roundKeys[row][col - 1];
            }
        }

        // xor with the fourth previous column
        for(int row = 0; row < _NB; row++) {
1000090c:	e03ff815 	stw	zero,-32(fp)
10000910:	00002406 	br	100009a4 <keyExpansion+0x2c0>
            roundKeys[row][col] ^= roundKeys[row][col - 4];
10000914:	e0bff817 	ldw	r2,-32(fp)
10000918:	01400b04 	movi	r5,44
1000091c:	1009883a 	mov	r4,r2
10000920:	00016040 	call	10001604 <__mulsi3>
10000924:	1007883a 	mov	r3,r2
10000928:	e0bffb17 	ldw	r2,-20(fp)
1000092c:	10e1883a 	add	r16,r2,r3
10000930:	e0bff817 	ldw	r2,-32(fp)
10000934:	01400b04 	movi	r5,44
10000938:	1009883a 	mov	r4,r2
1000093c:	00016040 	call	10001604 <__mulsi3>
10000940:	1007883a 	mov	r3,r2
10000944:	e0bffb17 	ldw	r2,-20(fp)
10000948:	10c7883a 	add	r3,r2,r3
1000094c:	e0bff417 	ldw	r2,-48(fp)
10000950:	1885883a 	add	r2,r3,r2
10000954:	14400003 	ldbu	r17,0(r2)
10000958:	e0bff817 	ldw	r2,-32(fp)
1000095c:	01400b04 	movi	r5,44
10000960:	1009883a 	mov	r4,r2
10000964:	00016040 	call	10001604 <__mulsi3>
10000968:	1007883a 	mov	r3,r2
1000096c:	e0bffb17 	ldw	r2,-20(fp)
10000970:	10c7883a 	add	r3,r2,r3
10000974:	e0bff417 	ldw	r2,-48(fp)
10000978:	10bfff04 	addi	r2,r2,-4
1000097c:	1885883a 	add	r2,r3,r2
10000980:	10800003 	ldbu	r2,0(r2)
10000984:	8884f03a 	xor	r2,r17,r2
10000988:	1007883a 	mov	r3,r2
1000098c:	e0bff417 	ldw	r2,-48(fp)
10000990:	8085883a 	add	r2,r16,r2
10000994:	10c00005 	stb	r3,0(r2)
                roundKeys[row][col] = roundKeys[row][col - 1];
            }
        }

        // xor with the fourth previous column
        for(int row = 0; row < _NB; row++) {
10000998:	e0bff817 	ldw	r2,-32(fp)
1000099c:	10800044 	addi	r2,r2,1
100009a0:	e0bff815 	stw	r2,-32(fp)
100009a4:	e0bff817 	ldw	r2,-32(fp)
100009a8:	10800110 	cmplti	r2,r2,4
100009ac:	103fd91e 	bne	r2,zero,10000914 <__alt_data_end+0xf8000914>
            roundKeys[row][col] ^= roundKeys[row][col - 4];
        }

        // xor with rcon if this is a new block
        if(col % 4 == 0) {
100009b0:	e0bff417 	ldw	r2,-48(fp)
100009b4:	108000cc 	andi	r2,r2,3
100009b8:	10002f1e 	bne	r2,zero,10000a78 <keyExpansion+0x394>
            for(int row = 0; row < _NB; row++) {
100009bc:	e03ff915 	stw	zero,-28(fp)
100009c0:	00002a06 	br	10000a6c <keyExpansion+0x388>
                roundKeys[row][col] ^= Rcon[row][(col - 4) / 4];
100009c4:	e0bff917 	ldw	r2,-28(fp)
100009c8:	01400b04 	movi	r5,44
100009cc:	1009883a 	mov	r4,r2
100009d0:	00016040 	call	10001604 <__mulsi3>
100009d4:	1007883a 	mov	r3,r2
100009d8:	e0bffb17 	ldw	r2,-20(fp)
100009dc:	10e3883a 	add	r17,r2,r3
100009e0:	e0bff917 	ldw	r2,-28(fp)
100009e4:	01400b04 	movi	r5,44
100009e8:	1009883a 	mov	r4,r2
100009ec:	00016040 	call	10001604 <__mulsi3>
100009f0:	1007883a 	mov	r3,r2
100009f4:	e0bffb17 	ldw	r2,-20(fp)
100009f8:	10c7883a 	add	r3,r2,r3
100009fc:	e0bff417 	ldw	r2,-48(fp)
10000a00:	1885883a 	add	r2,r3,r2
10000a04:	14800003 	ldbu	r18,0(r2)
10000a08:	e0bff417 	ldw	r2,-48(fp)
10000a0c:	10bfff04 	addi	r2,r2,-4
10000a10:	1000010e 	bge	r2,zero,10000a18 <keyExpansion+0x334>
10000a14:	108000c4 	addi	r2,r2,3
10000a18:	1005d0ba 	srai	r2,r2,2
10000a1c:	1027883a 	mov	r19,r2
10000a20:	04040074 	movhi	r16,4097
10000a24:	84071a04 	addi	r16,r16,7272
10000a28:	e0bff917 	ldw	r2,-28(fp)
10000a2c:	01400284 	movi	r5,10
10000a30:	1009883a 	mov	r4,r2
10000a34:	00016040 	call	10001604 <__mulsi3>
10000a38:	14c5883a 	add	r2,r2,r19
10000a3c:	1085883a 	add	r2,r2,r2
10000a40:	1085883a 	add	r2,r2,r2
10000a44:	8085883a 	add	r2,r16,r2
10000a48:	10800017 	ldw	r2,0(r2)
10000a4c:	9084f03a 	xor	r2,r18,r2
10000a50:	1007883a 	mov	r3,r2
10000a54:	e0bff417 	ldw	r2,-48(fp)
10000a58:	8885883a 	add	r2,r17,r2
10000a5c:	10c00005 	stb	r3,0(r2)
            roundKeys[row][col] ^= roundKeys[row][col - 4];
        }

        // xor with rcon if this is a new block
        if(col % 4 == 0) {
            for(int row = 0; row < _NB; row++) {
10000a60:	e0bff917 	ldw	r2,-28(fp)
10000a64:	10800044 	addi	r2,r2,1
10000a68:	e0bff915 	stw	r2,-28(fp)
10000a6c:	e0bff917 	ldw	r2,-28(fp)
10000a70:	10800110 	cmplti	r2,r2,4
10000a74:	103fd31e 	bne	r2,zero,100009c4 <__alt_data_end+0xf80009c4>
            roundKeys[row][col] = inputKey[row][col];
        }
    }

    // loop through the entire state array
    for(int col = 4; col < ((_NR + 1) * _NK); col++) {
10000a78:	e0bff417 	ldw	r2,-48(fp)
10000a7c:	10800044 	addi	r2,r2,1
10000a80:	e0bff415 	stw	r2,-48(fp)
10000a84:	e0bff417 	ldw	r2,-48(fp)
10000a88:	10800b10 	cmplti	r2,r2,44
10000a8c:	103f451e 	bne	r2,zero,100007a4 <__alt_data_end+0xf80007a4>
            for(int row = 0; row < _NB; row++) {
                roundKeys[row][col] ^= Rcon[row][(col - 4) / 4];
            }
        }
    }
}
10000a90:	0001883a 	nop
10000a94:	e6fffc04 	addi	sp,fp,-16
10000a98:	dfc00517 	ldw	ra,20(sp)
10000a9c:	df000417 	ldw	fp,16(sp)
10000aa0:	dcc00317 	ldw	r19,12(sp)
10000aa4:	dc800217 	ldw	r18,8(sp)
10000aa8:	dc400117 	ldw	r17,4(sp)
10000aac:	dc000017 	ldw	r16,0(sp)
10000ab0:	dec00604 	addi	sp,sp,24
10000ab4:	f800283a 	ret

10000ab8 <mixColumns>:

void mixColumns(uint8_t state[_NB][_NB]) {
10000ab8:	defff404 	addi	sp,sp,-48
10000abc:	dfc00b15 	stw	ra,44(sp)
10000ac0:	df000a15 	stw	fp,40(sp)
10000ac4:	dc400915 	stw	r17,36(sp)
10000ac8:	dc000815 	stw	r16,32(sp)
10000acc:	df000a04 	addi	fp,sp,40
10000ad0:	e13ffd15 	stw	r4,-12(fp)
    uint8_t new_state[_NB][_NB];
    for(int col = 0; col < _NB; col++) {
10000ad4:	e03ff615 	stw	zero,-40(fp)
10000ad8:	0000bb06 	br	10000dc8 <mixColumns+0x310>
        // compute each new state
        new_state[0][col] = (gf_mul[state[0][col]][0]) ^ (gf_mul[state[1][col]][1]) ^ state[2][col] ^ state[3][col];
10000adc:	e0fffd17 	ldw	r3,-12(fp)
10000ae0:	e0bff617 	ldw	r2,-40(fp)
10000ae4:	1885883a 	add	r2,r3,r2
10000ae8:	10800003 	ldbu	r2,0(r2)
10000aec:	10803fcc 	andi	r2,r2,255
10000af0:	04040074 	movhi	r16,4097
10000af4:	8404c704 	addi	r16,r16,4892
10000af8:	01400184 	movi	r5,6
10000afc:	1009883a 	mov	r4,r2
10000b00:	00016040 	call	10001604 <__mulsi3>
10000b04:	8085883a 	add	r2,r16,r2
10000b08:	14400003 	ldbu	r17,0(r2)
10000b0c:	e0bffd17 	ldw	r2,-12(fp)
10000b10:	10c00104 	addi	r3,r2,4
10000b14:	e0bff617 	ldw	r2,-40(fp)
10000b18:	1885883a 	add	r2,r3,r2
10000b1c:	10800003 	ldbu	r2,0(r2)
10000b20:	10803fcc 	andi	r2,r2,255
10000b24:	04040074 	movhi	r16,4097
10000b28:	8404c704 	addi	r16,r16,4892
10000b2c:	01400184 	movi	r5,6
10000b30:	1009883a 	mov	r4,r2
10000b34:	00016040 	call	10001604 <__mulsi3>
10000b38:	8085883a 	add	r2,r16,r2
10000b3c:	10800044 	addi	r2,r2,1
10000b40:	10800003 	ldbu	r2,0(r2)
10000b44:	8884f03a 	xor	r2,r17,r2
10000b48:	1009883a 	mov	r4,r2
10000b4c:	e0bffd17 	ldw	r2,-12(fp)
10000b50:	10c00204 	addi	r3,r2,8
10000b54:	e0bff617 	ldw	r2,-40(fp)
10000b58:	1885883a 	add	r2,r3,r2
10000b5c:	10800003 	ldbu	r2,0(r2)
10000b60:	2084f03a 	xor	r2,r4,r2
10000b64:	1009883a 	mov	r4,r2
10000b68:	e0bffd17 	ldw	r2,-12(fp)
10000b6c:	10c00304 	addi	r3,r2,12
10000b70:	e0bff617 	ldw	r2,-40(fp)
10000b74:	1885883a 	add	r2,r3,r2
10000b78:	10800003 	ldbu	r2,0(r2)
10000b7c:	2084f03a 	xor	r2,r4,r2
10000b80:	1009883a 	mov	r4,r2
10000b84:	e0fff904 	addi	r3,fp,-28
10000b88:	e0bff617 	ldw	r2,-40(fp)
10000b8c:	1885883a 	add	r2,r3,r2
10000b90:	11000005 	stb	r4,0(r2)
        new_state[1][col] = state[0][col] ^ (gf_mul[state[1][col]][0]) ^ (gf_mul[state[2][col]][1]) ^ state[3][col];
10000b94:	e0fffd17 	ldw	r3,-12(fp)
10000b98:	e0bff617 	ldw	r2,-40(fp)
10000b9c:	1885883a 	add	r2,r3,r2
10000ba0:	14400003 	ldbu	r17,0(r2)
10000ba4:	e0bffd17 	ldw	r2,-12(fp)
10000ba8:	10c00104 	addi	r3,r2,4
10000bac:	e0bff617 	ldw	r2,-40(fp)
10000bb0:	1885883a 	add	r2,r3,r2
10000bb4:	10800003 	ldbu	r2,0(r2)
10000bb8:	10803fcc 	andi	r2,r2,255
10000bbc:	04040074 	movhi	r16,4097
10000bc0:	8404c704 	addi	r16,r16,4892
10000bc4:	01400184 	movi	r5,6
10000bc8:	1009883a 	mov	r4,r2
10000bcc:	00016040 	call	10001604 <__mulsi3>
10000bd0:	8085883a 	add	r2,r16,r2
10000bd4:	10800003 	ldbu	r2,0(r2)
10000bd8:	8884f03a 	xor	r2,r17,r2
10000bdc:	1023883a 	mov	r17,r2
10000be0:	e0bffd17 	ldw	r2,-12(fp)
10000be4:	10c00204 	addi	r3,r2,8
10000be8:	e0bff617 	ldw	r2,-40(fp)
10000bec:	1885883a 	add	r2,r3,r2
10000bf0:	10800003 	ldbu	r2,0(r2)
10000bf4:	10803fcc 	andi	r2,r2,255
10000bf8:	04040074 	movhi	r16,4097
10000bfc:	8404c704 	addi	r16,r16,4892
10000c00:	01400184 	movi	r5,6
10000c04:	1009883a 	mov	r4,r2
10000c08:	00016040 	call	10001604 <__mulsi3>
10000c0c:	8085883a 	add	r2,r16,r2
10000c10:	10800044 	addi	r2,r2,1
10000c14:	10800003 	ldbu	r2,0(r2)
10000c18:	8884f03a 	xor	r2,r17,r2
10000c1c:	1009883a 	mov	r4,r2
10000c20:	e0bffd17 	ldw	r2,-12(fp)
10000c24:	10c00304 	addi	r3,r2,12
10000c28:	e0bff617 	ldw	r2,-40(fp)
10000c2c:	1885883a 	add	r2,r3,r2
10000c30:	10800003 	ldbu	r2,0(r2)
10000c34:	2084f03a 	xor	r2,r4,r2
10000c38:	1009883a 	mov	r4,r2
10000c3c:	e0fffa04 	addi	r3,fp,-24
10000c40:	e0bff617 	ldw	r2,-40(fp)
10000c44:	1885883a 	add	r2,r3,r2
10000c48:	11000005 	stb	r4,0(r2)
        new_state[2][col] = state[0][col] ^ state[1][col] ^ (gf_mul[state[2][col]][0]) ^ (gf_mul[state[3][col]][1]);
10000c4c:	e0fffd17 	ldw	r3,-12(fp)
10000c50:	e0bff617 	ldw	r2,-40(fp)
10000c54:	1885883a 	add	r2,r3,r2
10000c58:	10c00003 	ldbu	r3,0(r2)
10000c5c:	e0bffd17 	ldw	r2,-12(fp)
10000c60:	11000104 	addi	r4,r2,4
10000c64:	e0bff617 	ldw	r2,-40(fp)
10000c68:	2085883a 	add	r2,r4,r2
10000c6c:	10800003 	ldbu	r2,0(r2)
10000c70:	1884f03a 	xor	r2,r3,r2
10000c74:	1023883a 	mov	r17,r2
10000c78:	e0bffd17 	ldw	r2,-12(fp)
10000c7c:	10c00204 	addi	r3,r2,8
10000c80:	e0bff617 	ldw	r2,-40(fp)
10000c84:	1885883a 	add	r2,r3,r2
10000c88:	10800003 	ldbu	r2,0(r2)
10000c8c:	10803fcc 	andi	r2,r2,255
10000c90:	04040074 	movhi	r16,4097
10000c94:	8404c704 	addi	r16,r16,4892
10000c98:	01400184 	movi	r5,6
10000c9c:	1009883a 	mov	r4,r2
10000ca0:	00016040 	call	10001604 <__mulsi3>
10000ca4:	8085883a 	add	r2,r16,r2
10000ca8:	10800003 	ldbu	r2,0(r2)
10000cac:	8884f03a 	xor	r2,r17,r2
10000cb0:	1023883a 	mov	r17,r2
10000cb4:	e0bffd17 	ldw	r2,-12(fp)
10000cb8:	10c00304 	addi	r3,r2,12
10000cbc:	e0bff617 	ldw	r2,-40(fp)
10000cc0:	1885883a 	add	r2,r3,r2
10000cc4:	10800003 	ldbu	r2,0(r2)
10000cc8:	10803fcc 	andi	r2,r2,255
10000ccc:	04040074 	movhi	r16,4097
10000cd0:	8404c704 	addi	r16,r16,4892
10000cd4:	01400184 	movi	r5,6
10000cd8:	1009883a 	mov	r4,r2
10000cdc:	00016040 	call	10001604 <__mulsi3>
10000ce0:	8085883a 	add	r2,r16,r2
10000ce4:	10800044 	addi	r2,r2,1
10000ce8:	10800003 	ldbu	r2,0(r2)
10000cec:	8884f03a 	xor	r2,r17,r2
10000cf0:	1009883a 	mov	r4,r2
10000cf4:	e0fffb04 	addi	r3,fp,-20
10000cf8:	e0bff617 	ldw	r2,-40(fp)
10000cfc:	1885883a 	add	r2,r3,r2
10000d00:	11000005 	stb	r4,0(r2)
        new_state[3][col] = (gf_mul[state[0][col]][1]) ^ state[1][col] ^ state[2][col] ^ (gf_mul[state[3][col]][0]);
10000d04:	e0fffd17 	ldw	r3,-12(fp)
10000d08:	e0bff617 	ldw	r2,-40(fp)
10000d0c:	1885883a 	add	r2,r3,r2
10000d10:	10800003 	ldbu	r2,0(r2)
10000d14:	10803fcc 	andi	r2,r2,255
10000d18:	04040074 	movhi	r16,4097
10000d1c:	8404c704 	addi	r16,r16,4892
10000d20:	01400184 	movi	r5,6
10000d24:	1009883a 	mov	r4,r2
10000d28:	00016040 	call	10001604 <__mulsi3>
10000d2c:	8085883a 	add	r2,r16,r2
10000d30:	10800044 	addi	r2,r2,1
10000d34:	10c00003 	ldbu	r3,0(r2)
10000d38:	e0bffd17 	ldw	r2,-12(fp)
10000d3c:	11000104 	addi	r4,r2,4
10000d40:	e0bff617 	ldw	r2,-40(fp)
10000d44:	2085883a 	add	r2,r4,r2
10000d48:	10800003 	ldbu	r2,0(r2)
10000d4c:	1884f03a 	xor	r2,r3,r2
10000d50:	1009883a 	mov	r4,r2
10000d54:	e0bffd17 	ldw	r2,-12(fp)
10000d58:	10c00204 	addi	r3,r2,8
10000d5c:	e0bff617 	ldw	r2,-40(fp)
10000d60:	1885883a 	add	r2,r3,r2
10000d64:	10800003 	ldbu	r2,0(r2)
10000d68:	2084f03a 	xor	r2,r4,r2
10000d6c:	1023883a 	mov	r17,r2
10000d70:	e0bffd17 	ldw	r2,-12(fp)
10000d74:	10c00304 	addi	r3,r2,12
10000d78:	e0bff617 	ldw	r2,-40(fp)
10000d7c:	1885883a 	add	r2,r3,r2
10000d80:	10800003 	ldbu	r2,0(r2)
10000d84:	10803fcc 	andi	r2,r2,255
10000d88:	04040074 	movhi	r16,4097
10000d8c:	8404c704 	addi	r16,r16,4892
10000d90:	01400184 	movi	r5,6
10000d94:	1009883a 	mov	r4,r2
10000d98:	00016040 	call	10001604 <__mulsi3>
10000d9c:	8085883a 	add	r2,r16,r2
10000da0:	10800003 	ldbu	r2,0(r2)
10000da4:	8884f03a 	xor	r2,r17,r2
10000da8:	1009883a 	mov	r4,r2
10000dac:	e0fffc04 	addi	r3,fp,-16
10000db0:	e0bff617 	ldw	r2,-40(fp)
10000db4:	1885883a 	add	r2,r3,r2
10000db8:	11000005 	stb	r4,0(r2)
    }
}

void mixColumns(uint8_t state[_NB][_NB]) {
    uint8_t new_state[_NB][_NB];
    for(int col = 0; col < _NB; col++) {
10000dbc:	e0bff617 	ldw	r2,-40(fp)
10000dc0:	10800044 	addi	r2,r2,1
10000dc4:	e0bff615 	stw	r2,-40(fp)
10000dc8:	e0bff617 	ldw	r2,-40(fp)
10000dcc:	10800110 	cmplti	r2,r2,4
10000dd0:	103f421e 	bne	r2,zero,10000adc <__alt_data_end+0xf8000adc>
        new_state[1][col] = state[0][col] ^ (gf_mul[state[1][col]][0]) ^ (gf_mul[state[2][col]][1]) ^ state[3][col];
        new_state[2][col] = state[0][col] ^ state[1][col] ^ (gf_mul[state[2][col]][0]) ^ (gf_mul[state[3][col]][1]);
        new_state[3][col] = (gf_mul[state[0][col]][1]) ^ state[1][col] ^ state[2][col] ^ (gf_mul[state[3][col]][0]);
    }

    for (int row = 0; row < _NB; row++) {
10000dd4:	e03ff715 	stw	zero,-36(fp)
10000dd8:	00001d06 	br	10000e50 <mixColumns+0x398>
        for (int col = 0; col < _NB; col++) {
10000ddc:	e03ff815 	stw	zero,-32(fp)
10000de0:	00001506 	br	10000e38 <mixColumns+0x380>
            state[row][col] = new_state[row][col];
10000de4:	e0bff717 	ldw	r2,-36(fp)
10000de8:	1085883a 	add	r2,r2,r2
10000dec:	1085883a 	add	r2,r2,r2
10000df0:	1007883a 	mov	r3,r2
10000df4:	e0bffd17 	ldw	r2,-12(fp)
10000df8:	10c9883a 	add	r4,r2,r3
10000dfc:	e0bff717 	ldw	r2,-36(fp)
10000e00:	1085883a 	add	r2,r2,r2
10000e04:	1085883a 	add	r2,r2,r2
10000e08:	e17ff604 	addi	r5,fp,-40
10000e0c:	2887883a 	add	r3,r5,r2
10000e10:	e0bff817 	ldw	r2,-32(fp)
10000e14:	1885883a 	add	r2,r3,r2
10000e18:	10800304 	addi	r2,r2,12
10000e1c:	10c00003 	ldbu	r3,0(r2)
10000e20:	e0bff817 	ldw	r2,-32(fp)
10000e24:	2085883a 	add	r2,r4,r2
10000e28:	10c00005 	stb	r3,0(r2)
        new_state[2][col] = state[0][col] ^ state[1][col] ^ (gf_mul[state[2][col]][0]) ^ (gf_mul[state[3][col]][1]);
        new_state[3][col] = (gf_mul[state[0][col]][1]) ^ state[1][col] ^ state[2][col] ^ (gf_mul[state[3][col]][0]);
    }

    for (int row = 0; row < _NB; row++) {
        for (int col = 0; col < _NB; col++) {
10000e2c:	e0bff817 	ldw	r2,-32(fp)
10000e30:	10800044 	addi	r2,r2,1
10000e34:	e0bff815 	stw	r2,-32(fp)
10000e38:	e0bff817 	ldw	r2,-32(fp)
10000e3c:	10800110 	cmplti	r2,r2,4
10000e40:	103fe81e 	bne	r2,zero,10000de4 <__alt_data_end+0xf8000de4>
        new_state[1][col] = state[0][col] ^ (gf_mul[state[1][col]][0]) ^ (gf_mul[state[2][col]][1]) ^ state[3][col];
        new_state[2][col] = state[0][col] ^ state[1][col] ^ (gf_mul[state[2][col]][0]) ^ (gf_mul[state[3][col]][1]);
        new_state[3][col] = (gf_mul[state[0][col]][1]) ^ state[1][col] ^ state[2][col] ^ (gf_mul[state[3][col]][0]);
    }

    for (int row = 0; row < _NB; row++) {
10000e44:	e0bff717 	ldw	r2,-36(fp)
10000e48:	10800044 	addi	r2,r2,1
10000e4c:	e0bff715 	stw	r2,-36(fp)
10000e50:	e0bff717 	ldw	r2,-36(fp)
10000e54:	10800110 	cmplti	r2,r2,4
10000e58:	103fe01e 	bne	r2,zero,10000ddc <__alt_data_end+0xf8000ddc>
        for (int col = 0; col < _NB; col++) {
            state[row][col] = new_state[row][col];
        }
    }
}
10000e5c:	0001883a 	nop
10000e60:	e6fffe04 	addi	sp,fp,-8
10000e64:	dfc00317 	ldw	ra,12(sp)
10000e68:	df000217 	ldw	fp,8(sp)
10000e6c:	dc400117 	ldw	r17,4(sp)
10000e70:	dc000017 	ldw	r16,0(sp)
10000e74:	dec00404 	addi	sp,sp,16
10000e78:	f800283a 	ret

10000e7c <aes>:

void aes(uint8_t key[_NB][_NB], uint8_t state[_NB][_NB]) {
10000e7c:	deffcf04 	addi	sp,sp,-196
10000e80:	dfc03015 	stw	ra,192(sp)
10000e84:	df002f15 	stw	fp,188(sp)
10000e88:	df002f04 	addi	fp,sp,188
10000e8c:	e13ffe15 	stw	r4,-8(fp)
10000e90:	e17fff15 	stw	r5,-4(fp)
    uint8_t roundKeys[_NB][_NB * (_NR + 1)];
    keyExpansion(key, roundKeys);
10000e94:	e0bfd204 	addi	r2,fp,-184
10000e98:	100b883a 	mov	r5,r2
10000e9c:	e13ffe17 	ldw	r4,-8(fp)
10000ea0:	00006e40 	call	100006e4 <keyExpansion>
    // intial round
	addRoundKey(state, roundKeys, 0);
10000ea4:	e0bfd204 	addi	r2,fp,-184
10000ea8:	000d883a 	mov	r6,zero
10000eac:	100b883a 	mov	r5,r2
10000eb0:	e13fff17 	ldw	r4,-4(fp)
10000eb4:	00005e00 	call	100005e0 <addRoundKey>

	// first (_NR - 1) Rounds
	for (int round = 1; round < _NR; round++) {
10000eb8:	00800044 	movi	r2,1
10000ebc:	e0bfd115 	stw	r2,-188(fp)
10000ec0:	00001206 	br	10000f0c <aes+0x90>
		subBytes(state);
10000ec4:	e13fff17 	ldw	r4,-4(fp)
10000ec8:	000046c0 	call	1000046c <subBytes>
		shiftRows(state);
10000ecc:	e13fff17 	ldw	r4,-4(fp)
10000ed0:	00005500 	call	10000550 <shiftRows>
		mixColumns(state);
10000ed4:	e13fff17 	ldw	r4,-4(fp)
10000ed8:	0000ab80 	call	10000ab8 <mixColumns>
		addRoundKey(state, roundKeys, round * _NK);
10000edc:	e0bfd117 	ldw	r2,-188(fp)
10000ee0:	1085883a 	add	r2,r2,r2
10000ee4:	1085883a 	add	r2,r2,r2
10000ee8:	1007883a 	mov	r3,r2
10000eec:	e0bfd204 	addi	r2,fp,-184
10000ef0:	180d883a 	mov	r6,r3
10000ef4:	100b883a 	mov	r5,r2
10000ef8:	e13fff17 	ldw	r4,-4(fp)
10000efc:	00005e00 	call	100005e0 <addRoundKey>
    keyExpansion(key, roundKeys);
    // intial round
	addRoundKey(state, roundKeys, 0);

	// first (_NR - 1) Rounds
	for (int round = 1; round < _NR; round++) {
10000f00:	e0bfd117 	ldw	r2,-188(fp)
10000f04:	10800044 	addi	r2,r2,1
10000f08:	e0bfd115 	stw	r2,-188(fp)
10000f0c:	e0bfd117 	ldw	r2,-188(fp)
10000f10:	10800290 	cmplti	r2,r2,10
10000f14:	103feb1e 	bne	r2,zero,10000ec4 <__alt_data_end+0xf8000ec4>
		mixColumns(state);
		addRoundKey(state, roundKeys, round * _NK);
	}

	// final round
	subBytes(state);
10000f18:	e13fff17 	ldw	r4,-4(fp)
10000f1c:	000046c0 	call	1000046c <subBytes>
	shiftRows(state);
10000f20:	e13fff17 	ldw	r4,-4(fp)
10000f24:	00005500 	call	10000550 <shiftRows>
	addRoundKey(state, roundKeys, _NR * _NK);
10000f28:	e0bfd204 	addi	r2,fp,-184
10000f2c:	01800a04 	movi	r6,40
10000f30:	100b883a 	mov	r5,r2
10000f34:	e13fff17 	ldw	r4,-4(fp)
10000f38:	00005e00 	call	100005e0 <addRoundKey>
}
10000f3c:	0001883a 	nop
10000f40:	e037883a 	mov	sp,fp
10000f44:	dfc00117 	ldw	ra,4(sp)
10000f48:	df000017 	ldw	fp,0(sp)
10000f4c:	dec00204 	addi	sp,sp,8
10000f50:	f800283a 	ret

10000f54 <sendMessage>:

void sendMessage(uint8_t state[_NB][_NB]) {
10000f54:	defffd04 	addi	sp,sp,-12
10000f58:	df000215 	stw	fp,8(sp)
10000f5c:	df000204 	addi	fp,sp,8
10000f60:	e13fff15 	stw	r4,-4(fp)
    for (int col = 0; col < _NB; col++) {
10000f64:	e03ffe15 	stw	zero,-8(fp)
10000f68:	00003706 	br	10001048 <sendMessage+0xf4>
        *to_hw_sig = 1;
10000f6c:	00900034 	movhi	r2,16384
10000f70:	10800404 	addi	r2,r2,16
10000f74:	00c00044 	movi	r3,1
10000f78:	10c00005 	stb	r3,0(r2)

        *to_hw_port = (state[0][col] << 24) + (state[1][col] << 16) + (state[2][col] << 8) + state[3][col];
10000f7c:	00900034 	movhi	r2,16384
10000f80:	e13fff17 	ldw	r4,-4(fp)
10000f84:	e0fffe17 	ldw	r3,-8(fp)
10000f88:	20c7883a 	add	r3,r4,r3
10000f8c:	18c00003 	ldbu	r3,0(r3)
10000f90:	18c03fcc 	andi	r3,r3,255
10000f94:	1808963a 	slli	r4,r3,24
10000f98:	e0ffff17 	ldw	r3,-4(fp)
10000f9c:	19400104 	addi	r5,r3,4
10000fa0:	e0fffe17 	ldw	r3,-8(fp)
10000fa4:	28c7883a 	add	r3,r5,r3
10000fa8:	18c00003 	ldbu	r3,0(r3)
10000fac:	18c03fcc 	andi	r3,r3,255
10000fb0:	1806943a 	slli	r3,r3,16
10000fb4:	20c9883a 	add	r4,r4,r3
10000fb8:	e0ffff17 	ldw	r3,-4(fp)
10000fbc:	19400204 	addi	r5,r3,8
10000fc0:	e0fffe17 	ldw	r3,-8(fp)
10000fc4:	28c7883a 	add	r3,r5,r3
10000fc8:	18c00003 	ldbu	r3,0(r3)
10000fcc:	18c03fcc 	andi	r3,r3,255
10000fd0:	1806923a 	slli	r3,r3,8
10000fd4:	20c9883a 	add	r4,r4,r3
10000fd8:	e0ffff17 	ldw	r3,-4(fp)
10000fdc:	19400304 	addi	r5,r3,12
10000fe0:	e0fffe17 	ldw	r3,-8(fp)
10000fe4:	28c7883a 	add	r3,r5,r3
10000fe8:	18c00003 	ldbu	r3,0(r3)
10000fec:	18c03fcc 	andi	r3,r3,255
10000ff0:	20c7883a 	add	r3,r4,r3
10000ff4:	10c00015 	stw	r3,0(r2)
        while(*to_sw_sig != 1);
10000ff8:	0001883a 	nop
10000ffc:	00900034 	movhi	r2,16384
10001000:	10800c04 	addi	r2,r2,48
10001004:	10800003 	ldbu	r2,0(r2)
10001008:	10803fcc 	andi	r2,r2,255
1000100c:	10800058 	cmpnei	r2,r2,1
10001010:	103ffa1e 	bne	r2,zero,10000ffc <__alt_data_end+0xf8000ffc>

        *to_hw_sig = 2;
10001014:	00900034 	movhi	r2,16384
10001018:	10800404 	addi	r2,r2,16
1000101c:	00c00084 	movi	r3,2
10001020:	10c00005 	stb	r3,0(r2)
        while(*to_sw_sig != 0);
10001024:	0001883a 	nop
10001028:	00900034 	movhi	r2,16384
1000102c:	10800c04 	addi	r2,r2,48
10001030:	10800003 	ldbu	r2,0(r2)
10001034:	10803fcc 	andi	r2,r2,255
10001038:	103ffb1e 	bne	r2,zero,10001028 <__alt_data_end+0xf8001028>
	shiftRows(state);
	addRoundKey(state, roundKeys, _NR * _NK);
}

void sendMessage(uint8_t state[_NB][_NB]) {
    for (int col = 0; col < _NB; col++) {
1000103c:	e0bffe17 	ldw	r2,-8(fp)
10001040:	10800044 	addi	r2,r2,1
10001044:	e0bffe15 	stw	r2,-8(fp)
10001048:	e0bffe17 	ldw	r2,-8(fp)
1000104c:	10800110 	cmplti	r2,r2,4
10001050:	103fc61e 	bne	r2,zero,10000f6c <__alt_data_end+0xf8000f6c>

        *to_hw_sig = 2;
        while(*to_sw_sig != 0);
    }

    *to_hw_sig = 0;
10001054:	00900034 	movhi	r2,16384
10001058:	10800404 	addi	r2,r2,16
1000105c:	10000005 	stb	zero,0(r2)
    *to_hw_port = 0;
10001060:	00900034 	movhi	r2,16384
10001064:	10000015 	stw	zero,0(r2)
}
10001068:	0001883a 	nop
1000106c:	e037883a 	mov	sp,fp
10001070:	df000017 	ldw	fp,0(sp)
10001074:	dec00104 	addi	sp,sp,4
10001078:	f800283a 	ret

1000107c <sendKey>:

void sendKey(uint8_t key[_NB][_NB]) {
1000107c:	defffc04 	addi	sp,sp,-16
10001080:	dfc00315 	stw	ra,12(sp)
10001084:	df000215 	stw	fp,8(sp)
10001088:	df000204 	addi	fp,sp,8
1000108c:	e13fff15 	stw	r4,-4(fp)
	printf("start sendkey");
10001090:	01040074 	movhi	r4,4097
10001094:	21064704 	addi	r4,r4,6428
10001098:	000189c0 	call	1000189c <printf>
    for (int col = 0; col < _NB; col++) {
1000109c:	e03ffe15 	stw	zero,-8(fp)
100010a0:	00003706 	br	10001180 <sendKey+0x104>
        *to_hw_sig = 2;
100010a4:	00900034 	movhi	r2,16384
100010a8:	10800404 	addi	r2,r2,16
100010ac:	00c00084 	movi	r3,2
100010b0:	10c00005 	stb	r3,0(r2)

        *to_hw_port = (key[0][col] << 24) + (key[1][col] << 16) + (key[2][col] << 8) + key[3][col];
100010b4:	00900034 	movhi	r2,16384
100010b8:	e13fff17 	ldw	r4,-4(fp)
100010bc:	e0fffe17 	ldw	r3,-8(fp)
100010c0:	20c7883a 	add	r3,r4,r3
100010c4:	18c00003 	ldbu	r3,0(r3)
100010c8:	18c03fcc 	andi	r3,r3,255
100010cc:	1808963a 	slli	r4,r3,24
100010d0:	e0ffff17 	ldw	r3,-4(fp)
100010d4:	19400104 	addi	r5,r3,4
100010d8:	e0fffe17 	ldw	r3,-8(fp)
100010dc:	28c7883a 	add	r3,r5,r3
100010e0:	18c00003 	ldbu	r3,0(r3)
100010e4:	18c03fcc 	andi	r3,r3,255
100010e8:	1806943a 	slli	r3,r3,16
100010ec:	20c9883a 	add	r4,r4,r3
100010f0:	e0ffff17 	ldw	r3,-4(fp)
100010f4:	19400204 	addi	r5,r3,8
100010f8:	e0fffe17 	ldw	r3,-8(fp)
100010fc:	28c7883a 	add	r3,r5,r3
10001100:	18c00003 	ldbu	r3,0(r3)
10001104:	18c03fcc 	andi	r3,r3,255
10001108:	1806923a 	slli	r3,r3,8
1000110c:	20c9883a 	add	r4,r4,r3
10001110:	e0ffff17 	ldw	r3,-4(fp)
10001114:	19400304 	addi	r5,r3,12
10001118:	e0fffe17 	ldw	r3,-8(fp)
1000111c:	28c7883a 	add	r3,r5,r3
10001120:	18c00003 	ldbu	r3,0(r3)
10001124:	18c03fcc 	andi	r3,r3,255
10001128:	20c7883a 	add	r3,r4,r3
1000112c:	10c00015 	stw	r3,0(r2)
        while(*to_sw_sig != 1);
10001130:	0001883a 	nop
10001134:	00900034 	movhi	r2,16384
10001138:	10800c04 	addi	r2,r2,48
1000113c:	10800003 	ldbu	r2,0(r2)
10001140:	10803fcc 	andi	r2,r2,255
10001144:	10800058 	cmpnei	r2,r2,1
10001148:	103ffa1e 	bne	r2,zero,10001134 <__alt_data_end+0xf8001134>

        *to_hw_sig = 1;
1000114c:	00900034 	movhi	r2,16384
10001150:	10800404 	addi	r2,r2,16
10001154:	00c00044 	movi	r3,1
10001158:	10c00005 	stb	r3,0(r2)
        while(*to_sw_sig != 0);
1000115c:	0001883a 	nop
10001160:	00900034 	movhi	r2,16384
10001164:	10800c04 	addi	r2,r2,48
10001168:	10800003 	ldbu	r2,0(r2)
1000116c:	10803fcc 	andi	r2,r2,255
10001170:	103ffb1e 	bne	r2,zero,10001160 <__alt_data_end+0xf8001160>
    *to_hw_port = 0;
}

void sendKey(uint8_t key[_NB][_NB]) {
	printf("start sendkey");
    for (int col = 0; col < _NB; col++) {
10001174:	e0bffe17 	ldw	r2,-8(fp)
10001178:	10800044 	addi	r2,r2,1
1000117c:	e0bffe15 	stw	r2,-8(fp)
10001180:	e0bffe17 	ldw	r2,-8(fp)
10001184:	10800110 	cmplti	r2,r2,4
10001188:	103fc61e 	bne	r2,zero,100010a4 <__alt_data_end+0xf80010a4>

        *to_hw_sig = 1;
        while(*to_sw_sig != 0);
    }

    *to_hw_sig = 0;
1000118c:	00900034 	movhi	r2,16384
10001190:	10800404 	addi	r2,r2,16
10001194:	10000005 	stb	zero,0(r2)
    *to_hw_port = 0;
10001198:	00900034 	movhi	r2,16384
1000119c:	10000015 	stw	zero,0(r2)
    printf("end sendkey");
100011a0:	01040074 	movhi	r4,4097
100011a4:	21064b04 	addi	r4,r4,6444
100011a8:	000189c0 	call	1000189c <printf>
}
100011ac:	0001883a 	nop
100011b0:	e037883a 	mov	sp,fp
100011b4:	dfc00117 	ldw	ra,4(sp)
100011b8:	df000017 	ldw	fp,0(sp)
100011bc:	dec00204 	addi	sp,sp,8
100011c0:	f800283a 	ret

100011c4 <printParts>:

void printParts() {
100011c4:	defffd04 	addi	sp,sp,-12
100011c8:	dfc00215 	stw	ra,8(sp)
100011cc:	df000115 	stw	fp,4(sp)
100011d0:	df000104 	addi	fp,sp,4
	uint32_t charData = *to_sw_port;
100011d4:	00900034 	movhi	r2,16384
100011d8:	10800804 	addi	r2,r2,32
100011dc:	10800017 	ldw	r2,0(r2)
100011e0:	e0bfff15 	stw	r2,-4(fp)
	printf("%08x", charData);
100011e4:	e17fff17 	ldw	r5,-4(fp)
100011e8:	01040074 	movhi	r4,4097
100011ec:	21064e04 	addi	r4,r4,6456
100011f0:	000189c0 	call	1000189c <printf>
//	for(int i = 0; i < 4; i++) {
//		uint8_t data = charData & bitmask;
//
//		charData = charData >> 2;
//	}
}
100011f4:	0001883a 	nop
100011f8:	e037883a 	mov	sp,fp
100011fc:	dfc00117 	ldw	ra,4(sp)
10001200:	df000017 	ldw	fp,0(sp)
10001204:	dec00204 	addi	sp,sp,8
10001208:	f800283a 	ret

1000120c <main>:

/* aes encryptor*/
int main() {
1000120c:	deffdf04 	addi	sp,sp,-132
10001210:	dfc02015 	stw	ra,128(sp)
10001214:	df001f15 	stw	fp,124(sp)
10001218:	dc401e15 	stw	r17,120(sp)
1000121c:	dc001d15 	stw	r16,116(sp)
10001220:	df001f04 	addi	fp,sp,124
	*(to_hw_sig) = 0;
10001224:	00900034 	movhi	r2,16384
10001228:	10800404 	addi	r2,r2,16
1000122c:	10000005 	stb	zero,0(r2)
	getchar();
10001230:	00840074 	movhi	r2,4097
10001234:	108e0604 	addi	r2,r2,14360
10001238:	10800017 	ldw	r2,0(r2)
1000123c:	10800117 	ldw	r2,4(r2)
10001240:	1009883a 	mov	r4,r2
10001244:	000169c0 	call	1000169c <getc>
    uint8_t plainText[33] = "dbe429ca8610ea6275b100476d87a2c5";
10001248:	008d1974 	movhi	r2,13413
1000124c:	10989904 	addi	r2,r2,25188
10001250:	e0bfe515 	stw	r2,-108(fp)
10001254:	009858f4 	movhi	r2,24931
10001258:	108e4c84 	addi	r2,r2,14642
1000125c:	e0bfe615 	stw	r2,-104(fp)
10001260:	008c0c74 	movhi	r2,12337
10001264:	108d8e04 	addi	r2,r2,13880
10001268:	e0bfe715 	stw	r2,-100(fp)
1000126c:	008c8db4 	movhi	r2,12854
10001270:	10985944 	addi	r2,r2,24933
10001274:	e0bfe815 	stw	r2,-96(fp)
10001278:	008c58b4 	movhi	r2,12642
1000127c:	108d4dc4 	addi	r2,r2,13623
10001280:	e0bfe915 	stw	r2,-92(fp)
10001284:	008dcd34 	movhi	r2,14132
10001288:	108c0c04 	addi	r2,r2,12336
1000128c:	e0bfea15 	stw	r2,-88(fp)
10001290:	008dce34 	movhi	r2,14136
10001294:	10990d84 	addi	r2,r2,25654
10001298:	e0bfeb15 	stw	r2,-84(fp)
1000129c:	008d58f4 	movhi	r2,13667
100012a0:	108c9844 	addi	r2,r2,12897
100012a4:	e0bfec15 	stw	r2,-80(fp)
100012a8:	e03fed05 	stb	zero,-76(fp)
    uint8_t keyText[33]   = "3b280014beaac269d613a16bfdc2be03";
100012ac:	00840074 	movhi	r2,4097
100012b0:	10865204 	addi	r2,r2,6472
100012b4:	e0ffed44 	addi	r3,fp,-75
100012b8:	1009883a 	mov	r4,r2
100012bc:	00800844 	movi	r2,33
100012c0:	100d883a 	mov	r6,r2
100012c4:	200b883a 	mov	r5,r4
100012c8:	1809883a 	mov	r4,r3
100012cc:	00017240 	call	10001724 <memcpy>
//    printf("Enter key: ");
//    scanf("%2000s[^\n]", keyText);

    uint8_t state[_NB][_NB];
    uint8_t key[_NB][_NB];
    for(int i = 0; i < 32; i += 2) {
100012d0:	e03fe115 	stw	zero,-124(fp)
100012d4:	00005b06 	br	10001444 <main+0x238>
        state[(i / 2) % 4][i / 8] = charsToHex(plainText[i], plainText[i + 1]);
100012d8:	e0bfe117 	ldw	r2,-124(fp)
100012dc:	1006d7fa 	srli	r3,r2,31
100012e0:	1885883a 	add	r2,r3,r2
100012e4:	1005d07a 	srai	r2,r2,1
100012e8:	1007883a 	mov	r3,r2
100012ec:	00a00034 	movhi	r2,32768
100012f0:	108000c4 	addi	r2,r2,3
100012f4:	1884703a 	and	r2,r3,r2
100012f8:	1000040e 	bge	r2,zero,1000130c <main+0x100>
100012fc:	10bfffc4 	addi	r2,r2,-1
10001300:	00ffff04 	movi	r3,-4
10001304:	10c4b03a 	or	r2,r2,r3
10001308:	10800044 	addi	r2,r2,1
1000130c:	1021883a 	mov	r16,r2
10001310:	e0bfe117 	ldw	r2,-124(fp)
10001314:	1000010e 	bge	r2,zero,1000131c <main+0x110>
10001318:	108001c4 	addi	r2,r2,7
1000131c:	1005d0fa 	srai	r2,r2,3
10001320:	1023883a 	mov	r17,r2
10001324:	e0ffe504 	addi	r3,fp,-108
10001328:	e0bfe117 	ldw	r2,-124(fp)
1000132c:	1885883a 	add	r2,r3,r2
10001330:	10800003 	ldbu	r2,0(r2)
10001334:	11003fcc 	andi	r4,r2,255
10001338:	2100201c 	xori	r4,r4,128
1000133c:	213fe004 	addi	r4,r4,-128
10001340:	e0bfe117 	ldw	r2,-124(fp)
10001344:	10800044 	addi	r2,r2,1
10001348:	e0ffe504 	addi	r3,fp,-108
1000134c:	1885883a 	add	r2,r3,r2
10001350:	10800003 	ldbu	r2,0(r2)
10001354:	10803fcc 	andi	r2,r2,255
10001358:	1080201c 	xori	r2,r2,128
1000135c:	10bfe004 	addi	r2,r2,-128
10001360:	100b883a 	mov	r5,r2
10001364:	00003280 	call	10000328 <charsToHex>
10001368:	1007883a 	mov	r3,r2
1000136c:	8405883a 	add	r2,r16,r16
10001370:	1085883a 	add	r2,r2,r2
10001374:	e13fe104 	addi	r4,fp,-124
10001378:	2085883a 	add	r2,r4,r2
1000137c:	1445883a 	add	r2,r2,r17
10001380:	10801484 	addi	r2,r2,82
10001384:	10c00005 	stb	r3,0(r2)
        key[(i / 2) % 4][i / 8] = charsToHex(keyText[i], keyText[i + 1]);
10001388:	e0bfe117 	ldw	r2,-124(fp)
1000138c:	1006d7fa 	srli	r3,r2,31
10001390:	1885883a 	add	r2,r3,r2
10001394:	1005d07a 	srai	r2,r2,1
10001398:	1007883a 	mov	r3,r2
1000139c:	00a00034 	movhi	r2,32768
100013a0:	108000c4 	addi	r2,r2,3
100013a4:	1884703a 	and	r2,r3,r2
100013a8:	1000040e 	bge	r2,zero,100013bc <main+0x1b0>
100013ac:	10bfffc4 	addi	r2,r2,-1
100013b0:	00ffff04 	movi	r3,-4
100013b4:	10c4b03a 	or	r2,r2,r3
100013b8:	10800044 	addi	r2,r2,1
100013bc:	1021883a 	mov	r16,r2
100013c0:	e0bfe117 	ldw	r2,-124(fp)
100013c4:	1000010e 	bge	r2,zero,100013cc <main+0x1c0>
100013c8:	108001c4 	addi	r2,r2,7
100013cc:	1005d0fa 	srai	r2,r2,3
100013d0:	1023883a 	mov	r17,r2
100013d4:	e0ffed44 	addi	r3,fp,-75
100013d8:	e0bfe117 	ldw	r2,-124(fp)
100013dc:	1885883a 	add	r2,r3,r2
100013e0:	10800003 	ldbu	r2,0(r2)
100013e4:	11003fcc 	andi	r4,r2,255
100013e8:	2100201c 	xori	r4,r4,128
100013ec:	213fe004 	addi	r4,r4,-128
100013f0:	e0bfe117 	ldw	r2,-124(fp)
100013f4:	10800044 	addi	r2,r2,1
100013f8:	e0ffed44 	addi	r3,fp,-75
100013fc:	1885883a 	add	r2,r3,r2
10001400:	10800003 	ldbu	r2,0(r2)
10001404:	10803fcc 	andi	r2,r2,255
10001408:	1080201c 	xori	r2,r2,128
1000140c:	10bfe004 	addi	r2,r2,-128
10001410:	100b883a 	mov	r5,r2
10001414:	00003280 	call	10000328 <charsToHex>
10001418:	1007883a 	mov	r3,r2
1000141c:	8405883a 	add	r2,r16,r16
10001420:	1085883a 	add	r2,r2,r2
10001424:	e13fe104 	addi	r4,fp,-124
10001428:	2085883a 	add	r2,r4,r2
1000142c:	1445883a 	add	r2,r2,r17
10001430:	10801884 	addi	r2,r2,98
10001434:	10c00005 	stb	r3,0(r2)
//    printf("Enter key: ");
//    scanf("%2000s[^\n]", keyText);

    uint8_t state[_NB][_NB];
    uint8_t key[_NB][_NB];
    for(int i = 0; i < 32; i += 2) {
10001438:	e0bfe117 	ldw	r2,-124(fp)
1000143c:	10800084 	addi	r2,r2,2
10001440:	e0bfe115 	stw	r2,-124(fp)
10001444:	e0bfe117 	ldw	r2,-124(fp)
10001448:	10800810 	cmplti	r2,r2,32
1000144c:	103fa21e 	bne	r2,zero,100012d8 <__alt_data_end+0xf80012d8>
        state[(i / 2) % 4][i / 8] = charsToHex(plainText[i], plainText[i + 1]);
        key[(i / 2) % 4][i / 8] = charsToHex(keyText[i], keyText[i + 1]);
    }

    aes(key, state);
10001450:	e0fff584 	addi	r3,fp,-42
10001454:	e0bff984 	addi	r2,fp,-26
10001458:	180b883a 	mov	r5,r3
1000145c:	1009883a 	mov	r4,r2
10001460:	0000e7c0 	call	10000e7c <aes>

    for (int row = 0; row < _NB; row++) {
10001464:	e03fe215 	stw	zero,-120(fp)
10001468:	00001906 	br	100014d0 <main+0x2c4>
        for (int col = 0; col < _NB; col++) {
1000146c:	e03fe315 	stw	zero,-116(fp)
10001470:	00001106 	br	100014b8 <main+0x2ac>
            printf("%02x", state[col][row]);
10001474:	e0bfe317 	ldw	r2,-116(fp)
10001478:	1085883a 	add	r2,r2,r2
1000147c:	1085883a 	add	r2,r2,r2
10001480:	e13fe104 	addi	r4,fp,-124
10001484:	2087883a 	add	r3,r4,r2
10001488:	e0bfe217 	ldw	r2,-120(fp)
1000148c:	1885883a 	add	r2,r3,r2
10001490:	10801484 	addi	r2,r2,82
10001494:	10800003 	ldbu	r2,0(r2)
10001498:	10803fcc 	andi	r2,r2,255
1000149c:	100b883a 	mov	r5,r2
100014a0:	01040074 	movhi	r4,4097
100014a4:	21065004 	addi	r4,r4,6464
100014a8:	000189c0 	call	1000189c <printf>
    }

    aes(key, state);

    for (int row = 0; row < _NB; row++) {
        for (int col = 0; col < _NB; col++) {
100014ac:	e0bfe317 	ldw	r2,-116(fp)
100014b0:	10800044 	addi	r2,r2,1
100014b4:	e0bfe315 	stw	r2,-116(fp)
100014b8:	e0bfe317 	ldw	r2,-116(fp)
100014bc:	10800110 	cmplti	r2,r2,4
100014c0:	103fec1e 	bne	r2,zero,10001474 <__alt_data_end+0xf8001474>
        key[(i / 2) % 4][i / 8] = charsToHex(keyText[i], keyText[i + 1]);
    }

    aes(key, state);

    for (int row = 0; row < _NB; row++) {
100014c4:	e0bfe217 	ldw	r2,-120(fp)
100014c8:	10800044 	addi	r2,r2,1
100014cc:	e0bfe215 	stw	r2,-120(fp)
100014d0:	e0bfe217 	ldw	r2,-120(fp)
100014d4:	10800110 	cmplti	r2,r2,4
100014d8:	103fe41e 	bne	r2,zero,1000146c <__alt_data_end+0xf800146c>
        for (int col = 0; col < _NB; col++) {
            printf("%02x", state[col][row]);
        }
    }
    printf("\n");
100014dc:	01000284 	movi	r4,10
100014e0:	00018e00 	call	100018e0 <putchar>

    sendMessage(state);
100014e4:	e0bff584 	addi	r2,fp,-42
100014e8:	1009883a 	mov	r4,r2
100014ec:	0000f540 	call	10000f54 <sendMessage>
    sendKey(key);
100014f0:	e0bff984 	addi	r2,fp,-26
100014f4:	1009883a 	mov	r4,r2
100014f8:	000107c0 	call	1000107c <sendKey>
    while(*to_sw_sig != 0);
100014fc:	0001883a 	nop
10001500:	00900034 	movhi	r2,16384
10001504:	10800c04 	addi	r2,r2,48
10001508:	10800003 	ldbu	r2,0(r2)
1000150c:	10803fcc 	andi	r2,r2,255
10001510:	103ffb1e 	bne	r2,zero,10001500 <__alt_data_end+0xf8001500>

    /* ----- DECRYPTION ----- */
	// t r i g g e r decryption
	*to_hw_sig = 3;
10001514:	00900034 	movhi	r2,16384
10001518:	10800404 	addi	r2,r2,16
1000151c:	00c000c4 	movi	r3,3
10001520:	10c00005 	stb	r3,0(r2)

	// wait until we get to get_from_aes
	while(*to_sw_sig != 2);
10001524:	0001883a 	nop
10001528:	00900034 	movhi	r2,16384
1000152c:	10800c04 	addi	r2,r2,48
10001530:	10800003 	ldbu	r2,0(r2)
10001534:	10803fcc 	andi	r2,r2,255
10001538:	10800098 	cmpnei	r2,r2,2
1000153c:	103ffa1e 	bne	r2,zero,10001528 <__alt_data_end+0xf8001528>

	// send back to wait or start reading
	// send a 2 to go back to wait, 1 to read decrypted message
	*to_hw_sig = 1;
10001540:	00900034 	movhi	r2,16384
10001544:	10800404 	addi	r2,r2,16
10001548:	00c00044 	movi	r3,1
1000154c:	10c00005 	stb	r3,0(r2)

	for(int i = 0; i < _NB; i++) {
10001550:	e03fe415 	stw	zero,-112(fp)
10001554:	00002006 	br	100015d8 <main+0x3cc>
		// wait until we get to send_back
		while(*to_sw_sig != 1);
10001558:	0001883a 	nop
1000155c:	00900034 	movhi	r2,16384
10001560:	10800c04 	addi	r2,r2,48
10001564:	10800003 	ldbu	r2,0(r2)
10001568:	10803fcc 	andi	r2,r2,255
1000156c:	10800058 	cmpnei	r2,r2,1
10001570:	103ffa1e 	bne	r2,zero,1000155c <__alt_data_end+0xf800155c>

		// read message into char buffer
		printParts();
10001574:	00011c40 	call	100011c4 <printParts>

		// tell hardware we are done reading
		*to_hw_sig = 2;
10001578:	00900034 	movhi	r2,16384
1000157c:	10800404 	addi	r2,r2,16
10001580:	00c00084 	movi	r3,2
10001584:	10c00005 	stb	r3,0(r2)

		// wait until hw acknowledges that i have finished reading
		while(*to_sw_sig != 0);
10001588:	0001883a 	nop
1000158c:	00900034 	movhi	r2,16384
10001590:	10800c04 	addi	r2,r2,48
10001594:	10800003 	ldbu	r2,0(r2)
10001598:	10803fcc 	andi	r2,r2,255
1000159c:	103ffb1e 	bne	r2,zero,1000158c <__alt_data_end+0xf800158c>

		// tell hw we are ready to read the next block
		if(i == _NB - 1) {
100015a0:	e0bfe417 	ldw	r2,-112(fp)
100015a4:	108000d8 	cmpnei	r2,r2,3
100015a8:	1000041e 	bne	r2,zero,100015bc <main+0x3b0>
			*to_hw_sig = 0;
100015ac:	00900034 	movhi	r2,16384
100015b0:	10800404 	addi	r2,r2,16
100015b4:	10000005 	stb	zero,0(r2)
100015b8:	00000406 	br	100015cc <main+0x3c0>
		} else {
			*to_hw_sig = 1;
100015bc:	00900034 	movhi	r2,16384
100015c0:	10800404 	addi	r2,r2,16
100015c4:	00c00044 	movi	r3,1
100015c8:	10c00005 	stb	r3,0(r2)

	// send back to wait or start reading
	// send a 2 to go back to wait, 1 to read decrypted message
	*to_hw_sig = 1;

	for(int i = 0; i < _NB; i++) {
100015cc:	e0bfe417 	ldw	r2,-112(fp)
100015d0:	10800044 	addi	r2,r2,1
100015d4:	e0bfe415 	stw	r2,-112(fp)
100015d8:	e0bfe417 	ldw	r2,-112(fp)
100015dc:	10800110 	cmplti	r2,r2,4
100015e0:	103fdd1e 	bne	r2,zero,10001558 <__alt_data_end+0xf8001558>
    //   printf("\n\n");
    //   printf("Decoded message:\n");

    //   // TODO: print decoded message
    // }
    return 0;
100015e4:	0005883a 	mov	r2,zero
}
100015e8:	e6fffe04 	addi	sp,fp,-8
100015ec:	dfc00317 	ldw	ra,12(sp)
100015f0:	df000217 	ldw	fp,8(sp)
100015f4:	dc400117 	ldw	r17,4(sp)
100015f8:	dc000017 	ldw	r16,0(sp)
100015fc:	dec00404 	addi	sp,sp,16
10001600:	f800283a 	ret

10001604 <__mulsi3>:
10001604:	0005883a 	mov	r2,zero
10001608:	20000726 	beq	r4,zero,10001628 <__mulsi3+0x24>
1000160c:	20c0004c 	andi	r3,r4,1
10001610:	2008d07a 	srli	r4,r4,1
10001614:	18000126 	beq	r3,zero,1000161c <__mulsi3+0x18>
10001618:	1145883a 	add	r2,r2,r5
1000161c:	294b883a 	add	r5,r5,r5
10001620:	203ffa1e 	bne	r4,zero,1000160c <__alt_data_end+0xf800160c>
10001624:	f800283a 	ret
10001628:	f800283a 	ret

1000162c <_getc_r>:
1000162c:	defffd04 	addi	sp,sp,-12
10001630:	dc000115 	stw	r16,4(sp)
10001634:	dfc00215 	stw	ra,8(sp)
10001638:	2021883a 	mov	r16,r4
1000163c:	20000226 	beq	r4,zero,10001648 <_getc_r+0x1c>
10001640:	20800e17 	ldw	r2,56(r4)
10001644:	10000c26 	beq	r2,zero,10001678 <_getc_r+0x4c>
10001648:	28800117 	ldw	r2,4(r5)
1000164c:	10bfffc4 	addi	r2,r2,-1
10001650:	28800115 	stw	r2,4(r5)
10001654:	10000c16 	blt	r2,zero,10001688 <_getc_r+0x5c>
10001658:	28800017 	ldw	r2,0(r5)
1000165c:	10c00044 	addi	r3,r2,1
10001660:	28c00015 	stw	r3,0(r5)
10001664:	10800003 	ldbu	r2,0(r2)
10001668:	dfc00217 	ldw	ra,8(sp)
1000166c:	dc000117 	ldw	r16,4(sp)
10001670:	dec00304 	addi	sp,sp,12
10001674:	f800283a 	ret
10001678:	d9400015 	stw	r5,0(sp)
1000167c:	0005d400 	call	10005d40 <__sinit>
10001680:	d9400017 	ldw	r5,0(sp)
10001684:	003ff006 	br	10001648 <__alt_data_end+0xf8001648>
10001688:	8009883a 	mov	r4,r16
1000168c:	dfc00217 	ldw	ra,8(sp)
10001690:	dc000117 	ldw	r16,4(sp)
10001694:	dec00304 	addi	sp,sp,12
10001698:	00018f81 	jmpi	100018f8 <__srget_r>

1000169c <getc>:
1000169c:	00840074 	movhi	r2,4097
100016a0:	defffd04 	addi	sp,sp,-12
100016a4:	108e0604 	addi	r2,r2,14360
100016a8:	dc400115 	stw	r17,4(sp)
100016ac:	14400017 	ldw	r17,0(r2)
100016b0:	dc000015 	stw	r16,0(sp)
100016b4:	dfc00215 	stw	ra,8(sp)
100016b8:	2021883a 	mov	r16,r4
100016bc:	88000226 	beq	r17,zero,100016c8 <getc+0x2c>
100016c0:	88800e17 	ldw	r2,56(r17)
100016c4:	10000d26 	beq	r2,zero,100016fc <getc+0x60>
100016c8:	80800117 	ldw	r2,4(r16)
100016cc:	10bfffc4 	addi	r2,r2,-1
100016d0:	80800115 	stw	r2,4(r16)
100016d4:	10000c16 	blt	r2,zero,10001708 <getc+0x6c>
100016d8:	80800017 	ldw	r2,0(r16)
100016dc:	10c00044 	addi	r3,r2,1
100016e0:	80c00015 	stw	r3,0(r16)
100016e4:	10800003 	ldbu	r2,0(r2)
100016e8:	dfc00217 	ldw	ra,8(sp)
100016ec:	dc400117 	ldw	r17,4(sp)
100016f0:	dc000017 	ldw	r16,0(sp)
100016f4:	dec00304 	addi	sp,sp,12
100016f8:	f800283a 	ret
100016fc:	8809883a 	mov	r4,r17
10001700:	0005d400 	call	10005d40 <__sinit>
10001704:	003ff006 	br	100016c8 <__alt_data_end+0xf80016c8>
10001708:	800b883a 	mov	r5,r16
1000170c:	8809883a 	mov	r4,r17
10001710:	dfc00217 	ldw	ra,8(sp)
10001714:	dc400117 	ldw	r17,4(sp)
10001718:	dc000017 	ldw	r16,0(sp)
1000171c:	dec00304 	addi	sp,sp,12
10001720:	00018f81 	jmpi	100018f8 <__srget_r>

10001724 <memcpy>:
10001724:	defffd04 	addi	sp,sp,-12
10001728:	dfc00215 	stw	ra,8(sp)
1000172c:	dc400115 	stw	r17,4(sp)
10001730:	dc000015 	stw	r16,0(sp)
10001734:	00c003c4 	movi	r3,15
10001738:	2005883a 	mov	r2,r4
1000173c:	1980452e 	bgeu	r3,r6,10001854 <memcpy+0x130>
10001740:	2906b03a 	or	r3,r5,r4
10001744:	18c000cc 	andi	r3,r3,3
10001748:	1800441e 	bne	r3,zero,1000185c <memcpy+0x138>
1000174c:	347ffc04 	addi	r17,r6,-16
10001750:	8822d13a 	srli	r17,r17,4
10001754:	28c00104 	addi	r3,r5,4
10001758:	23400104 	addi	r13,r4,4
1000175c:	8820913a 	slli	r16,r17,4
10001760:	2b000204 	addi	r12,r5,8
10001764:	22c00204 	addi	r11,r4,8
10001768:	84000504 	addi	r16,r16,20
1000176c:	2a800304 	addi	r10,r5,12
10001770:	22400304 	addi	r9,r4,12
10001774:	2c21883a 	add	r16,r5,r16
10001778:	2811883a 	mov	r8,r5
1000177c:	200f883a 	mov	r7,r4
10001780:	41000017 	ldw	r4,0(r8)
10001784:	1fc00017 	ldw	ra,0(r3)
10001788:	63c00017 	ldw	r15,0(r12)
1000178c:	39000015 	stw	r4,0(r7)
10001790:	53800017 	ldw	r14,0(r10)
10001794:	6fc00015 	stw	ra,0(r13)
10001798:	5bc00015 	stw	r15,0(r11)
1000179c:	4b800015 	stw	r14,0(r9)
100017a0:	18c00404 	addi	r3,r3,16
100017a4:	39c00404 	addi	r7,r7,16
100017a8:	42000404 	addi	r8,r8,16
100017ac:	6b400404 	addi	r13,r13,16
100017b0:	63000404 	addi	r12,r12,16
100017b4:	5ac00404 	addi	r11,r11,16
100017b8:	52800404 	addi	r10,r10,16
100017bc:	4a400404 	addi	r9,r9,16
100017c0:	1c3fef1e 	bne	r3,r16,10001780 <__alt_data_end+0xf8001780>
100017c4:	89c00044 	addi	r7,r17,1
100017c8:	380e913a 	slli	r7,r7,4
100017cc:	310003cc 	andi	r4,r6,15
100017d0:	02c000c4 	movi	r11,3
100017d4:	11c7883a 	add	r3,r2,r7
100017d8:	29cb883a 	add	r5,r5,r7
100017dc:	5900212e 	bgeu	r11,r4,10001864 <memcpy+0x140>
100017e0:	1813883a 	mov	r9,r3
100017e4:	2811883a 	mov	r8,r5
100017e8:	200f883a 	mov	r7,r4
100017ec:	42800017 	ldw	r10,0(r8)
100017f0:	4a400104 	addi	r9,r9,4
100017f4:	39ffff04 	addi	r7,r7,-4
100017f8:	4abfff15 	stw	r10,-4(r9)
100017fc:	42000104 	addi	r8,r8,4
10001800:	59fffa36 	bltu	r11,r7,100017ec <__alt_data_end+0xf80017ec>
10001804:	213fff04 	addi	r4,r4,-4
10001808:	2008d0ba 	srli	r4,r4,2
1000180c:	318000cc 	andi	r6,r6,3
10001810:	21000044 	addi	r4,r4,1
10001814:	2109883a 	add	r4,r4,r4
10001818:	2109883a 	add	r4,r4,r4
1000181c:	1907883a 	add	r3,r3,r4
10001820:	290b883a 	add	r5,r5,r4
10001824:	30000626 	beq	r6,zero,10001840 <memcpy+0x11c>
10001828:	198d883a 	add	r6,r3,r6
1000182c:	29c00003 	ldbu	r7,0(r5)
10001830:	18c00044 	addi	r3,r3,1
10001834:	29400044 	addi	r5,r5,1
10001838:	19ffffc5 	stb	r7,-1(r3)
1000183c:	19bffb1e 	bne	r3,r6,1000182c <__alt_data_end+0xf800182c>
10001840:	dfc00217 	ldw	ra,8(sp)
10001844:	dc400117 	ldw	r17,4(sp)
10001848:	dc000017 	ldw	r16,0(sp)
1000184c:	dec00304 	addi	sp,sp,12
10001850:	f800283a 	ret
10001854:	2007883a 	mov	r3,r4
10001858:	003ff206 	br	10001824 <__alt_data_end+0xf8001824>
1000185c:	2007883a 	mov	r3,r4
10001860:	003ff106 	br	10001828 <__alt_data_end+0xf8001828>
10001864:	200d883a 	mov	r6,r4
10001868:	003fee06 	br	10001824 <__alt_data_end+0xf8001824>

1000186c <_printf_r>:
1000186c:	defffd04 	addi	sp,sp,-12
10001870:	2805883a 	mov	r2,r5
10001874:	dfc00015 	stw	ra,0(sp)
10001878:	d9800115 	stw	r6,4(sp)
1000187c:	d9c00215 	stw	r7,8(sp)
10001880:	21400217 	ldw	r5,8(r4)
10001884:	d9c00104 	addi	r7,sp,4
10001888:	100d883a 	mov	r6,r2
1000188c:	00019800 	call	10001980 <___vfprintf_internal_r>
10001890:	dfc00017 	ldw	ra,0(sp)
10001894:	dec00304 	addi	sp,sp,12
10001898:	f800283a 	ret

1000189c <printf>:
1000189c:	defffc04 	addi	sp,sp,-16
100018a0:	dfc00015 	stw	ra,0(sp)
100018a4:	d9400115 	stw	r5,4(sp)
100018a8:	d9800215 	stw	r6,8(sp)
100018ac:	d9c00315 	stw	r7,12(sp)
100018b0:	00840074 	movhi	r2,4097
100018b4:	108e0604 	addi	r2,r2,14360
100018b8:	10800017 	ldw	r2,0(r2)
100018bc:	200b883a 	mov	r5,r4
100018c0:	d9800104 	addi	r6,sp,4
100018c4:	11000217 	ldw	r4,8(r2)
100018c8:	0003c5c0 	call	10003c5c <__vfprintf_internal>
100018cc:	dfc00017 	ldw	ra,0(sp)
100018d0:	dec00404 	addi	sp,sp,16
100018d4:	f800283a 	ret

100018d8 <_putchar_r>:
100018d8:	21800217 	ldw	r6,8(r4)
100018dc:	00080b41 	jmpi	100080b4 <_putc_r>

100018e0 <putchar>:
100018e0:	00840074 	movhi	r2,4097
100018e4:	108e0604 	addi	r2,r2,14360
100018e8:	200b883a 	mov	r5,r4
100018ec:	11000017 	ldw	r4,0(r2)
100018f0:	21800217 	ldw	r6,8(r4)
100018f4:	00080b41 	jmpi	100080b4 <_putc_r>

100018f8 <__srget_r>:
100018f8:	defffd04 	addi	sp,sp,-12
100018fc:	dc400115 	stw	r17,4(sp)
10001900:	dc000015 	stw	r16,0(sp)
10001904:	dfc00215 	stw	ra,8(sp)
10001908:	2023883a 	mov	r17,r4
1000190c:	2821883a 	mov	r16,r5
10001910:	20000226 	beq	r4,zero,1000191c <__srget_r+0x24>
10001914:	20800e17 	ldw	r2,56(r4)
10001918:	10001026 	beq	r2,zero,1000195c <__srget_r+0x64>
1000191c:	800b883a 	mov	r5,r16
10001920:	8809883a 	mov	r4,r17
10001924:	00082380 	call	10008238 <__srefill_r>
10001928:	10000e1e 	bne	r2,zero,10001964 <__srget_r+0x6c>
1000192c:	80c00017 	ldw	r3,0(r16)
10001930:	80800117 	ldw	r2,4(r16)
10001934:	19000044 	addi	r4,r3,1
10001938:	10bfffc4 	addi	r2,r2,-1
1000193c:	80800115 	stw	r2,4(r16)
10001940:	81000015 	stw	r4,0(r16)
10001944:	18800003 	ldbu	r2,0(r3)
10001948:	dfc00217 	ldw	ra,8(sp)
1000194c:	dc400117 	ldw	r17,4(sp)
10001950:	dc000017 	ldw	r16,0(sp)
10001954:	dec00304 	addi	sp,sp,12
10001958:	f800283a 	ret
1000195c:	0005d400 	call	10005d40 <__sinit>
10001960:	003fee06 	br	1000191c <__alt_data_end+0xf800191c>
10001964:	00bfffc4 	movi	r2,-1
10001968:	003ff706 	br	10001948 <__alt_data_end+0xf8001948>

1000196c <__srget>:
1000196c:	00840074 	movhi	r2,4097
10001970:	108e0604 	addi	r2,r2,14360
10001974:	200b883a 	mov	r5,r4
10001978:	11000017 	ldw	r4,0(r2)
1000197c:	00018f81 	jmpi	100018f8 <__srget_r>

10001980 <___vfprintf_internal_r>:
10001980:	deffb804 	addi	sp,sp,-288
10001984:	dfc04715 	stw	ra,284(sp)
10001988:	ddc04515 	stw	r23,276(sp)
1000198c:	dd404315 	stw	r21,268(sp)
10001990:	d9002d15 	stw	r4,180(sp)
10001994:	282f883a 	mov	r23,r5
10001998:	302b883a 	mov	r21,r6
1000199c:	d9c02e15 	stw	r7,184(sp)
100019a0:	df004615 	stw	fp,280(sp)
100019a4:	dd804415 	stw	r22,272(sp)
100019a8:	dd004215 	stw	r20,264(sp)
100019ac:	dcc04115 	stw	r19,260(sp)
100019b0:	dc804015 	stw	r18,256(sp)
100019b4:	dc403f15 	stw	r17,252(sp)
100019b8:	dc003e15 	stw	r16,248(sp)
100019bc:	00063f80 	call	100063f8 <_localeconv_r>
100019c0:	10800017 	ldw	r2,0(r2)
100019c4:	1009883a 	mov	r4,r2
100019c8:	d8803415 	stw	r2,208(sp)
100019cc:	00086ec0 	call	100086ec <strlen>
100019d0:	d8803715 	stw	r2,220(sp)
100019d4:	d8802d17 	ldw	r2,180(sp)
100019d8:	10000226 	beq	r2,zero,100019e4 <___vfprintf_internal_r+0x64>
100019dc:	10800e17 	ldw	r2,56(r2)
100019e0:	1000fb26 	beq	r2,zero,10001dd0 <___vfprintf_internal_r+0x450>
100019e4:	b880030b 	ldhu	r2,12(r23)
100019e8:	10c8000c 	andi	r3,r2,8192
100019ec:	1800061e 	bne	r3,zero,10001a08 <___vfprintf_internal_r+0x88>
100019f0:	b9001917 	ldw	r4,100(r23)
100019f4:	00f7ffc4 	movi	r3,-8193
100019f8:	10880014 	ori	r2,r2,8192
100019fc:	20c6703a 	and	r3,r4,r3
10001a00:	b880030d 	sth	r2,12(r23)
10001a04:	b8c01915 	stw	r3,100(r23)
10001a08:	10c0020c 	andi	r3,r2,8
10001a0c:	1800c326 	beq	r3,zero,10001d1c <___vfprintf_internal_r+0x39c>
10001a10:	b8c00417 	ldw	r3,16(r23)
10001a14:	1800c126 	beq	r3,zero,10001d1c <___vfprintf_internal_r+0x39c>
10001a18:	1080068c 	andi	r2,r2,26
10001a1c:	00c00284 	movi	r3,10
10001a20:	10c0c626 	beq	r2,r3,10001d3c <___vfprintf_internal_r+0x3bc>
10001a24:	d8c00404 	addi	r3,sp,16
10001a28:	05040074 	movhi	r20,4097
10001a2c:	d9001e04 	addi	r4,sp,120
10001a30:	a5066c84 	addi	r20,r20,6578
10001a34:	d8c01e15 	stw	r3,120(sp)
10001a38:	d8002015 	stw	zero,128(sp)
10001a3c:	d8001f15 	stw	zero,124(sp)
10001a40:	d8003315 	stw	zero,204(sp)
10001a44:	d8003615 	stw	zero,216(sp)
10001a48:	d8003815 	stw	zero,224(sp)
10001a4c:	1811883a 	mov	r8,r3
10001a50:	d8003915 	stw	zero,228(sp)
10001a54:	d8003a15 	stw	zero,232(sp)
10001a58:	d8002f15 	stw	zero,188(sp)
10001a5c:	d9002815 	stw	r4,160(sp)
10001a60:	a8800007 	ldb	r2,0(r21)
10001a64:	10028b26 	beq	r2,zero,10002494 <___vfprintf_internal_r+0xb14>
10001a68:	00c00944 	movi	r3,37
10001a6c:	a823883a 	mov	r17,r21
10001a70:	10c0021e 	bne	r2,r3,10001a7c <___vfprintf_internal_r+0xfc>
10001a74:	00001406 	br	10001ac8 <___vfprintf_internal_r+0x148>
10001a78:	10c00326 	beq	r2,r3,10001a88 <___vfprintf_internal_r+0x108>
10001a7c:	8c400044 	addi	r17,r17,1
10001a80:	88800007 	ldb	r2,0(r17)
10001a84:	103ffc1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10001a88:	8d61c83a 	sub	r16,r17,r21
10001a8c:	80000e26 	beq	r16,zero,10001ac8 <___vfprintf_internal_r+0x148>
10001a90:	d8c02017 	ldw	r3,128(sp)
10001a94:	d8801f17 	ldw	r2,124(sp)
10001a98:	45400015 	stw	r21,0(r8)
10001a9c:	1c07883a 	add	r3,r3,r16
10001aa0:	10800044 	addi	r2,r2,1
10001aa4:	d8c02015 	stw	r3,128(sp)
10001aa8:	44000115 	stw	r16,4(r8)
10001aac:	d8801f15 	stw	r2,124(sp)
10001ab0:	00c001c4 	movi	r3,7
10001ab4:	1880a916 	blt	r3,r2,10001d5c <___vfprintf_internal_r+0x3dc>
10001ab8:	42000204 	addi	r8,r8,8
10001abc:	d9402f17 	ldw	r5,188(sp)
10001ac0:	2c0b883a 	add	r5,r5,r16
10001ac4:	d9402f15 	stw	r5,188(sp)
10001ac8:	88800007 	ldb	r2,0(r17)
10001acc:	1000aa26 	beq	r2,zero,10001d78 <___vfprintf_internal_r+0x3f8>
10001ad0:	8d400044 	addi	r21,r17,1
10001ad4:	8c400047 	ldb	r17,1(r17)
10001ad8:	0021883a 	mov	r16,zero
10001adc:	00bfffc4 	movi	r2,-1
10001ae0:	0025883a 	mov	r18,zero
10001ae4:	dc002905 	stb	r16,164(sp)
10001ae8:	d8002785 	stb	zero,158(sp)
10001aec:	d8002b05 	stb	zero,172(sp)
10001af0:	d8802a15 	stw	r2,168(sp)
10001af4:	d8003115 	stw	zero,196(sp)
10001af8:	04c01604 	movi	r19,88
10001afc:	05800244 	movi	r22,9
10001b00:	9021883a 	mov	r16,r18
10001b04:	4039883a 	mov	fp,r8
10001b08:	ad400044 	addi	r21,r21,1
10001b0c:	88bff804 	addi	r2,r17,-32
10001b10:	98833236 	bltu	r19,r2,100027dc <___vfprintf_internal_r+0xe5c>
10001b14:	100490ba 	slli	r2,r2,2
10001b18:	00c40034 	movhi	r3,4096
10001b1c:	18c6cb04 	addi	r3,r3,6956
10001b20:	10c5883a 	add	r2,r2,r3
10001b24:	10800017 	ldw	r2,0(r2)
10001b28:	1000683a 	jmp	r2
10001b2c:	100026d4 	ori	zero,r2,155
10001b30:	100027dc 	xori	zero,r2,159
10001b34:	100027dc 	xori	zero,r2,159
10001b38:	100026f4 	orhi	zero,r2,155
10001b3c:	100027dc 	xori	zero,r2,159
10001b40:	100027dc 	xori	zero,r2,159
10001b44:	100027dc 	xori	zero,r2,159
10001b48:	100027dc 	xori	zero,r2,159
10001b4c:	100027dc 	xori	zero,r2,159
10001b50:	100027dc 	xori	zero,r2,159
10001b54:	10001ddc 	xori	zero,r2,119
10001b58:	100025e4 	muli	zero,r2,151
10001b5c:	100027dc 	xori	zero,r2,159
10001b60:	10001ca0 	cmpeqi	zero,r2,114
10001b64:	10001e00 	call	110001e0 <_gp+0xfe49cc>
10001b68:	100027dc 	xori	zero,r2,159
10001b6c:	10001e50 	cmplti	zero,r2,121
10001b70:	10001e5c 	xori	zero,r2,121
10001b74:	10001e5c 	xori	zero,r2,121
10001b78:	10001e5c 	xori	zero,r2,121
10001b7c:	10001e5c 	xori	zero,r2,121
10001b80:	10001e5c 	xori	zero,r2,121
10001b84:	10001e5c 	xori	zero,r2,121
10001b88:	10001e5c 	xori	zero,r2,121
10001b8c:	10001e5c 	xori	zero,r2,121
10001b90:	10001e5c 	xori	zero,r2,121
10001b94:	100027dc 	xori	zero,r2,159
10001b98:	100027dc 	xori	zero,r2,159
10001b9c:	100027dc 	xori	zero,r2,159
10001ba0:	100027dc 	xori	zero,r2,159
10001ba4:	100027dc 	xori	zero,r2,159
10001ba8:	100027dc 	xori	zero,r2,159
10001bac:	100027dc 	xori	zero,r2,159
10001bb0:	100027dc 	xori	zero,r2,159
10001bb4:	100027dc 	xori	zero,r2,159
10001bb8:	100027dc 	xori	zero,r2,159
10001bbc:	10001e98 	cmpnei	zero,r2,122
10001bc0:	10001f60 	cmpeqi	zero,r2,125
10001bc4:	100027dc 	xori	zero,r2,159
10001bc8:	10001f60 	cmpeqi	zero,r2,125
10001bcc:	100027dc 	xori	zero,r2,159
10001bd0:	100027dc 	xori	zero,r2,159
10001bd4:	100027dc 	xori	zero,r2,159
10001bd8:	100027dc 	xori	zero,r2,159
10001bdc:	1000200c 	andi	zero,r2,128
10001be0:	100027dc 	xori	zero,r2,159
10001be4:	100027dc 	xori	zero,r2,159
10001be8:	10002018 	cmpnei	zero,r2,128
10001bec:	100027dc 	xori	zero,r2,159
10001bf0:	100027dc 	xori	zero,r2,159
10001bf4:	100027dc 	xori	zero,r2,159
10001bf8:	100027dc 	xori	zero,r2,159
10001bfc:	100027dc 	xori	zero,r2,159
10001c00:	1000249c 	xori	zero,r2,146
10001c04:	100027dc 	xori	zero,r2,159
10001c08:	100027dc 	xori	zero,r2,159
10001c0c:	10002508 	cmpgei	zero,r2,148
10001c10:	100027dc 	xori	zero,r2,159
10001c14:	100027dc 	xori	zero,r2,159
10001c18:	100027dc 	xori	zero,r2,159
10001c1c:	100027dc 	xori	zero,r2,159
10001c20:	100027dc 	xori	zero,r2,159
10001c24:	100027dc 	xori	zero,r2,159
10001c28:	100027dc 	xori	zero,r2,159
10001c2c:	100027dc 	xori	zero,r2,159
10001c30:	100027dc 	xori	zero,r2,159
10001c34:	100027dc 	xori	zero,r2,159
10001c38:	10002780 	call	11000278 <_gp+0xfe4a64>
10001c3c:	10002700 	call	11000270 <_gp+0xfe4a5c>
10001c40:	10001f60 	cmpeqi	zero,r2,125
10001c44:	10001f60 	cmpeqi	zero,r2,125
10001c48:	10001f60 	cmpeqi	zero,r2,125
10001c4c:	10002720 	cmpeqi	zero,r2,156
10001c50:	10002700 	call	11000270 <_gp+0xfe4a5c>
10001c54:	100027dc 	xori	zero,r2,159
10001c58:	100027dc 	xori	zero,r2,159
10001c5c:	1000272c 	andhi	zero,r2,156
10001c60:	100027dc 	xori	zero,r2,159
10001c64:	10002740 	call	11000274 <_gp+0xfe4a60>
10001c68:	100025c4 	addi	zero,r2,151
10001c6c:	10001cac 	andhi	zero,r2,114
10001c70:	100025fc 	xorhi	zero,r2,151
10001c74:	100027dc 	xori	zero,r2,159
10001c78:	10002608 	cmpgei	zero,r2,152
10001c7c:	100027dc 	xori	zero,r2,159
10001c80:	1000266c 	andhi	zero,r2,153
10001c84:	100027dc 	xori	zero,r2,159
10001c88:	100027dc 	xori	zero,r2,159
10001c8c:	1000268c 	andi	zero,r2,154
10001c90:	d8c03117 	ldw	r3,196(sp)
10001c94:	d8802e15 	stw	r2,184(sp)
10001c98:	00c7c83a 	sub	r3,zero,r3
10001c9c:	d8c03115 	stw	r3,196(sp)
10001ca0:	84000114 	ori	r16,r16,4
10001ca4:	ac400007 	ldb	r17,0(r21)
10001ca8:	003f9706 	br	10001b08 <__alt_data_end+0xf8001b08>
10001cac:	00800c04 	movi	r2,48
10001cb0:	d8802705 	stb	r2,156(sp)
10001cb4:	00801e04 	movi	r2,120
10001cb8:	d8802745 	stb	r2,157(sp)
10001cbc:	d9002a17 	ldw	r4,168(sp)
10001cc0:	d8802e17 	ldw	r2,184(sp)
10001cc4:	d8002785 	stb	zero,158(sp)
10001cc8:	e011883a 	mov	r8,fp
10001ccc:	10c00104 	addi	r3,r2,4
10001cd0:	14c00017 	ldw	r19,0(r2)
10001cd4:	002d883a 	mov	r22,zero
10001cd8:	80800094 	ori	r2,r16,2
10001cdc:	2002ca16 	blt	r4,zero,10002808 <___vfprintf_internal_r+0xe88>
10001ce0:	00bfdfc4 	movi	r2,-129
10001ce4:	80a4703a 	and	r18,r16,r2
10001ce8:	d8c02e15 	stw	r3,184(sp)
10001cec:	94800094 	ori	r18,r18,2
10001cf0:	9802b41e 	bne	r19,zero,100027c4 <___vfprintf_internal_r+0xe44>
10001cf4:	01440074 	movhi	r5,4097
10001cf8:	29466504 	addi	r5,r5,6548
10001cfc:	d9403915 	stw	r5,228(sp)
10001d00:	04401e04 	movi	r17,120
10001d04:	d8802a17 	ldw	r2,168(sp)
10001d08:	0039883a 	mov	fp,zero
10001d0c:	1001fa26 	beq	r2,zero,100024f8 <___vfprintf_internal_r+0xb78>
10001d10:	0027883a 	mov	r19,zero
10001d14:	002d883a 	mov	r22,zero
10001d18:	00021906 	br	10002580 <___vfprintf_internal_r+0xc00>
10001d1c:	d9002d17 	ldw	r4,180(sp)
10001d20:	b80b883a 	mov	r5,r23
10001d24:	0003d340 	call	10003d34 <__swsetup_r>
10001d28:	1005dc1e 	bne	r2,zero,1000349c <___vfprintf_internal_r+0x1b1c>
10001d2c:	b880030b 	ldhu	r2,12(r23)
10001d30:	00c00284 	movi	r3,10
10001d34:	1080068c 	andi	r2,r2,26
10001d38:	10ff3a1e 	bne	r2,r3,10001a24 <__alt_data_end+0xf8001a24>
10001d3c:	b880038f 	ldh	r2,14(r23)
10001d40:	103f3816 	blt	r2,zero,10001a24 <__alt_data_end+0xf8001a24>
10001d44:	d9c02e17 	ldw	r7,184(sp)
10001d48:	d9002d17 	ldw	r4,180(sp)
10001d4c:	a80d883a 	mov	r6,r21
10001d50:	b80b883a 	mov	r5,r23
10001d54:	0003c780 	call	10003c78 <__sbprintf>
10001d58:	00001106 	br	10001da0 <___vfprintf_internal_r+0x420>
10001d5c:	d9002d17 	ldw	r4,180(sp)
10001d60:	d9801e04 	addi	r6,sp,120
10001d64:	b80b883a 	mov	r5,r23
10001d68:	00088800 	call	10008880 <__sprint_r>
10001d6c:	1000081e 	bne	r2,zero,10001d90 <___vfprintf_internal_r+0x410>
10001d70:	da000404 	addi	r8,sp,16
10001d74:	003f5106 	br	10001abc <__alt_data_end+0xf8001abc>
10001d78:	d8802017 	ldw	r2,128(sp)
10001d7c:	10000426 	beq	r2,zero,10001d90 <___vfprintf_internal_r+0x410>
10001d80:	d9002d17 	ldw	r4,180(sp)
10001d84:	d9801e04 	addi	r6,sp,120
10001d88:	b80b883a 	mov	r5,r23
10001d8c:	00088800 	call	10008880 <__sprint_r>
10001d90:	b880030b 	ldhu	r2,12(r23)
10001d94:	1080100c 	andi	r2,r2,64
10001d98:	1005c01e 	bne	r2,zero,1000349c <___vfprintf_internal_r+0x1b1c>
10001d9c:	d8802f17 	ldw	r2,188(sp)
10001da0:	dfc04717 	ldw	ra,284(sp)
10001da4:	df004617 	ldw	fp,280(sp)
10001da8:	ddc04517 	ldw	r23,276(sp)
10001dac:	dd804417 	ldw	r22,272(sp)
10001db0:	dd404317 	ldw	r21,268(sp)
10001db4:	dd004217 	ldw	r20,264(sp)
10001db8:	dcc04117 	ldw	r19,260(sp)
10001dbc:	dc804017 	ldw	r18,256(sp)
10001dc0:	dc403f17 	ldw	r17,252(sp)
10001dc4:	dc003e17 	ldw	r16,248(sp)
10001dc8:	dec04804 	addi	sp,sp,288
10001dcc:	f800283a 	ret
10001dd0:	d9002d17 	ldw	r4,180(sp)
10001dd4:	0005d400 	call	10005d40 <__sinit>
10001dd8:	003f0206 	br	100019e4 <__alt_data_end+0xf80019e4>
10001ddc:	d9002e17 	ldw	r4,184(sp)
10001de0:	d9402e17 	ldw	r5,184(sp)
10001de4:	21000017 	ldw	r4,0(r4)
10001de8:	28800104 	addi	r2,r5,4
10001dec:	d9003115 	stw	r4,196(sp)
10001df0:	203fa716 	blt	r4,zero,10001c90 <__alt_data_end+0xf8001c90>
10001df4:	d8802e15 	stw	r2,184(sp)
10001df8:	ac400007 	ldb	r17,0(r21)
10001dfc:	003f4206 	br	10001b08 <__alt_data_end+0xf8001b08>
10001e00:	ac400007 	ldb	r17,0(r21)
10001e04:	01000a84 	movi	r4,42
10001e08:	a8c00044 	addi	r3,r21,1
10001e0c:	89075826 	beq	r17,r4,10003b70 <___vfprintf_internal_r+0x21f0>
10001e10:	8cbff404 	addi	r18,r17,-48
10001e14:	b486ae36 	bltu	r22,r18,100038d0 <___vfprintf_internal_r+0x1f50>
10001e18:	0009883a 	mov	r4,zero
10001e1c:	1823883a 	mov	r17,r3
10001e20:	01400284 	movi	r5,10
10001e24:	00016040 	call	10001604 <__mulsi3>
10001e28:	88c00007 	ldb	r3,0(r17)
10001e2c:	1489883a 	add	r4,r2,r18
10001e30:	8d400044 	addi	r21,r17,1
10001e34:	1cbff404 	addi	r18,r3,-48
10001e38:	a823883a 	mov	r17,r21
10001e3c:	b4bff82e 	bgeu	r22,r18,10001e20 <__alt_data_end+0xf8001e20>
10001e40:	1823883a 	mov	r17,r3
10001e44:	2005f616 	blt	r4,zero,10003620 <___vfprintf_internal_r+0x1ca0>
10001e48:	d9002a15 	stw	r4,168(sp)
10001e4c:	003f2f06 	br	10001b0c <__alt_data_end+0xf8001b0c>
10001e50:	84002014 	ori	r16,r16,128
10001e54:	ac400007 	ldb	r17,0(r21)
10001e58:	003f2b06 	br	10001b08 <__alt_data_end+0xf8001b08>
10001e5c:	8cbff404 	addi	r18,r17,-48
10001e60:	d8003115 	stw	zero,196(sp)
10001e64:	0009883a 	mov	r4,zero
10001e68:	a823883a 	mov	r17,r21
10001e6c:	01400284 	movi	r5,10
10001e70:	00016040 	call	10001604 <__mulsi3>
10001e74:	88c00007 	ldb	r3,0(r17)
10001e78:	9089883a 	add	r4,r18,r2
10001e7c:	ad400044 	addi	r21,r21,1
10001e80:	1cbff404 	addi	r18,r3,-48
10001e84:	a823883a 	mov	r17,r21
10001e88:	b4bff82e 	bgeu	r22,r18,10001e6c <__alt_data_end+0xf8001e6c>
10001e8c:	1823883a 	mov	r17,r3
10001e90:	d9003115 	stw	r4,196(sp)
10001e94:	003f1d06 	br	10001b0c <__alt_data_end+0xf8001b0c>
10001e98:	8025883a 	mov	r18,r16
10001e9c:	dc002903 	ldbu	r16,164(sp)
10001ea0:	e011883a 	mov	r8,fp
10001ea4:	84003fcc 	andi	r16,r16,255
10001ea8:	8007531e 	bne	r16,zero,10003bf8 <___vfprintf_internal_r+0x2278>
10001eac:	94800414 	ori	r18,r18,16
10001eb0:	9080080c 	andi	r2,r18,32
10001eb4:	1003a326 	beq	r2,zero,10002d44 <___vfprintf_internal_r+0x13c4>
10001eb8:	d9002e17 	ldw	r4,184(sp)
10001ebc:	20800117 	ldw	r2,4(r4)
10001ec0:	24c00017 	ldw	r19,0(r4)
10001ec4:	21000204 	addi	r4,r4,8
10001ec8:	d9002e15 	stw	r4,184(sp)
10001ecc:	102d883a 	mov	r22,r2
10001ed0:	10047316 	blt	r2,zero,100030a0 <___vfprintf_internal_r+0x1720>
10001ed4:	d9002a17 	ldw	r4,168(sp)
10001ed8:	df002783 	ldbu	fp,158(sp)
10001edc:	2003e416 	blt	r4,zero,10002e70 <___vfprintf_internal_r+0x14f0>
10001ee0:	00ffdfc4 	movi	r3,-129
10001ee4:	9d84b03a 	or	r2,r19,r22
10001ee8:	90e4703a 	and	r18,r18,r3
10001eec:	10018026 	beq	r2,zero,100024f0 <___vfprintf_internal_r+0xb70>
10001ef0:	b003ab26 	beq	r22,zero,10002da0 <___vfprintf_internal_r+0x1420>
10001ef4:	dc402915 	stw	r17,164(sp)
10001ef8:	dc001e04 	addi	r16,sp,120
10001efc:	b023883a 	mov	r17,r22
10001f00:	402d883a 	mov	r22,r8
10001f04:	9809883a 	mov	r4,r19
10001f08:	880b883a 	mov	r5,r17
10001f0c:	01800284 	movi	r6,10
10001f10:	000f883a 	mov	r7,zero
10001f14:	000b94c0 	call	1000b94c <__umoddi3>
10001f18:	10800c04 	addi	r2,r2,48
10001f1c:	843fffc4 	addi	r16,r16,-1
10001f20:	9809883a 	mov	r4,r19
10001f24:	880b883a 	mov	r5,r17
10001f28:	80800005 	stb	r2,0(r16)
10001f2c:	01800284 	movi	r6,10
10001f30:	000f883a 	mov	r7,zero
10001f34:	000b3500 	call	1000b350 <__udivdi3>
10001f38:	1027883a 	mov	r19,r2
10001f3c:	10c4b03a 	or	r2,r2,r3
10001f40:	1823883a 	mov	r17,r3
10001f44:	103fef1e 	bne	r2,zero,10001f04 <__alt_data_end+0xf8001f04>
10001f48:	d8c02817 	ldw	r3,160(sp)
10001f4c:	dc402917 	ldw	r17,164(sp)
10001f50:	b011883a 	mov	r8,r22
10001f54:	1c07c83a 	sub	r3,r3,r16
10001f58:	d8c02b15 	stw	r3,172(sp)
10001f5c:	00005f06 	br	100020dc <___vfprintf_internal_r+0x75c>
10001f60:	8025883a 	mov	r18,r16
10001f64:	dc002903 	ldbu	r16,164(sp)
10001f68:	e011883a 	mov	r8,fp
10001f6c:	84003fcc 	andi	r16,r16,255
10001f70:	80071e1e 	bne	r16,zero,10003bec <___vfprintf_internal_r+0x226c>
10001f74:	9080020c 	andi	r2,r18,8
10001f78:	1004af26 	beq	r2,zero,10003238 <___vfprintf_internal_r+0x18b8>
10001f7c:	d9002e17 	ldw	r4,184(sp)
10001f80:	d9402e17 	ldw	r5,184(sp)
10001f84:	d8802e17 	ldw	r2,184(sp)
10001f88:	21000017 	ldw	r4,0(r4)
10001f8c:	29400117 	ldw	r5,4(r5)
10001f90:	10800204 	addi	r2,r2,8
10001f94:	d9003615 	stw	r4,216(sp)
10001f98:	d9403815 	stw	r5,224(sp)
10001f9c:	d8802e15 	stw	r2,184(sp)
10001fa0:	d9003617 	ldw	r4,216(sp)
10001fa4:	d9403817 	ldw	r5,224(sp)
10001fa8:	da003d15 	stw	r8,244(sp)
10001fac:	04000044 	movi	r16,1
10001fb0:	000840c0 	call	1000840c <__fpclassifyd>
10001fb4:	da003d17 	ldw	r8,244(sp)
10001fb8:	1404441e 	bne	r2,r16,100030cc <___vfprintf_internal_r+0x174c>
10001fbc:	d9003617 	ldw	r4,216(sp)
10001fc0:	d9403817 	ldw	r5,224(sp)
10001fc4:	000d883a 	mov	r6,zero
10001fc8:	000f883a 	mov	r7,zero
10001fcc:	000d4a40 	call	1000d4a4 <__ledf2>
10001fd0:	da003d17 	ldw	r8,244(sp)
10001fd4:	1005e316 	blt	r2,zero,10003764 <___vfprintf_internal_r+0x1de4>
10001fd8:	df002783 	ldbu	fp,158(sp)
10001fdc:	008011c4 	movi	r2,71
10001fe0:	1445580e 	bge	r2,r17,10003544 <___vfprintf_internal_r+0x1bc4>
10001fe4:	04040074 	movhi	r16,4097
10001fe8:	84065d04 	addi	r16,r16,6516
10001fec:	00c000c4 	movi	r3,3
10001ff0:	00bfdfc4 	movi	r2,-129
10001ff4:	d8c02915 	stw	r3,164(sp)
10001ff8:	90a4703a 	and	r18,r18,r2
10001ffc:	d8c02b15 	stw	r3,172(sp)
10002000:	d8002a15 	stw	zero,168(sp)
10002004:	d8003215 	stw	zero,200(sp)
10002008:	00003a06 	br	100020f4 <___vfprintf_internal_r+0x774>
1000200c:	84000214 	ori	r16,r16,8
10002010:	ac400007 	ldb	r17,0(r21)
10002014:	003ebc06 	br	10001b08 <__alt_data_end+0xf8001b08>
10002018:	8025883a 	mov	r18,r16
1000201c:	dc002903 	ldbu	r16,164(sp)
10002020:	e011883a 	mov	r8,fp
10002024:	84003fcc 	andi	r16,r16,255
10002028:	8007001e 	bne	r16,zero,10003c2c <___vfprintf_internal_r+0x22ac>
1000202c:	94800414 	ori	r18,r18,16
10002030:	9080080c 	andi	r2,r18,32
10002034:	1002fa26 	beq	r2,zero,10002c20 <___vfprintf_internal_r+0x12a0>
10002038:	d9002e17 	ldw	r4,184(sp)
1000203c:	d9402a17 	ldw	r5,168(sp)
10002040:	d8002785 	stb	zero,158(sp)
10002044:	20800204 	addi	r2,r4,8
10002048:	24c00017 	ldw	r19,0(r4)
1000204c:	25800117 	ldw	r22,4(r4)
10002050:	2804b116 	blt	r5,zero,10003318 <___vfprintf_internal_r+0x1998>
10002054:	013fdfc4 	movi	r4,-129
10002058:	9d86b03a 	or	r3,r19,r22
1000205c:	d8802e15 	stw	r2,184(sp)
10002060:	9124703a 	and	r18,r18,r4
10002064:	1802fb1e 	bne	r3,zero,10002c54 <___vfprintf_internal_r+0x12d4>
10002068:	d8c02a17 	ldw	r3,168(sp)
1000206c:	0039883a 	mov	fp,zero
10002070:	1805e526 	beq	r3,zero,10003808 <___vfprintf_internal_r+0x1e88>
10002074:	0027883a 	mov	r19,zero
10002078:	002d883a 	mov	r22,zero
1000207c:	dc001e04 	addi	r16,sp,120
10002080:	9806d0fa 	srli	r3,r19,3
10002084:	b008977a 	slli	r4,r22,29
10002088:	b02cd0fa 	srli	r22,r22,3
1000208c:	9cc001cc 	andi	r19,r19,7
10002090:	98800c04 	addi	r2,r19,48
10002094:	843fffc4 	addi	r16,r16,-1
10002098:	20e6b03a 	or	r19,r4,r3
1000209c:	80800005 	stb	r2,0(r16)
100020a0:	9d86b03a 	or	r3,r19,r22
100020a4:	183ff61e 	bne	r3,zero,10002080 <__alt_data_end+0xf8002080>
100020a8:	90c0004c 	andi	r3,r18,1
100020ac:	18014126 	beq	r3,zero,100025b4 <___vfprintf_internal_r+0xc34>
100020b0:	10803fcc 	andi	r2,r2,255
100020b4:	1080201c 	xori	r2,r2,128
100020b8:	10bfe004 	addi	r2,r2,-128
100020bc:	00c00c04 	movi	r3,48
100020c0:	10c13c26 	beq	r2,r3,100025b4 <___vfprintf_internal_r+0xc34>
100020c4:	80ffffc5 	stb	r3,-1(r16)
100020c8:	d8c02817 	ldw	r3,160(sp)
100020cc:	80bfffc4 	addi	r2,r16,-1
100020d0:	1021883a 	mov	r16,r2
100020d4:	1887c83a 	sub	r3,r3,r2
100020d8:	d8c02b15 	stw	r3,172(sp)
100020dc:	d8802b17 	ldw	r2,172(sp)
100020e0:	d9002a17 	ldw	r4,168(sp)
100020e4:	1100010e 	bge	r2,r4,100020ec <___vfprintf_internal_r+0x76c>
100020e8:	2005883a 	mov	r2,r4
100020ec:	d8802915 	stw	r2,164(sp)
100020f0:	d8003215 	stw	zero,200(sp)
100020f4:	e7003fcc 	andi	fp,fp,255
100020f8:	e700201c 	xori	fp,fp,128
100020fc:	e73fe004 	addi	fp,fp,-128
10002100:	e0000326 	beq	fp,zero,10002110 <___vfprintf_internal_r+0x790>
10002104:	d8c02917 	ldw	r3,164(sp)
10002108:	18c00044 	addi	r3,r3,1
1000210c:	d8c02915 	stw	r3,164(sp)
10002110:	90c0008c 	andi	r3,r18,2
10002114:	d8c02c15 	stw	r3,176(sp)
10002118:	18000326 	beq	r3,zero,10002128 <___vfprintf_internal_r+0x7a8>
1000211c:	d8c02917 	ldw	r3,164(sp)
10002120:	18c00084 	addi	r3,r3,2
10002124:	d8c02915 	stw	r3,164(sp)
10002128:	90c0210c 	andi	r3,r18,132
1000212c:	d8c03015 	stw	r3,192(sp)
10002130:	1801c51e 	bne	r3,zero,10002848 <___vfprintf_internal_r+0xec8>
10002134:	d9003117 	ldw	r4,196(sp)
10002138:	d8c02917 	ldw	r3,164(sp)
1000213c:	20e7c83a 	sub	r19,r4,r3
10002140:	04c1c10e 	bge	zero,r19,10002848 <___vfprintf_internal_r+0xec8>
10002144:	02400404 	movi	r9,16
10002148:	d8c02017 	ldw	r3,128(sp)
1000214c:	d8801f17 	ldw	r2,124(sp)
10002150:	4cc52f0e 	bge	r9,r19,10003610 <___vfprintf_internal_r+0x1c90>
10002154:	01440074 	movhi	r5,4097
10002158:	29467084 	addi	r5,r5,6594
1000215c:	dc403b15 	stw	r17,236(sp)
10002160:	d9403515 	stw	r5,212(sp)
10002164:	9823883a 	mov	r17,r19
10002168:	482d883a 	mov	r22,r9
1000216c:	9027883a 	mov	r19,r18
10002170:	070001c4 	movi	fp,7
10002174:	8025883a 	mov	r18,r16
10002178:	dc002d17 	ldw	r16,180(sp)
1000217c:	00000306 	br	1000218c <___vfprintf_internal_r+0x80c>
10002180:	8c7ffc04 	addi	r17,r17,-16
10002184:	42000204 	addi	r8,r8,8
10002188:	b440130e 	bge	r22,r17,100021d8 <___vfprintf_internal_r+0x858>
1000218c:	01040074 	movhi	r4,4097
10002190:	18c00404 	addi	r3,r3,16
10002194:	10800044 	addi	r2,r2,1
10002198:	21067084 	addi	r4,r4,6594
1000219c:	41000015 	stw	r4,0(r8)
100021a0:	45800115 	stw	r22,4(r8)
100021a4:	d8c02015 	stw	r3,128(sp)
100021a8:	d8801f15 	stw	r2,124(sp)
100021ac:	e0bff40e 	bge	fp,r2,10002180 <__alt_data_end+0xf8002180>
100021b0:	d9801e04 	addi	r6,sp,120
100021b4:	b80b883a 	mov	r5,r23
100021b8:	8009883a 	mov	r4,r16
100021bc:	00088800 	call	10008880 <__sprint_r>
100021c0:	103ef31e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
100021c4:	8c7ffc04 	addi	r17,r17,-16
100021c8:	d8c02017 	ldw	r3,128(sp)
100021cc:	d8801f17 	ldw	r2,124(sp)
100021d0:	da000404 	addi	r8,sp,16
100021d4:	b47fed16 	blt	r22,r17,1000218c <__alt_data_end+0xf800218c>
100021d8:	9021883a 	mov	r16,r18
100021dc:	9825883a 	mov	r18,r19
100021e0:	8827883a 	mov	r19,r17
100021e4:	dc403b17 	ldw	r17,236(sp)
100021e8:	d9403517 	ldw	r5,212(sp)
100021ec:	98c7883a 	add	r3,r19,r3
100021f0:	10800044 	addi	r2,r2,1
100021f4:	41400015 	stw	r5,0(r8)
100021f8:	44c00115 	stw	r19,4(r8)
100021fc:	d8c02015 	stw	r3,128(sp)
10002200:	d8801f15 	stw	r2,124(sp)
10002204:	010001c4 	movi	r4,7
10002208:	2082c516 	blt	r4,r2,10002d20 <___vfprintf_internal_r+0x13a0>
1000220c:	df002787 	ldb	fp,158(sp)
10002210:	42000204 	addi	r8,r8,8
10002214:	e0000c26 	beq	fp,zero,10002248 <___vfprintf_internal_r+0x8c8>
10002218:	d8801f17 	ldw	r2,124(sp)
1000221c:	d9002784 	addi	r4,sp,158
10002220:	18c00044 	addi	r3,r3,1
10002224:	10800044 	addi	r2,r2,1
10002228:	41000015 	stw	r4,0(r8)
1000222c:	01000044 	movi	r4,1
10002230:	41000115 	stw	r4,4(r8)
10002234:	d8c02015 	stw	r3,128(sp)
10002238:	d8801f15 	stw	r2,124(sp)
1000223c:	010001c4 	movi	r4,7
10002240:	20825e16 	blt	r4,r2,10002bbc <___vfprintf_internal_r+0x123c>
10002244:	42000204 	addi	r8,r8,8
10002248:	d8802c17 	ldw	r2,176(sp)
1000224c:	10000c26 	beq	r2,zero,10002280 <___vfprintf_internal_r+0x900>
10002250:	d8801f17 	ldw	r2,124(sp)
10002254:	d9002704 	addi	r4,sp,156
10002258:	18c00084 	addi	r3,r3,2
1000225c:	10800044 	addi	r2,r2,1
10002260:	41000015 	stw	r4,0(r8)
10002264:	01000084 	movi	r4,2
10002268:	41000115 	stw	r4,4(r8)
1000226c:	d8c02015 	stw	r3,128(sp)
10002270:	d8801f15 	stw	r2,124(sp)
10002274:	010001c4 	movi	r4,7
10002278:	20825816 	blt	r4,r2,10002bdc <___vfprintf_internal_r+0x125c>
1000227c:	42000204 	addi	r8,r8,8
10002280:	d9003017 	ldw	r4,192(sp)
10002284:	00802004 	movi	r2,128
10002288:	2081bb26 	beq	r4,r2,10002978 <___vfprintf_internal_r+0xff8>
1000228c:	d9402a17 	ldw	r5,168(sp)
10002290:	d8802b17 	ldw	r2,172(sp)
10002294:	28adc83a 	sub	r22,r5,r2
10002298:	0580310e 	bge	zero,r22,10002360 <___vfprintf_internal_r+0x9e0>
1000229c:	07000404 	movi	fp,16
100022a0:	d8801f17 	ldw	r2,124(sp)
100022a4:	e584360e 	bge	fp,r22,10003380 <___vfprintf_internal_r+0x1a00>
100022a8:	01440074 	movhi	r5,4097
100022ac:	29466c84 	addi	r5,r5,6578
100022b0:	dc402a15 	stw	r17,168(sp)
100022b4:	d9402c15 	stw	r5,176(sp)
100022b8:	b023883a 	mov	r17,r22
100022bc:	04c001c4 	movi	r19,7
100022c0:	a82d883a 	mov	r22,r21
100022c4:	902b883a 	mov	r21,r18
100022c8:	8025883a 	mov	r18,r16
100022cc:	dc002d17 	ldw	r16,180(sp)
100022d0:	00000306 	br	100022e0 <___vfprintf_internal_r+0x960>
100022d4:	8c7ffc04 	addi	r17,r17,-16
100022d8:	42000204 	addi	r8,r8,8
100022dc:	e440110e 	bge	fp,r17,10002324 <___vfprintf_internal_r+0x9a4>
100022e0:	18c00404 	addi	r3,r3,16
100022e4:	10800044 	addi	r2,r2,1
100022e8:	45000015 	stw	r20,0(r8)
100022ec:	47000115 	stw	fp,4(r8)
100022f0:	d8c02015 	stw	r3,128(sp)
100022f4:	d8801f15 	stw	r2,124(sp)
100022f8:	98bff60e 	bge	r19,r2,100022d4 <__alt_data_end+0xf80022d4>
100022fc:	d9801e04 	addi	r6,sp,120
10002300:	b80b883a 	mov	r5,r23
10002304:	8009883a 	mov	r4,r16
10002308:	00088800 	call	10008880 <__sprint_r>
1000230c:	103ea01e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002310:	8c7ffc04 	addi	r17,r17,-16
10002314:	d8c02017 	ldw	r3,128(sp)
10002318:	d8801f17 	ldw	r2,124(sp)
1000231c:	da000404 	addi	r8,sp,16
10002320:	e47fef16 	blt	fp,r17,100022e0 <__alt_data_end+0xf80022e0>
10002324:	9021883a 	mov	r16,r18
10002328:	a825883a 	mov	r18,r21
1000232c:	b02b883a 	mov	r21,r22
10002330:	882d883a 	mov	r22,r17
10002334:	dc402a17 	ldw	r17,168(sp)
10002338:	d9002c17 	ldw	r4,176(sp)
1000233c:	1d87883a 	add	r3,r3,r22
10002340:	10800044 	addi	r2,r2,1
10002344:	41000015 	stw	r4,0(r8)
10002348:	45800115 	stw	r22,4(r8)
1000234c:	d8c02015 	stw	r3,128(sp)
10002350:	d8801f15 	stw	r2,124(sp)
10002354:	010001c4 	movi	r4,7
10002358:	20821016 	blt	r4,r2,10002b9c <___vfprintf_internal_r+0x121c>
1000235c:	42000204 	addi	r8,r8,8
10002360:	9080400c 	andi	r2,r18,256
10002364:	10013a1e 	bne	r2,zero,10002850 <___vfprintf_internal_r+0xed0>
10002368:	d9402b17 	ldw	r5,172(sp)
1000236c:	d8801f17 	ldw	r2,124(sp)
10002370:	44000015 	stw	r16,0(r8)
10002374:	1947883a 	add	r3,r3,r5
10002378:	10800044 	addi	r2,r2,1
1000237c:	41400115 	stw	r5,4(r8)
10002380:	d8c02015 	stw	r3,128(sp)
10002384:	d8801f15 	stw	r2,124(sp)
10002388:	010001c4 	movi	r4,7
1000238c:	2081f516 	blt	r4,r2,10002b64 <___vfprintf_internal_r+0x11e4>
10002390:	42000204 	addi	r8,r8,8
10002394:	9480010c 	andi	r18,r18,4
10002398:	90003226 	beq	r18,zero,10002464 <___vfprintf_internal_r+0xae4>
1000239c:	d9403117 	ldw	r5,196(sp)
100023a0:	d8802917 	ldw	r2,164(sp)
100023a4:	28a1c83a 	sub	r16,r5,r2
100023a8:	04002e0e 	bge	zero,r16,10002464 <___vfprintf_internal_r+0xae4>
100023ac:	04400404 	movi	r17,16
100023b0:	d8801f17 	ldw	r2,124(sp)
100023b4:	8c04c40e 	bge	r17,r16,100036c8 <___vfprintf_internal_r+0x1d48>
100023b8:	01440074 	movhi	r5,4097
100023bc:	29467084 	addi	r5,r5,6594
100023c0:	d9403515 	stw	r5,212(sp)
100023c4:	048001c4 	movi	r18,7
100023c8:	dcc02d17 	ldw	r19,180(sp)
100023cc:	00000306 	br	100023dc <___vfprintf_internal_r+0xa5c>
100023d0:	843ffc04 	addi	r16,r16,-16
100023d4:	42000204 	addi	r8,r8,8
100023d8:	8c00130e 	bge	r17,r16,10002428 <___vfprintf_internal_r+0xaa8>
100023dc:	01040074 	movhi	r4,4097
100023e0:	18c00404 	addi	r3,r3,16
100023e4:	10800044 	addi	r2,r2,1
100023e8:	21067084 	addi	r4,r4,6594
100023ec:	41000015 	stw	r4,0(r8)
100023f0:	44400115 	stw	r17,4(r8)
100023f4:	d8c02015 	stw	r3,128(sp)
100023f8:	d8801f15 	stw	r2,124(sp)
100023fc:	90bff40e 	bge	r18,r2,100023d0 <__alt_data_end+0xf80023d0>
10002400:	d9801e04 	addi	r6,sp,120
10002404:	b80b883a 	mov	r5,r23
10002408:	9809883a 	mov	r4,r19
1000240c:	00088800 	call	10008880 <__sprint_r>
10002410:	103e5f1e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002414:	843ffc04 	addi	r16,r16,-16
10002418:	d8c02017 	ldw	r3,128(sp)
1000241c:	d8801f17 	ldw	r2,124(sp)
10002420:	da000404 	addi	r8,sp,16
10002424:	8c3fed16 	blt	r17,r16,100023dc <__alt_data_end+0xf80023dc>
10002428:	d9403517 	ldw	r5,212(sp)
1000242c:	1c07883a 	add	r3,r3,r16
10002430:	10800044 	addi	r2,r2,1
10002434:	41400015 	stw	r5,0(r8)
10002438:	44000115 	stw	r16,4(r8)
1000243c:	d8c02015 	stw	r3,128(sp)
10002440:	d8801f15 	stw	r2,124(sp)
10002444:	010001c4 	movi	r4,7
10002448:	2080060e 	bge	r4,r2,10002464 <___vfprintf_internal_r+0xae4>
1000244c:	d9002d17 	ldw	r4,180(sp)
10002450:	d9801e04 	addi	r6,sp,120
10002454:	b80b883a 	mov	r5,r23
10002458:	00088800 	call	10008880 <__sprint_r>
1000245c:	103e4c1e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002460:	d8c02017 	ldw	r3,128(sp)
10002464:	d8803117 	ldw	r2,196(sp)
10002468:	d9002917 	ldw	r4,164(sp)
1000246c:	1100010e 	bge	r2,r4,10002474 <___vfprintf_internal_r+0xaf4>
10002470:	2005883a 	mov	r2,r4
10002474:	d9402f17 	ldw	r5,188(sp)
10002478:	288b883a 	add	r5,r5,r2
1000247c:	d9402f15 	stw	r5,188(sp)
10002480:	1801c01e 	bne	r3,zero,10002b84 <___vfprintf_internal_r+0x1204>
10002484:	a8800007 	ldb	r2,0(r21)
10002488:	d8001f15 	stw	zero,124(sp)
1000248c:	da000404 	addi	r8,sp,16
10002490:	103d751e 	bne	r2,zero,10001a68 <__alt_data_end+0xf8001a68>
10002494:	a823883a 	mov	r17,r21
10002498:	003d8b06 	br	10001ac8 <__alt_data_end+0xf8001ac8>
1000249c:	8025883a 	mov	r18,r16
100024a0:	dc002903 	ldbu	r16,164(sp)
100024a4:	e011883a 	mov	r8,fp
100024a8:	84003fcc 	andi	r16,r16,255
100024ac:	8005e51e 	bne	r16,zero,10003c44 <___vfprintf_internal_r+0x22c4>
100024b0:	94800414 	ori	r18,r18,16
100024b4:	9080080c 	andi	r2,r18,32
100024b8:	10022b26 	beq	r2,zero,10002d68 <___vfprintf_internal_r+0x13e8>
100024bc:	d9002e17 	ldw	r4,184(sp)
100024c0:	d9402a17 	ldw	r5,168(sp)
100024c4:	d8002785 	stb	zero,158(sp)
100024c8:	20c00204 	addi	r3,r4,8
100024cc:	24c00017 	ldw	r19,0(r4)
100024d0:	25800117 	ldw	r22,4(r4)
100024d4:	28042e16 	blt	r5,zero,10003590 <___vfprintf_internal_r+0x1c10>
100024d8:	013fdfc4 	movi	r4,-129
100024dc:	9d84b03a 	or	r2,r19,r22
100024e0:	d8c02e15 	stw	r3,184(sp)
100024e4:	9124703a 	and	r18,r18,r4
100024e8:	0039883a 	mov	fp,zero
100024ec:	103e801e 	bne	r2,zero,10001ef0 <__alt_data_end+0xf8001ef0>
100024f0:	d9002a17 	ldw	r4,168(sp)
100024f4:	2002e01e 	bne	r4,zero,10003078 <___vfprintf_internal_r+0x16f8>
100024f8:	d8002a15 	stw	zero,168(sp)
100024fc:	d8002b15 	stw	zero,172(sp)
10002500:	dc001e04 	addi	r16,sp,120
10002504:	003ef506 	br	100020dc <__alt_data_end+0xf80020dc>
10002508:	8025883a 	mov	r18,r16
1000250c:	dc002903 	ldbu	r16,164(sp)
10002510:	e011883a 	mov	r8,fp
10002514:	84003fcc 	andi	r16,r16,255
10002518:	8005ba1e 	bne	r16,zero,10003c04 <___vfprintf_internal_r+0x2284>
1000251c:	01040074 	movhi	r4,4097
10002520:	21066004 	addi	r4,r4,6528
10002524:	d9003915 	stw	r4,228(sp)
10002528:	9080080c 	andi	r2,r18,32
1000252c:	10006126 	beq	r2,zero,100026b4 <___vfprintf_internal_r+0xd34>
10002530:	d9402e17 	ldw	r5,184(sp)
10002534:	2cc00017 	ldw	r19,0(r5)
10002538:	2d800117 	ldw	r22,4(r5)
1000253c:	29400204 	addi	r5,r5,8
10002540:	d9402e15 	stw	r5,184(sp)
10002544:	9080004c 	andi	r2,r18,1
10002548:	1001ac26 	beq	r2,zero,10002bfc <___vfprintf_internal_r+0x127c>
1000254c:	9d84b03a 	or	r2,r19,r22
10002550:	10038526 	beq	r2,zero,10003368 <___vfprintf_internal_r+0x19e8>
10002554:	d8c02a17 	ldw	r3,168(sp)
10002558:	00800c04 	movi	r2,48
1000255c:	d8802705 	stb	r2,156(sp)
10002560:	dc402745 	stb	r17,157(sp)
10002564:	d8002785 	stb	zero,158(sp)
10002568:	90800094 	ori	r2,r18,2
1000256c:	18047916 	blt	r3,zero,10003754 <___vfprintf_internal_r+0x1dd4>
10002570:	00bfdfc4 	movi	r2,-129
10002574:	90a4703a 	and	r18,r18,r2
10002578:	94800094 	ori	r18,r18,2
1000257c:	0039883a 	mov	fp,zero
10002580:	d9003917 	ldw	r4,228(sp)
10002584:	dc001e04 	addi	r16,sp,120
10002588:	988003cc 	andi	r2,r19,15
1000258c:	b006973a 	slli	r3,r22,28
10002590:	2085883a 	add	r2,r4,r2
10002594:	9826d13a 	srli	r19,r19,4
10002598:	10800003 	ldbu	r2,0(r2)
1000259c:	b02cd13a 	srli	r22,r22,4
100025a0:	843fffc4 	addi	r16,r16,-1
100025a4:	1ce6b03a 	or	r19,r3,r19
100025a8:	80800005 	stb	r2,0(r16)
100025ac:	9d84b03a 	or	r2,r19,r22
100025b0:	103ff51e 	bne	r2,zero,10002588 <__alt_data_end+0xf8002588>
100025b4:	d8c02817 	ldw	r3,160(sp)
100025b8:	1c07c83a 	sub	r3,r3,r16
100025bc:	d8c02b15 	stw	r3,172(sp)
100025c0:	003ec606 	br	100020dc <__alt_data_end+0xf80020dc>
100025c4:	8025883a 	mov	r18,r16
100025c8:	dc002903 	ldbu	r16,164(sp)
100025cc:	e011883a 	mov	r8,fp
100025d0:	84003fcc 	andi	r16,r16,255
100025d4:	803e9626 	beq	r16,zero,10002030 <__alt_data_end+0xf8002030>
100025d8:	d8c02b03 	ldbu	r3,172(sp)
100025dc:	d8c02785 	stb	r3,158(sp)
100025e0:	003e9306 	br	10002030 <__alt_data_end+0xf8002030>
100025e4:	00c00044 	movi	r3,1
100025e8:	d8c02905 	stb	r3,164(sp)
100025ec:	00c00ac4 	movi	r3,43
100025f0:	d8c02b05 	stb	r3,172(sp)
100025f4:	ac400007 	ldb	r17,0(r21)
100025f8:	003d4306 	br	10001b08 <__alt_data_end+0xf8001b08>
100025fc:	84000814 	ori	r16,r16,32
10002600:	ac400007 	ldb	r17,0(r21)
10002604:	003d4006 	br	10001b08 <__alt_data_end+0xf8001b08>
10002608:	d8802e17 	ldw	r2,184(sp)
1000260c:	8025883a 	mov	r18,r16
10002610:	d8002785 	stb	zero,158(sp)
10002614:	14000017 	ldw	r16,0(r2)
10002618:	e011883a 	mov	r8,fp
1000261c:	14c00104 	addi	r19,r2,4
10002620:	80042d26 	beq	r16,zero,100036d8 <___vfprintf_internal_r+0x1d58>
10002624:	d8c02a17 	ldw	r3,168(sp)
10002628:	1803e416 	blt	r3,zero,100035bc <___vfprintf_internal_r+0x1c3c>
1000262c:	180d883a 	mov	r6,r3
10002630:	000b883a 	mov	r5,zero
10002634:	8009883a 	mov	r4,r16
10002638:	df003d15 	stw	fp,244(sp)
1000263c:	0006df00 	call	10006df0 <memchr>
10002640:	da003d17 	ldw	r8,244(sp)
10002644:	10046826 	beq	r2,zero,100037e8 <___vfprintf_internal_r+0x1e68>
10002648:	1405c83a 	sub	r2,r2,r16
1000264c:	d8802b15 	stw	r2,172(sp)
10002650:	1003e016 	blt	r2,zero,100035d4 <___vfprintf_internal_r+0x1c54>
10002654:	df002783 	ldbu	fp,158(sp)
10002658:	d8802915 	stw	r2,164(sp)
1000265c:	dcc02e15 	stw	r19,184(sp)
10002660:	d8002a15 	stw	zero,168(sp)
10002664:	d8003215 	stw	zero,200(sp)
10002668:	003ea206 	br	100020f4 <__alt_data_end+0xf80020f4>
1000266c:	8025883a 	mov	r18,r16
10002670:	dc002903 	ldbu	r16,164(sp)
10002674:	e011883a 	mov	r8,fp
10002678:	84003fcc 	andi	r16,r16,255
1000267c:	803f8d26 	beq	r16,zero,100024b4 <__alt_data_end+0xf80024b4>
10002680:	d8c02b03 	ldbu	r3,172(sp)
10002684:	d8c02785 	stb	r3,158(sp)
10002688:	003f8a06 	br	100024b4 <__alt_data_end+0xf80024b4>
1000268c:	8025883a 	mov	r18,r16
10002690:	dc002903 	ldbu	r16,164(sp)
10002694:	e011883a 	mov	r8,fp
10002698:	84003fcc 	andi	r16,r16,255
1000269c:	8005661e 	bne	r16,zero,10003c38 <___vfprintf_internal_r+0x22b8>
100026a0:	01040074 	movhi	r4,4097
100026a4:	21066504 	addi	r4,r4,6548
100026a8:	d9003915 	stw	r4,228(sp)
100026ac:	9080080c 	andi	r2,r18,32
100026b0:	103f9f1e 	bne	r2,zero,10002530 <__alt_data_end+0xf8002530>
100026b4:	9080040c 	andi	r2,r18,16
100026b8:	1002eb26 	beq	r2,zero,10003268 <___vfprintf_internal_r+0x18e8>
100026bc:	d8802e17 	ldw	r2,184(sp)
100026c0:	002d883a 	mov	r22,zero
100026c4:	14c00017 	ldw	r19,0(r2)
100026c8:	10800104 	addi	r2,r2,4
100026cc:	d8802e15 	stw	r2,184(sp)
100026d0:	003f9c06 	br	10002544 <__alt_data_end+0xf8002544>
100026d4:	d8802b07 	ldb	r2,172(sp)
100026d8:	1002e11e 	bne	r2,zero,10003260 <___vfprintf_internal_r+0x18e0>
100026dc:	00c00044 	movi	r3,1
100026e0:	d8c02905 	stb	r3,164(sp)
100026e4:	00c00804 	movi	r3,32
100026e8:	d8c02b05 	stb	r3,172(sp)
100026ec:	ac400007 	ldb	r17,0(r21)
100026f0:	003d0506 	br	10001b08 <__alt_data_end+0xf8001b08>
100026f4:	84000054 	ori	r16,r16,1
100026f8:	ac400007 	ldb	r17,0(r21)
100026fc:	003d0206 	br	10001b08 <__alt_data_end+0xf8001b08>
10002700:	8025883a 	mov	r18,r16
10002704:	dc002903 	ldbu	r16,164(sp)
10002708:	e011883a 	mov	r8,fp
1000270c:	84003fcc 	andi	r16,r16,255
10002710:	803de726 	beq	r16,zero,10001eb0 <__alt_data_end+0xf8001eb0>
10002714:	d8c02b03 	ldbu	r3,172(sp)
10002718:	d8c02785 	stb	r3,158(sp)
1000271c:	003de406 	br	10001eb0 <__alt_data_end+0xf8001eb0>
10002720:	84001014 	ori	r16,r16,64
10002724:	ac400007 	ldb	r17,0(r21)
10002728:	003cf706 	br	10001b08 <__alt_data_end+0xf8001b08>
1000272c:	ac400007 	ldb	r17,0(r21)
10002730:	00801b04 	movi	r2,108
10002734:	88838f26 	beq	r17,r2,10003574 <___vfprintf_internal_r+0x1bf4>
10002738:	84000414 	ori	r16,r16,16
1000273c:	003cf206 	br	10001b08 <__alt_data_end+0xf8001b08>
10002740:	8025883a 	mov	r18,r16
10002744:	dc002903 	ldbu	r16,164(sp)
10002748:	e011883a 	mov	r8,fp
1000274c:	84003fcc 	andi	r16,r16,255
10002750:	80053f1e 	bne	r16,zero,10003c50 <___vfprintf_internal_r+0x22d0>
10002754:	9080080c 	andi	r2,r18,32
10002758:	1002d226 	beq	r2,zero,100032a4 <___vfprintf_internal_r+0x1924>
1000275c:	d9002e17 	ldw	r4,184(sp)
10002760:	d9402f17 	ldw	r5,188(sp)
10002764:	20800017 	ldw	r2,0(r4)
10002768:	2807d7fa 	srai	r3,r5,31
1000276c:	21000104 	addi	r4,r4,4
10002770:	d9002e15 	stw	r4,184(sp)
10002774:	11400015 	stw	r5,0(r2)
10002778:	10c00115 	stw	r3,4(r2)
1000277c:	003cb806 	br	10001a60 <__alt_data_end+0xf8001a60>
10002780:	d8c02e17 	ldw	r3,184(sp)
10002784:	d9002e17 	ldw	r4,184(sp)
10002788:	8025883a 	mov	r18,r16
1000278c:	18800017 	ldw	r2,0(r3)
10002790:	21000104 	addi	r4,r4,4
10002794:	00c00044 	movi	r3,1
10002798:	e011883a 	mov	r8,fp
1000279c:	d8c02915 	stw	r3,164(sp)
100027a0:	d8002785 	stb	zero,158(sp)
100027a4:	d8801405 	stb	r2,80(sp)
100027a8:	d9002e15 	stw	r4,184(sp)
100027ac:	d8c02b15 	stw	r3,172(sp)
100027b0:	d8002a15 	stw	zero,168(sp)
100027b4:	d8003215 	stw	zero,200(sp)
100027b8:	dc001404 	addi	r16,sp,80
100027bc:	0039883a 	mov	fp,zero
100027c0:	003e5306 	br	10002110 <__alt_data_end+0xf8002110>
100027c4:	01040074 	movhi	r4,4097
100027c8:	21066504 	addi	r4,r4,6548
100027cc:	0039883a 	mov	fp,zero
100027d0:	d9003915 	stw	r4,228(sp)
100027d4:	04401e04 	movi	r17,120
100027d8:	003f6906 	br	10002580 <__alt_data_end+0xf8002580>
100027dc:	8025883a 	mov	r18,r16
100027e0:	dc002903 	ldbu	r16,164(sp)
100027e4:	e011883a 	mov	r8,fp
100027e8:	84003fcc 	andi	r16,r16,255
100027ec:	8005081e 	bne	r16,zero,10003c10 <___vfprintf_internal_r+0x2290>
100027f0:	883d6126 	beq	r17,zero,10001d78 <__alt_data_end+0xf8001d78>
100027f4:	00c00044 	movi	r3,1
100027f8:	d8c02915 	stw	r3,164(sp)
100027fc:	dc401405 	stb	r17,80(sp)
10002800:	d8002785 	stb	zero,158(sp)
10002804:	003fe906 	br	100027ac <__alt_data_end+0xf80027ac>
10002808:	01440074 	movhi	r5,4097
1000280c:	29466504 	addi	r5,r5,6548
10002810:	d9403915 	stw	r5,228(sp)
10002814:	d8c02e15 	stw	r3,184(sp)
10002818:	1025883a 	mov	r18,r2
1000281c:	04401e04 	movi	r17,120
10002820:	9d84b03a 	or	r2,r19,r22
10002824:	1000fc1e 	bne	r2,zero,10002c18 <___vfprintf_internal_r+0x1298>
10002828:	0039883a 	mov	fp,zero
1000282c:	00800084 	movi	r2,2
10002830:	10803fcc 	andi	r2,r2,255
10002834:	00c00044 	movi	r3,1
10002838:	10c20f26 	beq	r2,r3,10003078 <___vfprintf_internal_r+0x16f8>
1000283c:	00c00084 	movi	r3,2
10002840:	10fd3326 	beq	r2,r3,10001d10 <__alt_data_end+0xf8001d10>
10002844:	003e0b06 	br	10002074 <__alt_data_end+0xf8002074>
10002848:	d8c02017 	ldw	r3,128(sp)
1000284c:	003e7106 	br	10002214 <__alt_data_end+0xf8002214>
10002850:	00801944 	movi	r2,101
10002854:	14407e0e 	bge	r2,r17,10002a50 <___vfprintf_internal_r+0x10d0>
10002858:	d9003617 	ldw	r4,216(sp)
1000285c:	d9403817 	ldw	r5,224(sp)
10002860:	000d883a 	mov	r6,zero
10002864:	000f883a 	mov	r7,zero
10002868:	d8c03c15 	stw	r3,240(sp)
1000286c:	da003d15 	stw	r8,244(sp)
10002870:	000d3400 	call	1000d340 <__eqdf2>
10002874:	d8c03c17 	ldw	r3,240(sp)
10002878:	da003d17 	ldw	r8,244(sp)
1000287c:	1000f71e 	bne	r2,zero,10002c5c <___vfprintf_internal_r+0x12dc>
10002880:	d8801f17 	ldw	r2,124(sp)
10002884:	01040074 	movhi	r4,4097
10002888:	21066c04 	addi	r4,r4,6576
1000288c:	18c00044 	addi	r3,r3,1
10002890:	10800044 	addi	r2,r2,1
10002894:	41000015 	stw	r4,0(r8)
10002898:	01000044 	movi	r4,1
1000289c:	41000115 	stw	r4,4(r8)
100028a0:	d8c02015 	stw	r3,128(sp)
100028a4:	d8801f15 	stw	r2,124(sp)
100028a8:	010001c4 	movi	r4,7
100028ac:	2082b816 	blt	r4,r2,10003390 <___vfprintf_internal_r+0x1a10>
100028b0:	42000204 	addi	r8,r8,8
100028b4:	d8802617 	ldw	r2,152(sp)
100028b8:	d9403317 	ldw	r5,204(sp)
100028bc:	11400216 	blt	r2,r5,100028c8 <___vfprintf_internal_r+0xf48>
100028c0:	9080004c 	andi	r2,r18,1
100028c4:	103eb326 	beq	r2,zero,10002394 <__alt_data_end+0xf8002394>
100028c8:	d8803717 	ldw	r2,220(sp)
100028cc:	d9003417 	ldw	r4,208(sp)
100028d0:	d9403717 	ldw	r5,220(sp)
100028d4:	1887883a 	add	r3,r3,r2
100028d8:	d8801f17 	ldw	r2,124(sp)
100028dc:	41000015 	stw	r4,0(r8)
100028e0:	41400115 	stw	r5,4(r8)
100028e4:	10800044 	addi	r2,r2,1
100028e8:	d8c02015 	stw	r3,128(sp)
100028ec:	d8801f15 	stw	r2,124(sp)
100028f0:	010001c4 	movi	r4,7
100028f4:	20832916 	blt	r4,r2,1000359c <___vfprintf_internal_r+0x1c1c>
100028f8:	42000204 	addi	r8,r8,8
100028fc:	d8803317 	ldw	r2,204(sp)
10002900:	143fffc4 	addi	r16,r2,-1
10002904:	043ea30e 	bge	zero,r16,10002394 <__alt_data_end+0xf8002394>
10002908:	04400404 	movi	r17,16
1000290c:	d8801f17 	ldw	r2,124(sp)
10002910:	8c00880e 	bge	r17,r16,10002b34 <___vfprintf_internal_r+0x11b4>
10002914:	01440074 	movhi	r5,4097
10002918:	29466c84 	addi	r5,r5,6578
1000291c:	d9402c15 	stw	r5,176(sp)
10002920:	058001c4 	movi	r22,7
10002924:	dcc02d17 	ldw	r19,180(sp)
10002928:	00000306 	br	10002938 <___vfprintf_internal_r+0xfb8>
1000292c:	42000204 	addi	r8,r8,8
10002930:	843ffc04 	addi	r16,r16,-16
10002934:	8c00820e 	bge	r17,r16,10002b40 <___vfprintf_internal_r+0x11c0>
10002938:	18c00404 	addi	r3,r3,16
1000293c:	10800044 	addi	r2,r2,1
10002940:	45000015 	stw	r20,0(r8)
10002944:	44400115 	stw	r17,4(r8)
10002948:	d8c02015 	stw	r3,128(sp)
1000294c:	d8801f15 	stw	r2,124(sp)
10002950:	b0bff60e 	bge	r22,r2,1000292c <__alt_data_end+0xf800292c>
10002954:	d9801e04 	addi	r6,sp,120
10002958:	b80b883a 	mov	r5,r23
1000295c:	9809883a 	mov	r4,r19
10002960:	00088800 	call	10008880 <__sprint_r>
10002964:	103d0a1e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002968:	d8c02017 	ldw	r3,128(sp)
1000296c:	d8801f17 	ldw	r2,124(sp)
10002970:	da000404 	addi	r8,sp,16
10002974:	003fee06 	br	10002930 <__alt_data_end+0xf8002930>
10002978:	d9403117 	ldw	r5,196(sp)
1000297c:	d8802917 	ldw	r2,164(sp)
10002980:	28adc83a 	sub	r22,r5,r2
10002984:	05be410e 	bge	zero,r22,1000228c <__alt_data_end+0xf800228c>
10002988:	07000404 	movi	fp,16
1000298c:	d8801f17 	ldw	r2,124(sp)
10002990:	e5838f0e 	bge	fp,r22,100037d0 <___vfprintf_internal_r+0x1e50>
10002994:	01440074 	movhi	r5,4097
10002998:	29466c84 	addi	r5,r5,6578
1000299c:	dc403015 	stw	r17,192(sp)
100029a0:	d9402c15 	stw	r5,176(sp)
100029a4:	b023883a 	mov	r17,r22
100029a8:	04c001c4 	movi	r19,7
100029ac:	a82d883a 	mov	r22,r21
100029b0:	902b883a 	mov	r21,r18
100029b4:	8025883a 	mov	r18,r16
100029b8:	dc002d17 	ldw	r16,180(sp)
100029bc:	00000306 	br	100029cc <___vfprintf_internal_r+0x104c>
100029c0:	8c7ffc04 	addi	r17,r17,-16
100029c4:	42000204 	addi	r8,r8,8
100029c8:	e440110e 	bge	fp,r17,10002a10 <___vfprintf_internal_r+0x1090>
100029cc:	18c00404 	addi	r3,r3,16
100029d0:	10800044 	addi	r2,r2,1
100029d4:	45000015 	stw	r20,0(r8)
100029d8:	47000115 	stw	fp,4(r8)
100029dc:	d8c02015 	stw	r3,128(sp)
100029e0:	d8801f15 	stw	r2,124(sp)
100029e4:	98bff60e 	bge	r19,r2,100029c0 <__alt_data_end+0xf80029c0>
100029e8:	d9801e04 	addi	r6,sp,120
100029ec:	b80b883a 	mov	r5,r23
100029f0:	8009883a 	mov	r4,r16
100029f4:	00088800 	call	10008880 <__sprint_r>
100029f8:	103ce51e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
100029fc:	8c7ffc04 	addi	r17,r17,-16
10002a00:	d8c02017 	ldw	r3,128(sp)
10002a04:	d8801f17 	ldw	r2,124(sp)
10002a08:	da000404 	addi	r8,sp,16
10002a0c:	e47fef16 	blt	fp,r17,100029cc <__alt_data_end+0xf80029cc>
10002a10:	9021883a 	mov	r16,r18
10002a14:	a825883a 	mov	r18,r21
10002a18:	b02b883a 	mov	r21,r22
10002a1c:	882d883a 	mov	r22,r17
10002a20:	dc403017 	ldw	r17,192(sp)
10002a24:	d9002c17 	ldw	r4,176(sp)
10002a28:	1d87883a 	add	r3,r3,r22
10002a2c:	10800044 	addi	r2,r2,1
10002a30:	41000015 	stw	r4,0(r8)
10002a34:	45800115 	stw	r22,4(r8)
10002a38:	d8c02015 	stw	r3,128(sp)
10002a3c:	d8801f15 	stw	r2,124(sp)
10002a40:	010001c4 	movi	r4,7
10002a44:	20818e16 	blt	r4,r2,10003080 <___vfprintf_internal_r+0x1700>
10002a48:	42000204 	addi	r8,r8,8
10002a4c:	003e0f06 	br	1000228c <__alt_data_end+0xf800228c>
10002a50:	d9403317 	ldw	r5,204(sp)
10002a54:	00800044 	movi	r2,1
10002a58:	18c00044 	addi	r3,r3,1
10002a5c:	1141530e 	bge	r2,r5,10002fac <___vfprintf_internal_r+0x162c>
10002a60:	dc401f17 	ldw	r17,124(sp)
10002a64:	00800044 	movi	r2,1
10002a68:	40800115 	stw	r2,4(r8)
10002a6c:	8c400044 	addi	r17,r17,1
10002a70:	44000015 	stw	r16,0(r8)
10002a74:	d8c02015 	stw	r3,128(sp)
10002a78:	dc401f15 	stw	r17,124(sp)
10002a7c:	008001c4 	movi	r2,7
10002a80:	14416b16 	blt	r2,r17,10003030 <___vfprintf_internal_r+0x16b0>
10002a84:	42000204 	addi	r8,r8,8
10002a88:	d8803717 	ldw	r2,220(sp)
10002a8c:	d9003417 	ldw	r4,208(sp)
10002a90:	8c400044 	addi	r17,r17,1
10002a94:	10c7883a 	add	r3,r2,r3
10002a98:	40800115 	stw	r2,4(r8)
10002a9c:	41000015 	stw	r4,0(r8)
10002aa0:	d8c02015 	stw	r3,128(sp)
10002aa4:	dc401f15 	stw	r17,124(sp)
10002aa8:	008001c4 	movi	r2,7
10002aac:	14416916 	blt	r2,r17,10003054 <___vfprintf_internal_r+0x16d4>
10002ab0:	45800204 	addi	r22,r8,8
10002ab4:	d9003617 	ldw	r4,216(sp)
10002ab8:	d9403817 	ldw	r5,224(sp)
10002abc:	000d883a 	mov	r6,zero
10002ac0:	000f883a 	mov	r7,zero
10002ac4:	d8c03c15 	stw	r3,240(sp)
10002ac8:	000d3400 	call	1000d340 <__eqdf2>
10002acc:	d8c03c17 	ldw	r3,240(sp)
10002ad0:	1000bc26 	beq	r2,zero,10002dc4 <___vfprintf_internal_r+0x1444>
10002ad4:	d9403317 	ldw	r5,204(sp)
10002ad8:	84000044 	addi	r16,r16,1
10002adc:	8c400044 	addi	r17,r17,1
10002ae0:	28bfffc4 	addi	r2,r5,-1
10002ae4:	1887883a 	add	r3,r3,r2
10002ae8:	b0800115 	stw	r2,4(r22)
10002aec:	b4000015 	stw	r16,0(r22)
10002af0:	d8c02015 	stw	r3,128(sp)
10002af4:	dc401f15 	stw	r17,124(sp)
10002af8:	008001c4 	movi	r2,7
10002afc:	14414316 	blt	r2,r17,1000300c <___vfprintf_internal_r+0x168c>
10002b00:	b5800204 	addi	r22,r22,8
10002b04:	d9003a17 	ldw	r4,232(sp)
10002b08:	df0022c4 	addi	fp,sp,139
10002b0c:	8c400044 	addi	r17,r17,1
10002b10:	20c7883a 	add	r3,r4,r3
10002b14:	b7000015 	stw	fp,0(r22)
10002b18:	b1000115 	stw	r4,4(r22)
10002b1c:	d8c02015 	stw	r3,128(sp)
10002b20:	dc401f15 	stw	r17,124(sp)
10002b24:	008001c4 	movi	r2,7
10002b28:	14400e16 	blt	r2,r17,10002b64 <___vfprintf_internal_r+0x11e4>
10002b2c:	b2000204 	addi	r8,r22,8
10002b30:	003e1806 	br	10002394 <__alt_data_end+0xf8002394>
10002b34:	01040074 	movhi	r4,4097
10002b38:	21066c84 	addi	r4,r4,6578
10002b3c:	d9002c15 	stw	r4,176(sp)
10002b40:	d9002c17 	ldw	r4,176(sp)
10002b44:	1c07883a 	add	r3,r3,r16
10002b48:	44000115 	stw	r16,4(r8)
10002b4c:	41000015 	stw	r4,0(r8)
10002b50:	10800044 	addi	r2,r2,1
10002b54:	d8c02015 	stw	r3,128(sp)
10002b58:	d8801f15 	stw	r2,124(sp)
10002b5c:	010001c4 	movi	r4,7
10002b60:	20be0b0e 	bge	r4,r2,10002390 <__alt_data_end+0xf8002390>
10002b64:	d9002d17 	ldw	r4,180(sp)
10002b68:	d9801e04 	addi	r6,sp,120
10002b6c:	b80b883a 	mov	r5,r23
10002b70:	00088800 	call	10008880 <__sprint_r>
10002b74:	103c861e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002b78:	d8c02017 	ldw	r3,128(sp)
10002b7c:	da000404 	addi	r8,sp,16
10002b80:	003e0406 	br	10002394 <__alt_data_end+0xf8002394>
10002b84:	d9002d17 	ldw	r4,180(sp)
10002b88:	d9801e04 	addi	r6,sp,120
10002b8c:	b80b883a 	mov	r5,r23
10002b90:	00088800 	call	10008880 <__sprint_r>
10002b94:	103e3b26 	beq	r2,zero,10002484 <__alt_data_end+0xf8002484>
10002b98:	003c7d06 	br	10001d90 <__alt_data_end+0xf8001d90>
10002b9c:	d9002d17 	ldw	r4,180(sp)
10002ba0:	d9801e04 	addi	r6,sp,120
10002ba4:	b80b883a 	mov	r5,r23
10002ba8:	00088800 	call	10008880 <__sprint_r>
10002bac:	103c781e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002bb0:	d8c02017 	ldw	r3,128(sp)
10002bb4:	da000404 	addi	r8,sp,16
10002bb8:	003de906 	br	10002360 <__alt_data_end+0xf8002360>
10002bbc:	d9002d17 	ldw	r4,180(sp)
10002bc0:	d9801e04 	addi	r6,sp,120
10002bc4:	b80b883a 	mov	r5,r23
10002bc8:	00088800 	call	10008880 <__sprint_r>
10002bcc:	103c701e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002bd0:	d8c02017 	ldw	r3,128(sp)
10002bd4:	da000404 	addi	r8,sp,16
10002bd8:	003d9b06 	br	10002248 <__alt_data_end+0xf8002248>
10002bdc:	d9002d17 	ldw	r4,180(sp)
10002be0:	d9801e04 	addi	r6,sp,120
10002be4:	b80b883a 	mov	r5,r23
10002be8:	00088800 	call	10008880 <__sprint_r>
10002bec:	103c681e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002bf0:	d8c02017 	ldw	r3,128(sp)
10002bf4:	da000404 	addi	r8,sp,16
10002bf8:	003da106 	br	10002280 <__alt_data_end+0xf8002280>
10002bfc:	d9402a17 	ldw	r5,168(sp)
10002c00:	d8002785 	stb	zero,158(sp)
10002c04:	283f0616 	blt	r5,zero,10002820 <__alt_data_end+0xf8002820>
10002c08:	00ffdfc4 	movi	r3,-129
10002c0c:	9d84b03a 	or	r2,r19,r22
10002c10:	90e4703a 	and	r18,r18,r3
10002c14:	103c3b26 	beq	r2,zero,10001d04 <__alt_data_end+0xf8001d04>
10002c18:	0039883a 	mov	fp,zero
10002c1c:	003e5806 	br	10002580 <__alt_data_end+0xf8002580>
10002c20:	9080040c 	andi	r2,r18,16
10002c24:	1001b326 	beq	r2,zero,100032f4 <___vfprintf_internal_r+0x1974>
10002c28:	d8c02e17 	ldw	r3,184(sp)
10002c2c:	d9002a17 	ldw	r4,168(sp)
10002c30:	d8002785 	stb	zero,158(sp)
10002c34:	18800104 	addi	r2,r3,4
10002c38:	1cc00017 	ldw	r19,0(r3)
10002c3c:	002d883a 	mov	r22,zero
10002c40:	2001b516 	blt	r4,zero,10003318 <___vfprintf_internal_r+0x1998>
10002c44:	00ffdfc4 	movi	r3,-129
10002c48:	d8802e15 	stw	r2,184(sp)
10002c4c:	90e4703a 	and	r18,r18,r3
10002c50:	983d0526 	beq	r19,zero,10002068 <__alt_data_end+0xf8002068>
10002c54:	0039883a 	mov	fp,zero
10002c58:	003d0806 	br	1000207c <__alt_data_end+0xf800207c>
10002c5c:	dc402617 	ldw	r17,152(sp)
10002c60:	0441d30e 	bge	zero,r17,100033b0 <___vfprintf_internal_r+0x1a30>
10002c64:	dc403217 	ldw	r17,200(sp)
10002c68:	d8803317 	ldw	r2,204(sp)
10002c6c:	1440010e 	bge	r2,r17,10002c74 <___vfprintf_internal_r+0x12f4>
10002c70:	1023883a 	mov	r17,r2
10002c74:	04400a0e 	bge	zero,r17,10002ca0 <___vfprintf_internal_r+0x1320>
10002c78:	d8801f17 	ldw	r2,124(sp)
10002c7c:	1c47883a 	add	r3,r3,r17
10002c80:	44000015 	stw	r16,0(r8)
10002c84:	10800044 	addi	r2,r2,1
10002c88:	44400115 	stw	r17,4(r8)
10002c8c:	d8c02015 	stw	r3,128(sp)
10002c90:	d8801f15 	stw	r2,124(sp)
10002c94:	010001c4 	movi	r4,7
10002c98:	20826516 	blt	r4,r2,10003630 <___vfprintf_internal_r+0x1cb0>
10002c9c:	42000204 	addi	r8,r8,8
10002ca0:	88026116 	blt	r17,zero,10003628 <___vfprintf_internal_r+0x1ca8>
10002ca4:	d9003217 	ldw	r4,200(sp)
10002ca8:	2463c83a 	sub	r17,r4,r17
10002cac:	04407b0e 	bge	zero,r17,10002e9c <___vfprintf_internal_r+0x151c>
10002cb0:	05800404 	movi	r22,16
10002cb4:	d8801f17 	ldw	r2,124(sp)
10002cb8:	b4419d0e 	bge	r22,r17,10003330 <___vfprintf_internal_r+0x19b0>
10002cbc:	01040074 	movhi	r4,4097
10002cc0:	21066c84 	addi	r4,r4,6578
10002cc4:	d9002c15 	stw	r4,176(sp)
10002cc8:	070001c4 	movi	fp,7
10002ccc:	dcc02d17 	ldw	r19,180(sp)
10002cd0:	00000306 	br	10002ce0 <___vfprintf_internal_r+0x1360>
10002cd4:	42000204 	addi	r8,r8,8
10002cd8:	8c7ffc04 	addi	r17,r17,-16
10002cdc:	b441970e 	bge	r22,r17,1000333c <___vfprintf_internal_r+0x19bc>
10002ce0:	18c00404 	addi	r3,r3,16
10002ce4:	10800044 	addi	r2,r2,1
10002ce8:	45000015 	stw	r20,0(r8)
10002cec:	45800115 	stw	r22,4(r8)
10002cf0:	d8c02015 	stw	r3,128(sp)
10002cf4:	d8801f15 	stw	r2,124(sp)
10002cf8:	e0bff60e 	bge	fp,r2,10002cd4 <__alt_data_end+0xf8002cd4>
10002cfc:	d9801e04 	addi	r6,sp,120
10002d00:	b80b883a 	mov	r5,r23
10002d04:	9809883a 	mov	r4,r19
10002d08:	00088800 	call	10008880 <__sprint_r>
10002d0c:	103c201e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002d10:	d8c02017 	ldw	r3,128(sp)
10002d14:	d8801f17 	ldw	r2,124(sp)
10002d18:	da000404 	addi	r8,sp,16
10002d1c:	003fee06 	br	10002cd8 <__alt_data_end+0xf8002cd8>
10002d20:	d9002d17 	ldw	r4,180(sp)
10002d24:	d9801e04 	addi	r6,sp,120
10002d28:	b80b883a 	mov	r5,r23
10002d2c:	00088800 	call	10008880 <__sprint_r>
10002d30:	103c171e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002d34:	d8c02017 	ldw	r3,128(sp)
10002d38:	df002787 	ldb	fp,158(sp)
10002d3c:	da000404 	addi	r8,sp,16
10002d40:	003d3406 	br	10002214 <__alt_data_end+0xf8002214>
10002d44:	9080040c 	andi	r2,r18,16
10002d48:	10016126 	beq	r2,zero,100032d0 <___vfprintf_internal_r+0x1950>
10002d4c:	d9402e17 	ldw	r5,184(sp)
10002d50:	2cc00017 	ldw	r19,0(r5)
10002d54:	29400104 	addi	r5,r5,4
10002d58:	d9402e15 	stw	r5,184(sp)
10002d5c:	982dd7fa 	srai	r22,r19,31
10002d60:	b005883a 	mov	r2,r22
10002d64:	003c5a06 	br	10001ed0 <__alt_data_end+0xf8001ed0>
10002d68:	9080040c 	andi	r2,r18,16
10002d6c:	10003526 	beq	r2,zero,10002e44 <___vfprintf_internal_r+0x14c4>
10002d70:	d8c02e17 	ldw	r3,184(sp)
10002d74:	d9002a17 	ldw	r4,168(sp)
10002d78:	d8002785 	stb	zero,158(sp)
10002d7c:	18800104 	addi	r2,r3,4
10002d80:	1cc00017 	ldw	r19,0(r3)
10002d84:	002d883a 	mov	r22,zero
10002d88:	20003716 	blt	r4,zero,10002e68 <___vfprintf_internal_r+0x14e8>
10002d8c:	00ffdfc4 	movi	r3,-129
10002d90:	d8802e15 	stw	r2,184(sp)
10002d94:	90e4703a 	and	r18,r18,r3
10002d98:	0039883a 	mov	fp,zero
10002d9c:	983dd426 	beq	r19,zero,100024f0 <__alt_data_end+0xf80024f0>
10002da0:	00800244 	movi	r2,9
10002da4:	14fc5336 	bltu	r2,r19,10001ef4 <__alt_data_end+0xf8001ef4>
10002da8:	d8c02817 	ldw	r3,160(sp)
10002dac:	dc001dc4 	addi	r16,sp,119
10002db0:	9cc00c04 	addi	r19,r19,48
10002db4:	1c07c83a 	sub	r3,r3,r16
10002db8:	dcc01dc5 	stb	r19,119(sp)
10002dbc:	d8c02b15 	stw	r3,172(sp)
10002dc0:	003cc606 	br	100020dc <__alt_data_end+0xf80020dc>
10002dc4:	d8803317 	ldw	r2,204(sp)
10002dc8:	143fffc4 	addi	r16,r2,-1
10002dcc:	043f4d0e 	bge	zero,r16,10002b04 <__alt_data_end+0xf8002b04>
10002dd0:	07000404 	movi	fp,16
10002dd4:	e400810e 	bge	fp,r16,10002fdc <___vfprintf_internal_r+0x165c>
10002dd8:	01440074 	movhi	r5,4097
10002ddc:	29466c84 	addi	r5,r5,6578
10002de0:	d9402c15 	stw	r5,176(sp)
10002de4:	01c001c4 	movi	r7,7
10002de8:	dcc02d17 	ldw	r19,180(sp)
10002dec:	00000306 	br	10002dfc <___vfprintf_internal_r+0x147c>
10002df0:	b5800204 	addi	r22,r22,8
10002df4:	843ffc04 	addi	r16,r16,-16
10002df8:	e4007b0e 	bge	fp,r16,10002fe8 <___vfprintf_internal_r+0x1668>
10002dfc:	18c00404 	addi	r3,r3,16
10002e00:	8c400044 	addi	r17,r17,1
10002e04:	b5000015 	stw	r20,0(r22)
10002e08:	b7000115 	stw	fp,4(r22)
10002e0c:	d8c02015 	stw	r3,128(sp)
10002e10:	dc401f15 	stw	r17,124(sp)
10002e14:	3c7ff60e 	bge	r7,r17,10002df0 <__alt_data_end+0xf8002df0>
10002e18:	d9801e04 	addi	r6,sp,120
10002e1c:	b80b883a 	mov	r5,r23
10002e20:	9809883a 	mov	r4,r19
10002e24:	d9c03c15 	stw	r7,240(sp)
10002e28:	00088800 	call	10008880 <__sprint_r>
10002e2c:	d9c03c17 	ldw	r7,240(sp)
10002e30:	103bd71e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002e34:	d8c02017 	ldw	r3,128(sp)
10002e38:	dc401f17 	ldw	r17,124(sp)
10002e3c:	dd800404 	addi	r22,sp,16
10002e40:	003fec06 	br	10002df4 <__alt_data_end+0xf8002df4>
10002e44:	9080100c 	andi	r2,r18,64
10002e48:	d8002785 	stb	zero,158(sp)
10002e4c:	10010e26 	beq	r2,zero,10003288 <___vfprintf_internal_r+0x1908>
10002e50:	d9402e17 	ldw	r5,184(sp)
10002e54:	d8c02a17 	ldw	r3,168(sp)
10002e58:	002d883a 	mov	r22,zero
10002e5c:	28800104 	addi	r2,r5,4
10002e60:	2cc0000b 	ldhu	r19,0(r5)
10002e64:	183fc90e 	bge	r3,zero,10002d8c <__alt_data_end+0xf8002d8c>
10002e68:	d8802e15 	stw	r2,184(sp)
10002e6c:	0039883a 	mov	fp,zero
10002e70:	9d84b03a 	or	r2,r19,r22
10002e74:	103c1e1e 	bne	r2,zero,10001ef0 <__alt_data_end+0xf8001ef0>
10002e78:	00800044 	movi	r2,1
10002e7c:	003e6c06 	br	10002830 <__alt_data_end+0xf8002830>
10002e80:	d9002d17 	ldw	r4,180(sp)
10002e84:	d9801e04 	addi	r6,sp,120
10002e88:	b80b883a 	mov	r5,r23
10002e8c:	00088800 	call	10008880 <__sprint_r>
10002e90:	103bbf1e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002e94:	d8c02017 	ldw	r3,128(sp)
10002e98:	da000404 	addi	r8,sp,16
10002e9c:	d9003217 	ldw	r4,200(sp)
10002ea0:	d8802617 	ldw	r2,152(sp)
10002ea4:	d9403317 	ldw	r5,204(sp)
10002ea8:	8123883a 	add	r17,r16,r4
10002eac:	11400216 	blt	r2,r5,10002eb8 <___vfprintf_internal_r+0x1538>
10002eb0:	9100004c 	andi	r4,r18,1
10002eb4:	20000d26 	beq	r4,zero,10002eec <___vfprintf_internal_r+0x156c>
10002eb8:	d9003717 	ldw	r4,220(sp)
10002ebc:	d9403417 	ldw	r5,208(sp)
10002ec0:	1907883a 	add	r3,r3,r4
10002ec4:	d9001f17 	ldw	r4,124(sp)
10002ec8:	41400015 	stw	r5,0(r8)
10002ecc:	d9403717 	ldw	r5,220(sp)
10002ed0:	21000044 	addi	r4,r4,1
10002ed4:	d8c02015 	stw	r3,128(sp)
10002ed8:	41400115 	stw	r5,4(r8)
10002edc:	d9001f15 	stw	r4,124(sp)
10002ee0:	014001c4 	movi	r5,7
10002ee4:	2901e816 	blt	r5,r4,10003688 <___vfprintf_internal_r+0x1d08>
10002ee8:	42000204 	addi	r8,r8,8
10002eec:	d9003317 	ldw	r4,204(sp)
10002ef0:	8121883a 	add	r16,r16,r4
10002ef4:	2085c83a 	sub	r2,r4,r2
10002ef8:	8461c83a 	sub	r16,r16,r17
10002efc:	1400010e 	bge	r2,r16,10002f04 <___vfprintf_internal_r+0x1584>
10002f00:	1021883a 	mov	r16,r2
10002f04:	04000a0e 	bge	zero,r16,10002f30 <___vfprintf_internal_r+0x15b0>
10002f08:	d9001f17 	ldw	r4,124(sp)
10002f0c:	1c07883a 	add	r3,r3,r16
10002f10:	44400015 	stw	r17,0(r8)
10002f14:	21000044 	addi	r4,r4,1
10002f18:	44000115 	stw	r16,4(r8)
10002f1c:	d8c02015 	stw	r3,128(sp)
10002f20:	d9001f15 	stw	r4,124(sp)
10002f24:	014001c4 	movi	r5,7
10002f28:	2901fb16 	blt	r5,r4,10003718 <___vfprintf_internal_r+0x1d98>
10002f2c:	42000204 	addi	r8,r8,8
10002f30:	8001f716 	blt	r16,zero,10003710 <___vfprintf_internal_r+0x1d90>
10002f34:	1421c83a 	sub	r16,r2,r16
10002f38:	043d160e 	bge	zero,r16,10002394 <__alt_data_end+0xf8002394>
10002f3c:	04400404 	movi	r17,16
10002f40:	d8801f17 	ldw	r2,124(sp)
10002f44:	8c3efb0e 	bge	r17,r16,10002b34 <__alt_data_end+0xf8002b34>
10002f48:	01440074 	movhi	r5,4097
10002f4c:	29466c84 	addi	r5,r5,6578
10002f50:	d9402c15 	stw	r5,176(sp)
10002f54:	058001c4 	movi	r22,7
10002f58:	dcc02d17 	ldw	r19,180(sp)
10002f5c:	00000306 	br	10002f6c <___vfprintf_internal_r+0x15ec>
10002f60:	42000204 	addi	r8,r8,8
10002f64:	843ffc04 	addi	r16,r16,-16
10002f68:	8c3ef50e 	bge	r17,r16,10002b40 <__alt_data_end+0xf8002b40>
10002f6c:	18c00404 	addi	r3,r3,16
10002f70:	10800044 	addi	r2,r2,1
10002f74:	45000015 	stw	r20,0(r8)
10002f78:	44400115 	stw	r17,4(r8)
10002f7c:	d8c02015 	stw	r3,128(sp)
10002f80:	d8801f15 	stw	r2,124(sp)
10002f84:	b0bff60e 	bge	r22,r2,10002f60 <__alt_data_end+0xf8002f60>
10002f88:	d9801e04 	addi	r6,sp,120
10002f8c:	b80b883a 	mov	r5,r23
10002f90:	9809883a 	mov	r4,r19
10002f94:	00088800 	call	10008880 <__sprint_r>
10002f98:	103b7d1e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10002f9c:	d8c02017 	ldw	r3,128(sp)
10002fa0:	d8801f17 	ldw	r2,124(sp)
10002fa4:	da000404 	addi	r8,sp,16
10002fa8:	003fee06 	br	10002f64 <__alt_data_end+0xf8002f64>
10002fac:	9088703a 	and	r4,r18,r2
10002fb0:	203eab1e 	bne	r4,zero,10002a60 <__alt_data_end+0xf8002a60>
10002fb4:	dc401f17 	ldw	r17,124(sp)
10002fb8:	40800115 	stw	r2,4(r8)
10002fbc:	44000015 	stw	r16,0(r8)
10002fc0:	8c400044 	addi	r17,r17,1
10002fc4:	d8c02015 	stw	r3,128(sp)
10002fc8:	dc401f15 	stw	r17,124(sp)
10002fcc:	008001c4 	movi	r2,7
10002fd0:	14400e16 	blt	r2,r17,1000300c <___vfprintf_internal_r+0x168c>
10002fd4:	45800204 	addi	r22,r8,8
10002fd8:	003eca06 	br	10002b04 <__alt_data_end+0xf8002b04>
10002fdc:	01040074 	movhi	r4,4097
10002fe0:	21066c84 	addi	r4,r4,6578
10002fe4:	d9002c15 	stw	r4,176(sp)
10002fe8:	d8802c17 	ldw	r2,176(sp)
10002fec:	1c07883a 	add	r3,r3,r16
10002ff0:	8c400044 	addi	r17,r17,1
10002ff4:	b0800015 	stw	r2,0(r22)
10002ff8:	b4000115 	stw	r16,4(r22)
10002ffc:	d8c02015 	stw	r3,128(sp)
10003000:	dc401f15 	stw	r17,124(sp)
10003004:	008001c4 	movi	r2,7
10003008:	147ebd0e 	bge	r2,r17,10002b00 <__alt_data_end+0xf8002b00>
1000300c:	d9002d17 	ldw	r4,180(sp)
10003010:	d9801e04 	addi	r6,sp,120
10003014:	b80b883a 	mov	r5,r23
10003018:	00088800 	call	10008880 <__sprint_r>
1000301c:	103b5c1e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10003020:	d8c02017 	ldw	r3,128(sp)
10003024:	dc401f17 	ldw	r17,124(sp)
10003028:	dd800404 	addi	r22,sp,16
1000302c:	003eb506 	br	10002b04 <__alt_data_end+0xf8002b04>
10003030:	d9002d17 	ldw	r4,180(sp)
10003034:	d9801e04 	addi	r6,sp,120
10003038:	b80b883a 	mov	r5,r23
1000303c:	00088800 	call	10008880 <__sprint_r>
10003040:	103b531e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10003044:	d8c02017 	ldw	r3,128(sp)
10003048:	dc401f17 	ldw	r17,124(sp)
1000304c:	da000404 	addi	r8,sp,16
10003050:	003e8d06 	br	10002a88 <__alt_data_end+0xf8002a88>
10003054:	d9002d17 	ldw	r4,180(sp)
10003058:	d9801e04 	addi	r6,sp,120
1000305c:	b80b883a 	mov	r5,r23
10003060:	00088800 	call	10008880 <__sprint_r>
10003064:	103b4a1e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10003068:	d8c02017 	ldw	r3,128(sp)
1000306c:	dc401f17 	ldw	r17,124(sp)
10003070:	dd800404 	addi	r22,sp,16
10003074:	003e8f06 	br	10002ab4 <__alt_data_end+0xf8002ab4>
10003078:	0027883a 	mov	r19,zero
1000307c:	003f4a06 	br	10002da8 <__alt_data_end+0xf8002da8>
10003080:	d9002d17 	ldw	r4,180(sp)
10003084:	d9801e04 	addi	r6,sp,120
10003088:	b80b883a 	mov	r5,r23
1000308c:	00088800 	call	10008880 <__sprint_r>
10003090:	103b3f1e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10003094:	d8c02017 	ldw	r3,128(sp)
10003098:	da000404 	addi	r8,sp,16
1000309c:	003c7b06 	br	1000228c <__alt_data_end+0xf800228c>
100030a0:	d9402a17 	ldw	r5,168(sp)
100030a4:	04e7c83a 	sub	r19,zero,r19
100030a8:	07000b44 	movi	fp,45
100030ac:	9804c03a 	cmpne	r2,r19,zero
100030b0:	05adc83a 	sub	r22,zero,r22
100030b4:	df002785 	stb	fp,158(sp)
100030b8:	b0adc83a 	sub	r22,r22,r2
100030bc:	28017b16 	blt	r5,zero,100036ac <___vfprintf_internal_r+0x1d2c>
100030c0:	00bfdfc4 	movi	r2,-129
100030c4:	90a4703a 	and	r18,r18,r2
100030c8:	003b8906 	br	10001ef0 <__alt_data_end+0xf8001ef0>
100030cc:	d9003617 	ldw	r4,216(sp)
100030d0:	d9403817 	ldw	r5,224(sp)
100030d4:	da003d15 	stw	r8,244(sp)
100030d8:	000840c0 	call	1000840c <__fpclassifyd>
100030dc:	da003d17 	ldw	r8,244(sp)
100030e0:	1000f026 	beq	r2,zero,100034a4 <___vfprintf_internal_r+0x1b24>
100030e4:	d9002a17 	ldw	r4,168(sp)
100030e8:	05bff7c4 	movi	r22,-33
100030ec:	00bfffc4 	movi	r2,-1
100030f0:	8dac703a 	and	r22,r17,r22
100030f4:	20820026 	beq	r4,r2,100038f8 <___vfprintf_internal_r+0x1f78>
100030f8:	008011c4 	movi	r2,71
100030fc:	b081f726 	beq	r22,r2,100038dc <___vfprintf_internal_r+0x1f5c>
10003100:	d9003817 	ldw	r4,224(sp)
10003104:	90c04014 	ori	r3,r18,256
10003108:	d8c02c15 	stw	r3,176(sp)
1000310c:	20021516 	blt	r4,zero,10003964 <___vfprintf_internal_r+0x1fe4>
10003110:	dcc03817 	ldw	r19,224(sp)
10003114:	d8002905 	stb	zero,164(sp)
10003118:	00801984 	movi	r2,102
1000311c:	8881f926 	beq	r17,r2,10003904 <___vfprintf_internal_r+0x1f84>
10003120:	00801184 	movi	r2,70
10003124:	88821c26 	beq	r17,r2,10003998 <___vfprintf_internal_r+0x2018>
10003128:	00801144 	movi	r2,69
1000312c:	b081ef26 	beq	r22,r2,100038ec <___vfprintf_internal_r+0x1f6c>
10003130:	d8c02a17 	ldw	r3,168(sp)
10003134:	d8802104 	addi	r2,sp,132
10003138:	d8800315 	stw	r2,12(sp)
1000313c:	d9403617 	ldw	r5,216(sp)
10003140:	d8802504 	addi	r2,sp,148
10003144:	d9002d17 	ldw	r4,180(sp)
10003148:	d8800215 	stw	r2,8(sp)
1000314c:	d8802604 	addi	r2,sp,152
10003150:	d8c00015 	stw	r3,0(sp)
10003154:	d8800115 	stw	r2,4(sp)
10003158:	01c00084 	movi	r7,2
1000315c:	980d883a 	mov	r6,r19
10003160:	d8c03c15 	stw	r3,240(sp)
10003164:	da003d15 	stw	r8,244(sp)
10003168:	00040b00 	call	100040b0 <_dtoa_r>
1000316c:	1021883a 	mov	r16,r2
10003170:	008019c4 	movi	r2,103
10003174:	d8c03c17 	ldw	r3,240(sp)
10003178:	da003d17 	ldw	r8,244(sp)
1000317c:	88817126 	beq	r17,r2,10003744 <___vfprintf_internal_r+0x1dc4>
10003180:	008011c4 	movi	r2,71
10003184:	88829126 	beq	r17,r2,10003bcc <___vfprintf_internal_r+0x224c>
10003188:	80f9883a 	add	fp,r16,r3
1000318c:	d9003617 	ldw	r4,216(sp)
10003190:	000d883a 	mov	r6,zero
10003194:	000f883a 	mov	r7,zero
10003198:	980b883a 	mov	r5,r19
1000319c:	da003d15 	stw	r8,244(sp)
100031a0:	000d3400 	call	1000d340 <__eqdf2>
100031a4:	da003d17 	ldw	r8,244(sp)
100031a8:	10018d26 	beq	r2,zero,100037e0 <___vfprintf_internal_r+0x1e60>
100031ac:	d8802117 	ldw	r2,132(sp)
100031b0:	1700062e 	bgeu	r2,fp,100031cc <___vfprintf_internal_r+0x184c>
100031b4:	01000c04 	movi	r4,48
100031b8:	10c00044 	addi	r3,r2,1
100031bc:	d8c02115 	stw	r3,132(sp)
100031c0:	11000005 	stb	r4,0(r2)
100031c4:	d8802117 	ldw	r2,132(sp)
100031c8:	173ffb36 	bltu	r2,fp,100031b8 <__alt_data_end+0xf80031b8>
100031cc:	1405c83a 	sub	r2,r2,r16
100031d0:	d8803315 	stw	r2,204(sp)
100031d4:	008011c4 	movi	r2,71
100031d8:	b0817626 	beq	r22,r2,100037b4 <___vfprintf_internal_r+0x1e34>
100031dc:	00801944 	movi	r2,101
100031e0:	1442800e 	bge	r2,r17,10003be4 <___vfprintf_internal_r+0x2264>
100031e4:	d8c02617 	ldw	r3,152(sp)
100031e8:	00801984 	movi	r2,102
100031ec:	d8c03215 	stw	r3,200(sp)
100031f0:	8881fe26 	beq	r17,r2,100039ec <___vfprintf_internal_r+0x206c>
100031f4:	d8c03217 	ldw	r3,200(sp)
100031f8:	d9003317 	ldw	r4,204(sp)
100031fc:	1901dd16 	blt	r3,r4,10003974 <___vfprintf_internal_r+0x1ff4>
10003200:	9480004c 	andi	r18,r18,1
10003204:	90022b1e 	bne	r18,zero,10003ab4 <___vfprintf_internal_r+0x2134>
10003208:	1805883a 	mov	r2,r3
1000320c:	18028316 	blt	r3,zero,10003c1c <___vfprintf_internal_r+0x229c>
10003210:	d8c03217 	ldw	r3,200(sp)
10003214:	044019c4 	movi	r17,103
10003218:	d8c02b15 	stw	r3,172(sp)
1000321c:	df002907 	ldb	fp,164(sp)
10003220:	e001531e 	bne	fp,zero,10003770 <___vfprintf_internal_r+0x1df0>
10003224:	df002783 	ldbu	fp,158(sp)
10003228:	d8802915 	stw	r2,164(sp)
1000322c:	dc802c17 	ldw	r18,176(sp)
10003230:	d8002a15 	stw	zero,168(sp)
10003234:	003baf06 	br	100020f4 <__alt_data_end+0xf80020f4>
10003238:	d8c02e17 	ldw	r3,184(sp)
1000323c:	d9002e17 	ldw	r4,184(sp)
10003240:	d9402e17 	ldw	r5,184(sp)
10003244:	18c00017 	ldw	r3,0(r3)
10003248:	21000117 	ldw	r4,4(r4)
1000324c:	29400204 	addi	r5,r5,8
10003250:	d8c03615 	stw	r3,216(sp)
10003254:	d9003815 	stw	r4,224(sp)
10003258:	d9402e15 	stw	r5,184(sp)
1000325c:	003b5006 	br	10001fa0 <__alt_data_end+0xf8001fa0>
10003260:	ac400007 	ldb	r17,0(r21)
10003264:	003a2806 	br	10001b08 <__alt_data_end+0xf8001b08>
10003268:	9080100c 	andi	r2,r18,64
1000326c:	1000a826 	beq	r2,zero,10003510 <___vfprintf_internal_r+0x1b90>
10003270:	d8c02e17 	ldw	r3,184(sp)
10003274:	002d883a 	mov	r22,zero
10003278:	1cc0000b 	ldhu	r19,0(r3)
1000327c:	18c00104 	addi	r3,r3,4
10003280:	d8c02e15 	stw	r3,184(sp)
10003284:	003caf06 	br	10002544 <__alt_data_end+0xf8002544>
10003288:	d9002e17 	ldw	r4,184(sp)
1000328c:	d9402a17 	ldw	r5,168(sp)
10003290:	002d883a 	mov	r22,zero
10003294:	20800104 	addi	r2,r4,4
10003298:	24c00017 	ldw	r19,0(r4)
1000329c:	283ebb0e 	bge	r5,zero,10002d8c <__alt_data_end+0xf8002d8c>
100032a0:	003ef106 	br	10002e68 <__alt_data_end+0xf8002e68>
100032a4:	9080040c 	andi	r2,r18,16
100032a8:	1000921e 	bne	r2,zero,100034f4 <___vfprintf_internal_r+0x1b74>
100032ac:	9480100c 	andi	r18,r18,64
100032b0:	90013926 	beq	r18,zero,10003798 <___vfprintf_internal_r+0x1e18>
100032b4:	d9402e17 	ldw	r5,184(sp)
100032b8:	d8c02f17 	ldw	r3,188(sp)
100032bc:	28800017 	ldw	r2,0(r5)
100032c0:	29400104 	addi	r5,r5,4
100032c4:	d9402e15 	stw	r5,184(sp)
100032c8:	10c0000d 	sth	r3,0(r2)
100032cc:	0039e406 	br	10001a60 <__alt_data_end+0xf8001a60>
100032d0:	9080100c 	andi	r2,r18,64
100032d4:	10008026 	beq	r2,zero,100034d8 <___vfprintf_internal_r+0x1b58>
100032d8:	d8802e17 	ldw	r2,184(sp)
100032dc:	14c0000f 	ldh	r19,0(r2)
100032e0:	10800104 	addi	r2,r2,4
100032e4:	d8802e15 	stw	r2,184(sp)
100032e8:	982dd7fa 	srai	r22,r19,31
100032ec:	b005883a 	mov	r2,r22
100032f0:	003af706 	br	10001ed0 <__alt_data_end+0xf8001ed0>
100032f4:	9080100c 	andi	r2,r18,64
100032f8:	d8002785 	stb	zero,158(sp)
100032fc:	10008a1e 	bne	r2,zero,10003528 <___vfprintf_internal_r+0x1ba8>
10003300:	d9002e17 	ldw	r4,184(sp)
10003304:	d9402a17 	ldw	r5,168(sp)
10003308:	002d883a 	mov	r22,zero
1000330c:	20800104 	addi	r2,r4,4
10003310:	24c00017 	ldw	r19,0(r4)
10003314:	283e4b0e 	bge	r5,zero,10002c44 <__alt_data_end+0xf8002c44>
10003318:	9d86b03a 	or	r3,r19,r22
1000331c:	d8802e15 	stw	r2,184(sp)
10003320:	183e4c1e 	bne	r3,zero,10002c54 <__alt_data_end+0xf8002c54>
10003324:	0039883a 	mov	fp,zero
10003328:	0005883a 	mov	r2,zero
1000332c:	003d4006 	br	10002830 <__alt_data_end+0xf8002830>
10003330:	01440074 	movhi	r5,4097
10003334:	29466c84 	addi	r5,r5,6578
10003338:	d9402c15 	stw	r5,176(sp)
1000333c:	d9402c17 	ldw	r5,176(sp)
10003340:	1c47883a 	add	r3,r3,r17
10003344:	10800044 	addi	r2,r2,1
10003348:	41400015 	stw	r5,0(r8)
1000334c:	44400115 	stw	r17,4(r8)
10003350:	d8c02015 	stw	r3,128(sp)
10003354:	d8801f15 	stw	r2,124(sp)
10003358:	010001c4 	movi	r4,7
1000335c:	20bec816 	blt	r4,r2,10002e80 <__alt_data_end+0xf8002e80>
10003360:	42000204 	addi	r8,r8,8
10003364:	003ecd06 	br	10002e9c <__alt_data_end+0xf8002e9c>
10003368:	d9002a17 	ldw	r4,168(sp)
1000336c:	d8002785 	stb	zero,158(sp)
10003370:	203d2d16 	blt	r4,zero,10002828 <__alt_data_end+0xf8002828>
10003374:	00bfdfc4 	movi	r2,-129
10003378:	90a4703a 	and	r18,r18,r2
1000337c:	003a6106 	br	10001d04 <__alt_data_end+0xf8001d04>
10003380:	01040074 	movhi	r4,4097
10003384:	21066c84 	addi	r4,r4,6578
10003388:	d9002c15 	stw	r4,176(sp)
1000338c:	003bea06 	br	10002338 <__alt_data_end+0xf8002338>
10003390:	d9002d17 	ldw	r4,180(sp)
10003394:	d9801e04 	addi	r6,sp,120
10003398:	b80b883a 	mov	r5,r23
1000339c:	00088800 	call	10008880 <__sprint_r>
100033a0:	103a7b1e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
100033a4:	d8c02017 	ldw	r3,128(sp)
100033a8:	da000404 	addi	r8,sp,16
100033ac:	003d4106 	br	100028b4 <__alt_data_end+0xf80028b4>
100033b0:	d8801f17 	ldw	r2,124(sp)
100033b4:	01440074 	movhi	r5,4097
100033b8:	01000044 	movi	r4,1
100033bc:	18c00044 	addi	r3,r3,1
100033c0:	10800044 	addi	r2,r2,1
100033c4:	29466c04 	addi	r5,r5,6576
100033c8:	41000115 	stw	r4,4(r8)
100033cc:	41400015 	stw	r5,0(r8)
100033d0:	d8c02015 	stw	r3,128(sp)
100033d4:	d8801f15 	stw	r2,124(sp)
100033d8:	010001c4 	movi	r4,7
100033dc:	20805c16 	blt	r4,r2,10003550 <___vfprintf_internal_r+0x1bd0>
100033e0:	42000204 	addi	r8,r8,8
100033e4:	8800041e 	bne	r17,zero,100033f8 <___vfprintf_internal_r+0x1a78>
100033e8:	d8803317 	ldw	r2,204(sp)
100033ec:	1000021e 	bne	r2,zero,100033f8 <___vfprintf_internal_r+0x1a78>
100033f0:	9080004c 	andi	r2,r18,1
100033f4:	103be726 	beq	r2,zero,10002394 <__alt_data_end+0xf8002394>
100033f8:	d9003717 	ldw	r4,220(sp)
100033fc:	d8801f17 	ldw	r2,124(sp)
10003400:	d9403417 	ldw	r5,208(sp)
10003404:	20c7883a 	add	r3,r4,r3
10003408:	10800044 	addi	r2,r2,1
1000340c:	41000115 	stw	r4,4(r8)
10003410:	41400015 	stw	r5,0(r8)
10003414:	d8c02015 	stw	r3,128(sp)
10003418:	d8801f15 	stw	r2,124(sp)
1000341c:	010001c4 	movi	r4,7
10003420:	20812116 	blt	r4,r2,100038a8 <___vfprintf_internal_r+0x1f28>
10003424:	42000204 	addi	r8,r8,8
10003428:	0463c83a 	sub	r17,zero,r17
1000342c:	0440730e 	bge	zero,r17,100035fc <___vfprintf_internal_r+0x1c7c>
10003430:	05800404 	movi	r22,16
10003434:	b440860e 	bge	r22,r17,10003650 <___vfprintf_internal_r+0x1cd0>
10003438:	01440074 	movhi	r5,4097
1000343c:	29466c84 	addi	r5,r5,6578
10003440:	d9402c15 	stw	r5,176(sp)
10003444:	070001c4 	movi	fp,7
10003448:	dcc02d17 	ldw	r19,180(sp)
1000344c:	00000306 	br	1000345c <___vfprintf_internal_r+0x1adc>
10003450:	42000204 	addi	r8,r8,8
10003454:	8c7ffc04 	addi	r17,r17,-16
10003458:	b440800e 	bge	r22,r17,1000365c <___vfprintf_internal_r+0x1cdc>
1000345c:	18c00404 	addi	r3,r3,16
10003460:	10800044 	addi	r2,r2,1
10003464:	45000015 	stw	r20,0(r8)
10003468:	45800115 	stw	r22,4(r8)
1000346c:	d8c02015 	stw	r3,128(sp)
10003470:	d8801f15 	stw	r2,124(sp)
10003474:	e0bff60e 	bge	fp,r2,10003450 <__alt_data_end+0xf8003450>
10003478:	d9801e04 	addi	r6,sp,120
1000347c:	b80b883a 	mov	r5,r23
10003480:	9809883a 	mov	r4,r19
10003484:	00088800 	call	10008880 <__sprint_r>
10003488:	103a411e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
1000348c:	d8c02017 	ldw	r3,128(sp)
10003490:	d8801f17 	ldw	r2,124(sp)
10003494:	da000404 	addi	r8,sp,16
10003498:	003fee06 	br	10003454 <__alt_data_end+0xf8003454>
1000349c:	00bfffc4 	movi	r2,-1
100034a0:	003a3f06 	br	10001da0 <__alt_data_end+0xf8001da0>
100034a4:	008011c4 	movi	r2,71
100034a8:	1440b816 	blt	r2,r17,1000378c <___vfprintf_internal_r+0x1e0c>
100034ac:	04040074 	movhi	r16,4097
100034b0:	84065e04 	addi	r16,r16,6520
100034b4:	00c000c4 	movi	r3,3
100034b8:	00bfdfc4 	movi	r2,-129
100034bc:	d8c02915 	stw	r3,164(sp)
100034c0:	90a4703a 	and	r18,r18,r2
100034c4:	df002783 	ldbu	fp,158(sp)
100034c8:	d8c02b15 	stw	r3,172(sp)
100034cc:	d8002a15 	stw	zero,168(sp)
100034d0:	d8003215 	stw	zero,200(sp)
100034d4:	003b0706 	br	100020f4 <__alt_data_end+0xf80020f4>
100034d8:	d8c02e17 	ldw	r3,184(sp)
100034dc:	1cc00017 	ldw	r19,0(r3)
100034e0:	18c00104 	addi	r3,r3,4
100034e4:	d8c02e15 	stw	r3,184(sp)
100034e8:	982dd7fa 	srai	r22,r19,31
100034ec:	b005883a 	mov	r2,r22
100034f0:	003a7706 	br	10001ed0 <__alt_data_end+0xf8001ed0>
100034f4:	d8c02e17 	ldw	r3,184(sp)
100034f8:	d9002f17 	ldw	r4,188(sp)
100034fc:	18800017 	ldw	r2,0(r3)
10003500:	18c00104 	addi	r3,r3,4
10003504:	d8c02e15 	stw	r3,184(sp)
10003508:	11000015 	stw	r4,0(r2)
1000350c:	00395406 	br	10001a60 <__alt_data_end+0xf8001a60>
10003510:	d9002e17 	ldw	r4,184(sp)
10003514:	002d883a 	mov	r22,zero
10003518:	24c00017 	ldw	r19,0(r4)
1000351c:	21000104 	addi	r4,r4,4
10003520:	d9002e15 	stw	r4,184(sp)
10003524:	003c0706 	br	10002544 <__alt_data_end+0xf8002544>
10003528:	d9402e17 	ldw	r5,184(sp)
1000352c:	d8c02a17 	ldw	r3,168(sp)
10003530:	002d883a 	mov	r22,zero
10003534:	28800104 	addi	r2,r5,4
10003538:	2cc0000b 	ldhu	r19,0(r5)
1000353c:	183dc10e 	bge	r3,zero,10002c44 <__alt_data_end+0xf8002c44>
10003540:	003f7506 	br	10003318 <__alt_data_end+0xf8003318>
10003544:	04040074 	movhi	r16,4097
10003548:	84065c04 	addi	r16,r16,6512
1000354c:	003aa706 	br	10001fec <__alt_data_end+0xf8001fec>
10003550:	d9002d17 	ldw	r4,180(sp)
10003554:	d9801e04 	addi	r6,sp,120
10003558:	b80b883a 	mov	r5,r23
1000355c:	00088800 	call	10008880 <__sprint_r>
10003560:	103a0b1e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10003564:	dc402617 	ldw	r17,152(sp)
10003568:	d8c02017 	ldw	r3,128(sp)
1000356c:	da000404 	addi	r8,sp,16
10003570:	003f9c06 	br	100033e4 <__alt_data_end+0xf80033e4>
10003574:	ac400043 	ldbu	r17,1(r21)
10003578:	84000814 	ori	r16,r16,32
1000357c:	ad400044 	addi	r21,r21,1
10003580:	8c403fcc 	andi	r17,r17,255
10003584:	8c40201c 	xori	r17,r17,128
10003588:	8c7fe004 	addi	r17,r17,-128
1000358c:	00395e06 	br	10001b08 <__alt_data_end+0xf8001b08>
10003590:	d8c02e15 	stw	r3,184(sp)
10003594:	0039883a 	mov	fp,zero
10003598:	003e3506 	br	10002e70 <__alt_data_end+0xf8002e70>
1000359c:	d9002d17 	ldw	r4,180(sp)
100035a0:	d9801e04 	addi	r6,sp,120
100035a4:	b80b883a 	mov	r5,r23
100035a8:	00088800 	call	10008880 <__sprint_r>
100035ac:	1039f81e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
100035b0:	d8c02017 	ldw	r3,128(sp)
100035b4:	da000404 	addi	r8,sp,16
100035b8:	003cd006 	br	100028fc <__alt_data_end+0xf80028fc>
100035bc:	8009883a 	mov	r4,r16
100035c0:	df003d15 	stw	fp,244(sp)
100035c4:	00086ec0 	call	100086ec <strlen>
100035c8:	d8802b15 	stw	r2,172(sp)
100035cc:	da003d17 	ldw	r8,244(sp)
100035d0:	103c200e 	bge	r2,zero,10002654 <__alt_data_end+0xf8002654>
100035d4:	0005883a 	mov	r2,zero
100035d8:	003c1e06 	br	10002654 <__alt_data_end+0xf8002654>
100035dc:	d9002d17 	ldw	r4,180(sp)
100035e0:	d9801e04 	addi	r6,sp,120
100035e4:	b80b883a 	mov	r5,r23
100035e8:	00088800 	call	10008880 <__sprint_r>
100035ec:	1039e81e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
100035f0:	d8c02017 	ldw	r3,128(sp)
100035f4:	d8801f17 	ldw	r2,124(sp)
100035f8:	da000404 	addi	r8,sp,16
100035fc:	d9403317 	ldw	r5,204(sp)
10003600:	10800044 	addi	r2,r2,1
10003604:	44000015 	stw	r16,0(r8)
10003608:	28c7883a 	add	r3,r5,r3
1000360c:	003b5b06 	br	1000237c <__alt_data_end+0xf800237c>
10003610:	01040074 	movhi	r4,4097
10003614:	21067084 	addi	r4,r4,6594
10003618:	d9003515 	stw	r4,212(sp)
1000361c:	003af206 	br	100021e8 <__alt_data_end+0xf80021e8>
10003620:	013fffc4 	movi	r4,-1
10003624:	003a0806 	br	10001e48 <__alt_data_end+0xf8001e48>
10003628:	0023883a 	mov	r17,zero
1000362c:	003d9d06 	br	10002ca4 <__alt_data_end+0xf8002ca4>
10003630:	d9002d17 	ldw	r4,180(sp)
10003634:	d9801e04 	addi	r6,sp,120
10003638:	b80b883a 	mov	r5,r23
1000363c:	00088800 	call	10008880 <__sprint_r>
10003640:	1039d31e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
10003644:	d8c02017 	ldw	r3,128(sp)
10003648:	da000404 	addi	r8,sp,16
1000364c:	003d9406 	br	10002ca0 <__alt_data_end+0xf8002ca0>
10003650:	01040074 	movhi	r4,4097
10003654:	21066c84 	addi	r4,r4,6578
10003658:	d9002c15 	stw	r4,176(sp)
1000365c:	d9002c17 	ldw	r4,176(sp)
10003660:	1c47883a 	add	r3,r3,r17
10003664:	10800044 	addi	r2,r2,1
10003668:	41000015 	stw	r4,0(r8)
1000366c:	44400115 	stw	r17,4(r8)
10003670:	d8c02015 	stw	r3,128(sp)
10003674:	d8801f15 	stw	r2,124(sp)
10003678:	010001c4 	movi	r4,7
1000367c:	20bfd716 	blt	r4,r2,100035dc <__alt_data_end+0xf80035dc>
10003680:	42000204 	addi	r8,r8,8
10003684:	003fdd06 	br	100035fc <__alt_data_end+0xf80035fc>
10003688:	d9002d17 	ldw	r4,180(sp)
1000368c:	d9801e04 	addi	r6,sp,120
10003690:	b80b883a 	mov	r5,r23
10003694:	00088800 	call	10008880 <__sprint_r>
10003698:	1039bd1e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
1000369c:	d8802617 	ldw	r2,152(sp)
100036a0:	d8c02017 	ldw	r3,128(sp)
100036a4:	da000404 	addi	r8,sp,16
100036a8:	003e1006 	br	10002eec <__alt_data_end+0xf8002eec>
100036ac:	00800044 	movi	r2,1
100036b0:	10803fcc 	andi	r2,r2,255
100036b4:	00c00044 	movi	r3,1
100036b8:	10fa0d26 	beq	r2,r3,10001ef0 <__alt_data_end+0xf8001ef0>
100036bc:	00c00084 	movi	r3,2
100036c0:	10fbaf26 	beq	r2,r3,10002580 <__alt_data_end+0xf8002580>
100036c4:	003a6d06 	br	1000207c <__alt_data_end+0xf800207c>
100036c8:	01040074 	movhi	r4,4097
100036cc:	21067084 	addi	r4,r4,6594
100036d0:	d9003515 	stw	r4,212(sp)
100036d4:	003b5406 	br	10002428 <__alt_data_end+0xf8002428>
100036d8:	d8802a17 	ldw	r2,168(sp)
100036dc:	00c00184 	movi	r3,6
100036e0:	1880012e 	bgeu	r3,r2,100036e8 <___vfprintf_internal_r+0x1d68>
100036e4:	1805883a 	mov	r2,r3
100036e8:	d8802b15 	stw	r2,172(sp)
100036ec:	1000ef16 	blt	r2,zero,10003aac <___vfprintf_internal_r+0x212c>
100036f0:	04040074 	movhi	r16,4097
100036f4:	d8802915 	stw	r2,164(sp)
100036f8:	dcc02e15 	stw	r19,184(sp)
100036fc:	d8002a15 	stw	zero,168(sp)
10003700:	d8003215 	stw	zero,200(sp)
10003704:	84066a04 	addi	r16,r16,6568
10003708:	0039883a 	mov	fp,zero
1000370c:	003a8006 	br	10002110 <__alt_data_end+0xf8002110>
10003710:	0021883a 	mov	r16,zero
10003714:	003e0706 	br	10002f34 <__alt_data_end+0xf8002f34>
10003718:	d9002d17 	ldw	r4,180(sp)
1000371c:	d9801e04 	addi	r6,sp,120
10003720:	b80b883a 	mov	r5,r23
10003724:	00088800 	call	10008880 <__sprint_r>
10003728:	1039991e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
1000372c:	d8802617 	ldw	r2,152(sp)
10003730:	d9403317 	ldw	r5,204(sp)
10003734:	d8c02017 	ldw	r3,128(sp)
10003738:	da000404 	addi	r8,sp,16
1000373c:	2885c83a 	sub	r2,r5,r2
10003740:	003dfb06 	br	10002f30 <__alt_data_end+0xf8002f30>
10003744:	9080004c 	andi	r2,r18,1
10003748:	103e8f1e 	bne	r2,zero,10003188 <__alt_data_end+0xf8003188>
1000374c:	d8802117 	ldw	r2,132(sp)
10003750:	003e9e06 	br	100031cc <__alt_data_end+0xf80031cc>
10003754:	1025883a 	mov	r18,r2
10003758:	0039883a 	mov	fp,zero
1000375c:	00800084 	movi	r2,2
10003760:	003fd306 	br	100036b0 <__alt_data_end+0xf80036b0>
10003764:	07000b44 	movi	fp,45
10003768:	df002785 	stb	fp,158(sp)
1000376c:	003a1b06 	br	10001fdc <__alt_data_end+0xf8001fdc>
10003770:	00c00b44 	movi	r3,45
10003774:	d8c02785 	stb	r3,158(sp)
10003778:	d8802915 	stw	r2,164(sp)
1000377c:	dc802c17 	ldw	r18,176(sp)
10003780:	d8002a15 	stw	zero,168(sp)
10003784:	07000b44 	movi	fp,45
10003788:	003a5e06 	br	10002104 <__alt_data_end+0xf8002104>
1000378c:	04040074 	movhi	r16,4097
10003790:	84065f04 	addi	r16,r16,6524
10003794:	003f4706 	br	100034b4 <__alt_data_end+0xf80034b4>
10003798:	d9002e17 	ldw	r4,184(sp)
1000379c:	d9402f17 	ldw	r5,188(sp)
100037a0:	20800017 	ldw	r2,0(r4)
100037a4:	21000104 	addi	r4,r4,4
100037a8:	d9002e15 	stw	r4,184(sp)
100037ac:	11400015 	stw	r5,0(r2)
100037b0:	0038ab06 	br	10001a60 <__alt_data_end+0xf8001a60>
100037b4:	dd802617 	ldw	r22,152(sp)
100037b8:	00bfff44 	movi	r2,-3
100037bc:	b0801c16 	blt	r22,r2,10003830 <___vfprintf_internal_r+0x1eb0>
100037c0:	d9402a17 	ldw	r5,168(sp)
100037c4:	2d801a16 	blt	r5,r22,10003830 <___vfprintf_internal_r+0x1eb0>
100037c8:	dd803215 	stw	r22,200(sp)
100037cc:	003e8906 	br	100031f4 <__alt_data_end+0xf80031f4>
100037d0:	01040074 	movhi	r4,4097
100037d4:	21066c84 	addi	r4,r4,6578
100037d8:	d9002c15 	stw	r4,176(sp)
100037dc:	003c9106 	br	10002a24 <__alt_data_end+0xf8002a24>
100037e0:	e005883a 	mov	r2,fp
100037e4:	003e7906 	br	100031cc <__alt_data_end+0xf80031cc>
100037e8:	d9002a17 	ldw	r4,168(sp)
100037ec:	df002783 	ldbu	fp,158(sp)
100037f0:	dcc02e15 	stw	r19,184(sp)
100037f4:	d9002915 	stw	r4,164(sp)
100037f8:	d9002b15 	stw	r4,172(sp)
100037fc:	d8002a15 	stw	zero,168(sp)
10003800:	d8003215 	stw	zero,200(sp)
10003804:	003a3b06 	br	100020f4 <__alt_data_end+0xf80020f4>
10003808:	9080004c 	andi	r2,r18,1
1000380c:	0039883a 	mov	fp,zero
10003810:	10000426 	beq	r2,zero,10003824 <___vfprintf_internal_r+0x1ea4>
10003814:	00800c04 	movi	r2,48
10003818:	dc001dc4 	addi	r16,sp,119
1000381c:	d8801dc5 	stb	r2,119(sp)
10003820:	003b6406 	br	100025b4 <__alt_data_end+0xf80025b4>
10003824:	d8002b15 	stw	zero,172(sp)
10003828:	dc001e04 	addi	r16,sp,120
1000382c:	003a2b06 	br	100020dc <__alt_data_end+0xf80020dc>
10003830:	8c7fff84 	addi	r17,r17,-2
10003834:	b5bfffc4 	addi	r22,r22,-1
10003838:	dd802615 	stw	r22,152(sp)
1000383c:	dc4022c5 	stb	r17,139(sp)
10003840:	b000bf16 	blt	r22,zero,10003b40 <___vfprintf_internal_r+0x21c0>
10003844:	00800ac4 	movi	r2,43
10003848:	d8802305 	stb	r2,140(sp)
1000384c:	00800244 	movi	r2,9
10003850:	15807016 	blt	r2,r22,10003a14 <___vfprintf_internal_r+0x2094>
10003854:	00800c04 	movi	r2,48
10003858:	b5800c04 	addi	r22,r22,48
1000385c:	d8802345 	stb	r2,141(sp)
10003860:	dd802385 	stb	r22,142(sp)
10003864:	d88023c4 	addi	r2,sp,143
10003868:	df0022c4 	addi	fp,sp,139
1000386c:	d8c03317 	ldw	r3,204(sp)
10003870:	1739c83a 	sub	fp,r2,fp
10003874:	d9003317 	ldw	r4,204(sp)
10003878:	e0c7883a 	add	r3,fp,r3
1000387c:	df003a15 	stw	fp,232(sp)
10003880:	d8c02b15 	stw	r3,172(sp)
10003884:	00800044 	movi	r2,1
10003888:	1100b30e 	bge	r2,r4,10003b58 <___vfprintf_internal_r+0x21d8>
1000388c:	d8c02b17 	ldw	r3,172(sp)
10003890:	18c00044 	addi	r3,r3,1
10003894:	d8c02b15 	stw	r3,172(sp)
10003898:	1805883a 	mov	r2,r3
1000389c:	1800ac16 	blt	r3,zero,10003b50 <___vfprintf_internal_r+0x21d0>
100038a0:	d8003215 	stw	zero,200(sp)
100038a4:	003e5d06 	br	1000321c <__alt_data_end+0xf800321c>
100038a8:	d9002d17 	ldw	r4,180(sp)
100038ac:	d9801e04 	addi	r6,sp,120
100038b0:	b80b883a 	mov	r5,r23
100038b4:	00088800 	call	10008880 <__sprint_r>
100038b8:	1039351e 	bne	r2,zero,10001d90 <__alt_data_end+0xf8001d90>
100038bc:	dc402617 	ldw	r17,152(sp)
100038c0:	d8c02017 	ldw	r3,128(sp)
100038c4:	d8801f17 	ldw	r2,124(sp)
100038c8:	da000404 	addi	r8,sp,16
100038cc:	003ed606 	br	10003428 <__alt_data_end+0xf8003428>
100038d0:	182b883a 	mov	r21,r3
100038d4:	d8002a15 	stw	zero,168(sp)
100038d8:	00388c06 	br	10001b0c <__alt_data_end+0xf8001b0c>
100038dc:	d8802a17 	ldw	r2,168(sp)
100038e0:	103e071e 	bne	r2,zero,10003100 <__alt_data_end+0xf8003100>
100038e4:	dc002a15 	stw	r16,168(sp)
100038e8:	003e0506 	br	10003100 <__alt_data_end+0xf8003100>
100038ec:	d9002a17 	ldw	r4,168(sp)
100038f0:	20c00044 	addi	r3,r4,1
100038f4:	003e0f06 	br	10003134 <__alt_data_end+0xf8003134>
100038f8:	01400184 	movi	r5,6
100038fc:	d9402a15 	stw	r5,168(sp)
10003900:	003dff06 	br	10003100 <__alt_data_end+0xf8003100>
10003904:	d8802104 	addi	r2,sp,132
10003908:	d8800315 	stw	r2,12(sp)
1000390c:	d8802504 	addi	r2,sp,148
10003910:	d8800215 	stw	r2,8(sp)
10003914:	d8802604 	addi	r2,sp,152
10003918:	d8800115 	stw	r2,4(sp)
1000391c:	d8802a17 	ldw	r2,168(sp)
10003920:	d9403617 	ldw	r5,216(sp)
10003924:	d9002d17 	ldw	r4,180(sp)
10003928:	d8800015 	stw	r2,0(sp)
1000392c:	01c000c4 	movi	r7,3
10003930:	980d883a 	mov	r6,r19
10003934:	da003d15 	stw	r8,244(sp)
10003938:	00040b00 	call	100040b0 <_dtoa_r>
1000393c:	d8c02a17 	ldw	r3,168(sp)
10003940:	da003d17 	ldw	r8,244(sp)
10003944:	1021883a 	mov	r16,r2
10003948:	10f9883a 	add	fp,r2,r3
1000394c:	81000007 	ldb	r4,0(r16)
10003950:	00800c04 	movi	r2,48
10003954:	20805e26 	beq	r4,r2,10003ad0 <___vfprintf_internal_r+0x2150>
10003958:	d8c02617 	ldw	r3,152(sp)
1000395c:	e0f9883a 	add	fp,fp,r3
10003960:	003e0a06 	br	1000318c <__alt_data_end+0xf800318c>
10003964:	00c00b44 	movi	r3,45
10003968:	24e0003c 	xorhi	r19,r4,32768
1000396c:	d8c02905 	stb	r3,164(sp)
10003970:	003de906 	br	10003118 <__alt_data_end+0xf8003118>
10003974:	d8c03217 	ldw	r3,200(sp)
10003978:	00c07a0e 	bge	zero,r3,10003b64 <___vfprintf_internal_r+0x21e4>
1000397c:	00800044 	movi	r2,1
10003980:	d9003317 	ldw	r4,204(sp)
10003984:	1105883a 	add	r2,r2,r4
10003988:	d8802b15 	stw	r2,172(sp)
1000398c:	10004e16 	blt	r2,zero,10003ac8 <___vfprintf_internal_r+0x2148>
10003990:	044019c4 	movi	r17,103
10003994:	003e2106 	br	1000321c <__alt_data_end+0xf800321c>
10003998:	d9002a17 	ldw	r4,168(sp)
1000399c:	d8802104 	addi	r2,sp,132
100039a0:	d8800315 	stw	r2,12(sp)
100039a4:	d9000015 	stw	r4,0(sp)
100039a8:	d8802504 	addi	r2,sp,148
100039ac:	d9403617 	ldw	r5,216(sp)
100039b0:	d9002d17 	ldw	r4,180(sp)
100039b4:	d8800215 	stw	r2,8(sp)
100039b8:	d8802604 	addi	r2,sp,152
100039bc:	d8800115 	stw	r2,4(sp)
100039c0:	01c000c4 	movi	r7,3
100039c4:	980d883a 	mov	r6,r19
100039c8:	da003d15 	stw	r8,244(sp)
100039cc:	00040b00 	call	100040b0 <_dtoa_r>
100039d0:	d8c02a17 	ldw	r3,168(sp)
100039d4:	da003d17 	ldw	r8,244(sp)
100039d8:	1021883a 	mov	r16,r2
100039dc:	00801184 	movi	r2,70
100039e0:	80f9883a 	add	fp,r16,r3
100039e4:	88bfd926 	beq	r17,r2,1000394c <__alt_data_end+0xf800394c>
100039e8:	003de806 	br	1000318c <__alt_data_end+0xf800318c>
100039ec:	d9002a17 	ldw	r4,168(sp)
100039f0:	00c04d0e 	bge	zero,r3,10003b28 <___vfprintf_internal_r+0x21a8>
100039f4:	2000441e 	bne	r4,zero,10003b08 <___vfprintf_internal_r+0x2188>
100039f8:	9480004c 	andi	r18,r18,1
100039fc:	9000421e 	bne	r18,zero,10003b08 <___vfprintf_internal_r+0x2188>
10003a00:	1805883a 	mov	r2,r3
10003a04:	18006f16 	blt	r3,zero,10003bc4 <___vfprintf_internal_r+0x2244>
10003a08:	d8c03217 	ldw	r3,200(sp)
10003a0c:	d8c02b15 	stw	r3,172(sp)
10003a10:	003e0206 	br	1000321c <__alt_data_end+0xf800321c>
10003a14:	df0022c4 	addi	fp,sp,139
10003a18:	dc002a15 	stw	r16,168(sp)
10003a1c:	4027883a 	mov	r19,r8
10003a20:	e021883a 	mov	r16,fp
10003a24:	b009883a 	mov	r4,r22
10003a28:	01400284 	movi	r5,10
10003a2c:	000bf940 	call	1000bf94 <__modsi3>
10003a30:	10800c04 	addi	r2,r2,48
10003a34:	843fffc4 	addi	r16,r16,-1
10003a38:	b009883a 	mov	r4,r22
10003a3c:	01400284 	movi	r5,10
10003a40:	80800005 	stb	r2,0(r16)
10003a44:	000bf100 	call	1000bf10 <__divsi3>
10003a48:	102d883a 	mov	r22,r2
10003a4c:	00800244 	movi	r2,9
10003a50:	15bff416 	blt	r2,r22,10003a24 <__alt_data_end+0xf8003a24>
10003a54:	9811883a 	mov	r8,r19
10003a58:	b0800c04 	addi	r2,r22,48
10003a5c:	8027883a 	mov	r19,r16
10003a60:	997fffc4 	addi	r5,r19,-1
10003a64:	98bfffc5 	stb	r2,-1(r19)
10003a68:	dc002a17 	ldw	r16,168(sp)
10003a6c:	2f006d2e 	bgeu	r5,fp,10003c24 <___vfprintf_internal_r+0x22a4>
10003a70:	d9c02384 	addi	r7,sp,142
10003a74:	3ccfc83a 	sub	r7,r7,r19
10003a78:	d9002344 	addi	r4,sp,141
10003a7c:	e1cf883a 	add	r7,fp,r7
10003a80:	00000106 	br	10003a88 <___vfprintf_internal_r+0x2108>
10003a84:	28800003 	ldbu	r2,0(r5)
10003a88:	20800005 	stb	r2,0(r4)
10003a8c:	21000044 	addi	r4,r4,1
10003a90:	29400044 	addi	r5,r5,1
10003a94:	393ffb1e 	bne	r7,r4,10003a84 <__alt_data_end+0xf8003a84>
10003a98:	d8802304 	addi	r2,sp,140
10003a9c:	14c5c83a 	sub	r2,r2,r19
10003aa0:	d8c02344 	addi	r3,sp,141
10003aa4:	1885883a 	add	r2,r3,r2
10003aa8:	003f7006 	br	1000386c <__alt_data_end+0xf800386c>
10003aac:	0005883a 	mov	r2,zero
10003ab0:	003f0f06 	br	100036f0 <__alt_data_end+0xf80036f0>
10003ab4:	d8c03217 	ldw	r3,200(sp)
10003ab8:	18c00044 	addi	r3,r3,1
10003abc:	d8c02b15 	stw	r3,172(sp)
10003ac0:	1805883a 	mov	r2,r3
10003ac4:	183fb20e 	bge	r3,zero,10003990 <__alt_data_end+0xf8003990>
10003ac8:	0005883a 	mov	r2,zero
10003acc:	003fb006 	br	10003990 <__alt_data_end+0xf8003990>
10003ad0:	d9003617 	ldw	r4,216(sp)
10003ad4:	000d883a 	mov	r6,zero
10003ad8:	000f883a 	mov	r7,zero
10003adc:	980b883a 	mov	r5,r19
10003ae0:	d8c03c15 	stw	r3,240(sp)
10003ae4:	da003d15 	stw	r8,244(sp)
10003ae8:	000d3400 	call	1000d340 <__eqdf2>
10003aec:	d8c03c17 	ldw	r3,240(sp)
10003af0:	da003d17 	ldw	r8,244(sp)
10003af4:	103f9826 	beq	r2,zero,10003958 <__alt_data_end+0xf8003958>
10003af8:	00800044 	movi	r2,1
10003afc:	10c7c83a 	sub	r3,r2,r3
10003b00:	d8c02615 	stw	r3,152(sp)
10003b04:	003f9506 	br	1000395c <__alt_data_end+0xf800395c>
10003b08:	d9002a17 	ldw	r4,168(sp)
10003b0c:	d8c03217 	ldw	r3,200(sp)
10003b10:	20800044 	addi	r2,r4,1
10003b14:	1885883a 	add	r2,r3,r2
10003b18:	d8802b15 	stw	r2,172(sp)
10003b1c:	103dbf0e 	bge	r2,zero,1000321c <__alt_data_end+0xf800321c>
10003b20:	0005883a 	mov	r2,zero
10003b24:	003dbd06 	br	1000321c <__alt_data_end+0xf800321c>
10003b28:	2000201e 	bne	r4,zero,10003bac <___vfprintf_internal_r+0x222c>
10003b2c:	9480004c 	andi	r18,r18,1
10003b30:	90001e1e 	bne	r18,zero,10003bac <___vfprintf_internal_r+0x222c>
10003b34:	00800044 	movi	r2,1
10003b38:	d8802b15 	stw	r2,172(sp)
10003b3c:	003db706 	br	1000321c <__alt_data_end+0xf800321c>
10003b40:	00800b44 	movi	r2,45
10003b44:	05adc83a 	sub	r22,zero,r22
10003b48:	d8802305 	stb	r2,140(sp)
10003b4c:	003f3f06 	br	1000384c <__alt_data_end+0xf800384c>
10003b50:	0005883a 	mov	r2,zero
10003b54:	003f5206 	br	100038a0 <__alt_data_end+0xf80038a0>
10003b58:	90a4703a 	and	r18,r18,r2
10003b5c:	903f4e26 	beq	r18,zero,10003898 <__alt_data_end+0xf8003898>
10003b60:	003f4a06 	br	1000388c <__alt_data_end+0xf800388c>
10003b64:	00800084 	movi	r2,2
10003b68:	10c5c83a 	sub	r2,r2,r3
10003b6c:	003f8406 	br	10003980 <__alt_data_end+0xf8003980>
10003b70:	d9402e17 	ldw	r5,184(sp)
10003b74:	d9002e17 	ldw	r4,184(sp)
10003b78:	ac400043 	ldbu	r17,1(r21)
10003b7c:	29400017 	ldw	r5,0(r5)
10003b80:	20800104 	addi	r2,r4,4
10003b84:	d8802e15 	stw	r2,184(sp)
10003b88:	d9402a15 	stw	r5,168(sp)
10003b8c:	182b883a 	mov	r21,r3
10003b90:	283e7b0e 	bge	r5,zero,10003580 <__alt_data_end+0xf8003580>
10003b94:	8c403fcc 	andi	r17,r17,255
10003b98:	017fffc4 	movi	r5,-1
10003b9c:	8c40201c 	xori	r17,r17,128
10003ba0:	d9402a15 	stw	r5,168(sp)
10003ba4:	8c7fe004 	addi	r17,r17,-128
10003ba8:	0037d706 	br	10001b08 <__alt_data_end+0xf8001b08>
10003bac:	d8c02a17 	ldw	r3,168(sp)
10003bb0:	18c00084 	addi	r3,r3,2
10003bb4:	d8c02b15 	stw	r3,172(sp)
10003bb8:	1805883a 	mov	r2,r3
10003bbc:	183d970e 	bge	r3,zero,1000321c <__alt_data_end+0xf800321c>
10003bc0:	003fd706 	br	10003b20 <__alt_data_end+0xf8003b20>
10003bc4:	0005883a 	mov	r2,zero
10003bc8:	003f8f06 	br	10003a08 <__alt_data_end+0xf8003a08>
10003bcc:	9080004c 	andi	r2,r18,1
10003bd0:	103f821e 	bne	r2,zero,100039dc <__alt_data_end+0xf80039dc>
10003bd4:	d8802117 	ldw	r2,132(sp)
10003bd8:	1405c83a 	sub	r2,r2,r16
10003bdc:	d8803315 	stw	r2,204(sp)
10003be0:	b47ef426 	beq	r22,r17,100037b4 <__alt_data_end+0xf80037b4>
10003be4:	dd802617 	ldw	r22,152(sp)
10003be8:	003f1206 	br	10003834 <__alt_data_end+0xf8003834>
10003bec:	d8c02b03 	ldbu	r3,172(sp)
10003bf0:	d8c02785 	stb	r3,158(sp)
10003bf4:	0038df06 	br	10001f74 <__alt_data_end+0xf8001f74>
10003bf8:	d8c02b03 	ldbu	r3,172(sp)
10003bfc:	d8c02785 	stb	r3,158(sp)
10003c00:	0038aa06 	br	10001eac <__alt_data_end+0xf8001eac>
10003c04:	d8c02b03 	ldbu	r3,172(sp)
10003c08:	d8c02785 	stb	r3,158(sp)
10003c0c:	003a4306 	br	1000251c <__alt_data_end+0xf800251c>
10003c10:	d8c02b03 	ldbu	r3,172(sp)
10003c14:	d8c02785 	stb	r3,158(sp)
10003c18:	003af506 	br	100027f0 <__alt_data_end+0xf80027f0>
10003c1c:	0005883a 	mov	r2,zero
10003c20:	003d7b06 	br	10003210 <__alt_data_end+0xf8003210>
10003c24:	d8802344 	addi	r2,sp,141
10003c28:	003f1006 	br	1000386c <__alt_data_end+0xf800386c>
10003c2c:	d8c02b03 	ldbu	r3,172(sp)
10003c30:	d8c02785 	stb	r3,158(sp)
10003c34:	0038fd06 	br	1000202c <__alt_data_end+0xf800202c>
10003c38:	d8c02b03 	ldbu	r3,172(sp)
10003c3c:	d8c02785 	stb	r3,158(sp)
10003c40:	003a9706 	br	100026a0 <__alt_data_end+0xf80026a0>
10003c44:	d8c02b03 	ldbu	r3,172(sp)
10003c48:	d8c02785 	stb	r3,158(sp)
10003c4c:	003a1806 	br	100024b0 <__alt_data_end+0xf80024b0>
10003c50:	d8c02b03 	ldbu	r3,172(sp)
10003c54:	d8c02785 	stb	r3,158(sp)
10003c58:	003abe06 	br	10002754 <__alt_data_end+0xf8002754>

10003c5c <__vfprintf_internal>:
10003c5c:	00840074 	movhi	r2,4097
10003c60:	108e0604 	addi	r2,r2,14360
10003c64:	300f883a 	mov	r7,r6
10003c68:	280d883a 	mov	r6,r5
10003c6c:	200b883a 	mov	r5,r4
10003c70:	11000017 	ldw	r4,0(r2)
10003c74:	00019801 	jmpi	10001980 <___vfprintf_internal_r>

10003c78 <__sbprintf>:
10003c78:	2880030b 	ldhu	r2,12(r5)
10003c7c:	2ac01917 	ldw	r11,100(r5)
10003c80:	2a80038b 	ldhu	r10,14(r5)
10003c84:	2a400717 	ldw	r9,28(r5)
10003c88:	2a000917 	ldw	r8,36(r5)
10003c8c:	defee204 	addi	sp,sp,-1144
10003c90:	00c10004 	movi	r3,1024
10003c94:	dc011a15 	stw	r16,1128(sp)
10003c98:	10bfff4c 	andi	r2,r2,65533
10003c9c:	2821883a 	mov	r16,r5
10003ca0:	d8cb883a 	add	r5,sp,r3
10003ca4:	dc811c15 	stw	r18,1136(sp)
10003ca8:	dc411b15 	stw	r17,1132(sp)
10003cac:	dfc11d15 	stw	ra,1140(sp)
10003cb0:	2025883a 	mov	r18,r4
10003cb4:	d881030d 	sth	r2,1036(sp)
10003cb8:	dac11915 	stw	r11,1124(sp)
10003cbc:	da81038d 	sth	r10,1038(sp)
10003cc0:	da410715 	stw	r9,1052(sp)
10003cc4:	da010915 	stw	r8,1060(sp)
10003cc8:	dec10015 	stw	sp,1024(sp)
10003ccc:	dec10415 	stw	sp,1040(sp)
10003cd0:	d8c10215 	stw	r3,1032(sp)
10003cd4:	d8c10515 	stw	r3,1044(sp)
10003cd8:	d8010615 	stw	zero,1048(sp)
10003cdc:	00019800 	call	10001980 <___vfprintf_internal_r>
10003ce0:	1023883a 	mov	r17,r2
10003ce4:	10000416 	blt	r2,zero,10003cf8 <__sbprintf+0x80>
10003ce8:	d9410004 	addi	r5,sp,1024
10003cec:	9009883a 	mov	r4,r18
10003cf0:	00059540 	call	10005954 <_fflush_r>
10003cf4:	10000d1e 	bne	r2,zero,10003d2c <__sbprintf+0xb4>
10003cf8:	d881030b 	ldhu	r2,1036(sp)
10003cfc:	1080100c 	andi	r2,r2,64
10003d00:	10000326 	beq	r2,zero,10003d10 <__sbprintf+0x98>
10003d04:	8080030b 	ldhu	r2,12(r16)
10003d08:	10801014 	ori	r2,r2,64
10003d0c:	8080030d 	sth	r2,12(r16)
10003d10:	8805883a 	mov	r2,r17
10003d14:	dfc11d17 	ldw	ra,1140(sp)
10003d18:	dc811c17 	ldw	r18,1136(sp)
10003d1c:	dc411b17 	ldw	r17,1132(sp)
10003d20:	dc011a17 	ldw	r16,1128(sp)
10003d24:	dec11e04 	addi	sp,sp,1144
10003d28:	f800283a 	ret
10003d2c:	047fffc4 	movi	r17,-1
10003d30:	003ff106 	br	10003cf8 <__alt_data_end+0xf8003cf8>

10003d34 <__swsetup_r>:
10003d34:	00840074 	movhi	r2,4097
10003d38:	defffd04 	addi	sp,sp,-12
10003d3c:	108e0604 	addi	r2,r2,14360
10003d40:	dc400115 	stw	r17,4(sp)
10003d44:	2023883a 	mov	r17,r4
10003d48:	11000017 	ldw	r4,0(r2)
10003d4c:	dc000015 	stw	r16,0(sp)
10003d50:	dfc00215 	stw	ra,8(sp)
10003d54:	2821883a 	mov	r16,r5
10003d58:	20000226 	beq	r4,zero,10003d64 <__swsetup_r+0x30>
10003d5c:	20800e17 	ldw	r2,56(r4)
10003d60:	10003126 	beq	r2,zero,10003e28 <__swsetup_r+0xf4>
10003d64:	8080030b 	ldhu	r2,12(r16)
10003d68:	10c0020c 	andi	r3,r2,8
10003d6c:	1009883a 	mov	r4,r2
10003d70:	18000f26 	beq	r3,zero,10003db0 <__swsetup_r+0x7c>
10003d74:	80c00417 	ldw	r3,16(r16)
10003d78:	18001526 	beq	r3,zero,10003dd0 <__swsetup_r+0x9c>
10003d7c:	1100004c 	andi	r4,r2,1
10003d80:	20001c1e 	bne	r4,zero,10003df4 <__swsetup_r+0xc0>
10003d84:	1080008c 	andi	r2,r2,2
10003d88:	1000291e 	bne	r2,zero,10003e30 <__swsetup_r+0xfc>
10003d8c:	80800517 	ldw	r2,20(r16)
10003d90:	80800215 	stw	r2,8(r16)
10003d94:	18001c26 	beq	r3,zero,10003e08 <__swsetup_r+0xd4>
10003d98:	0005883a 	mov	r2,zero
10003d9c:	dfc00217 	ldw	ra,8(sp)
10003da0:	dc400117 	ldw	r17,4(sp)
10003da4:	dc000017 	ldw	r16,0(sp)
10003da8:	dec00304 	addi	sp,sp,12
10003dac:	f800283a 	ret
10003db0:	2080040c 	andi	r2,r4,16
10003db4:	10002e26 	beq	r2,zero,10003e70 <__swsetup_r+0x13c>
10003db8:	2080010c 	andi	r2,r4,4
10003dbc:	10001e1e 	bne	r2,zero,10003e38 <__swsetup_r+0x104>
10003dc0:	80c00417 	ldw	r3,16(r16)
10003dc4:	20800214 	ori	r2,r4,8
10003dc8:	8080030d 	sth	r2,12(r16)
10003dcc:	183feb1e 	bne	r3,zero,10003d7c <__alt_data_end+0xf8003d7c>
10003dd0:	1100a00c 	andi	r4,r2,640
10003dd4:	01408004 	movi	r5,512
10003dd8:	217fe826 	beq	r4,r5,10003d7c <__alt_data_end+0xf8003d7c>
10003ddc:	800b883a 	mov	r5,r16
10003de0:	8809883a 	mov	r4,r17
10003de4:	00064280 	call	10006428 <__smakebuf_r>
10003de8:	8080030b 	ldhu	r2,12(r16)
10003dec:	80c00417 	ldw	r3,16(r16)
10003df0:	003fe206 	br	10003d7c <__alt_data_end+0xf8003d7c>
10003df4:	80800517 	ldw	r2,20(r16)
10003df8:	80000215 	stw	zero,8(r16)
10003dfc:	0085c83a 	sub	r2,zero,r2
10003e00:	80800615 	stw	r2,24(r16)
10003e04:	183fe41e 	bne	r3,zero,10003d98 <__alt_data_end+0xf8003d98>
10003e08:	80c0030b 	ldhu	r3,12(r16)
10003e0c:	0005883a 	mov	r2,zero
10003e10:	1900200c 	andi	r4,r3,128
10003e14:	203fe126 	beq	r4,zero,10003d9c <__alt_data_end+0xf8003d9c>
10003e18:	18c01014 	ori	r3,r3,64
10003e1c:	80c0030d 	sth	r3,12(r16)
10003e20:	00bfffc4 	movi	r2,-1
10003e24:	003fdd06 	br	10003d9c <__alt_data_end+0xf8003d9c>
10003e28:	0005d400 	call	10005d40 <__sinit>
10003e2c:	003fcd06 	br	10003d64 <__alt_data_end+0xf8003d64>
10003e30:	0005883a 	mov	r2,zero
10003e34:	003fd606 	br	10003d90 <__alt_data_end+0xf8003d90>
10003e38:	81400c17 	ldw	r5,48(r16)
10003e3c:	28000626 	beq	r5,zero,10003e58 <__swsetup_r+0x124>
10003e40:	80801004 	addi	r2,r16,64
10003e44:	28800326 	beq	r5,r2,10003e54 <__swsetup_r+0x120>
10003e48:	8809883a 	mov	r4,r17
10003e4c:	0005eb40 	call	10005eb4 <_free_r>
10003e50:	8100030b 	ldhu	r4,12(r16)
10003e54:	80000c15 	stw	zero,48(r16)
10003e58:	80c00417 	ldw	r3,16(r16)
10003e5c:	00bff6c4 	movi	r2,-37
10003e60:	1108703a 	and	r4,r2,r4
10003e64:	80000115 	stw	zero,4(r16)
10003e68:	80c00015 	stw	r3,0(r16)
10003e6c:	003fd506 	br	10003dc4 <__alt_data_end+0xf8003dc4>
10003e70:	00800244 	movi	r2,9
10003e74:	88800015 	stw	r2,0(r17)
10003e78:	20801014 	ori	r2,r4,64
10003e7c:	8080030d 	sth	r2,12(r16)
10003e80:	00bfffc4 	movi	r2,-1
10003e84:	003fc506 	br	10003d9c <__alt_data_end+0xf8003d9c>

10003e88 <quorem>:
10003e88:	defff204 	addi	sp,sp,-56
10003e8c:	ddc00b15 	stw	r23,44(sp)
10003e90:	20800417 	ldw	r2,16(r4)
10003e94:	2dc00417 	ldw	r23,16(r5)
10003e98:	dfc00d15 	stw	ra,52(sp)
10003e9c:	df000c15 	stw	fp,48(sp)
10003ea0:	dd800a15 	stw	r22,40(sp)
10003ea4:	dd400915 	stw	r21,36(sp)
10003ea8:	dd000815 	stw	r20,32(sp)
10003eac:	dcc00715 	stw	r19,28(sp)
10003eb0:	dc800615 	stw	r18,24(sp)
10003eb4:	dc400515 	stw	r17,20(sp)
10003eb8:	dc000415 	stw	r16,16(sp)
10003ebc:	15c07a16 	blt	r2,r23,100040a8 <quorem+0x220>
10003ec0:	bdffffc4 	addi	r23,r23,-1
10003ec4:	bde9883a 	add	r20,r23,r23
10003ec8:	28c00504 	addi	r3,r5,20
10003ecc:	a529883a 	add	r20,r20,r20
10003ed0:	1d39883a 	add	fp,r3,r20
10003ed4:	24c00504 	addi	r19,r4,20
10003ed8:	d9400215 	stw	r5,8(sp)
10003edc:	9d29883a 	add	r20,r19,r20
10003ee0:	e1400017 	ldw	r5,0(fp)
10003ee4:	d9000015 	stw	r4,0(sp)
10003ee8:	a1000017 	ldw	r4,0(r20)
10003eec:	29400044 	addi	r5,r5,1
10003ef0:	d8c00115 	stw	r3,4(sp)
10003ef4:	dd000315 	stw	r20,12(sp)
10003ef8:	000c0080 	call	1000c008 <__udivsi3>
10003efc:	1025883a 	mov	r18,r2
10003f00:	10003026 	beq	r2,zero,10003fc4 <quorem+0x13c>
10003f04:	dc400117 	ldw	r17,4(sp)
10003f08:	9829883a 	mov	r20,r19
10003f0c:	002d883a 	mov	r22,zero
10003f10:	0021883a 	mov	r16,zero
10003f14:	8d400017 	ldw	r21,0(r17)
10003f18:	900b883a 	mov	r5,r18
10003f1c:	8c400104 	addi	r17,r17,4
10003f20:	a93fffcc 	andi	r4,r21,65535
10003f24:	00016040 	call	10001604 <__mulsi3>
10003f28:	a808d43a 	srli	r4,r21,16
10003f2c:	900b883a 	mov	r5,r18
10003f30:	15ad883a 	add	r22,r2,r22
10003f34:	00016040 	call	10001604 <__mulsi3>
10003f38:	a1000017 	ldw	r4,0(r20)
10003f3c:	b00cd43a 	srli	r6,r22,16
10003f40:	b0ffffcc 	andi	r3,r22,65535
10003f44:	217fffcc 	andi	r5,r4,65535
10003f48:	2c21883a 	add	r16,r5,r16
10003f4c:	80c7c83a 	sub	r3,r16,r3
10003f50:	2008d43a 	srli	r4,r4,16
10003f54:	1185883a 	add	r2,r2,r6
10003f58:	1821d43a 	srai	r16,r3,16
10003f5c:	117fffcc 	andi	r5,r2,65535
10003f60:	2149c83a 	sub	r4,r4,r5
10003f64:	2421883a 	add	r16,r4,r16
10003f68:	8008943a 	slli	r4,r16,16
10003f6c:	18ffffcc 	andi	r3,r3,65535
10003f70:	102cd43a 	srli	r22,r2,16
10003f74:	20c8b03a 	or	r4,r4,r3
10003f78:	a1000015 	stw	r4,0(r20)
10003f7c:	8021d43a 	srai	r16,r16,16
10003f80:	a5000104 	addi	r20,r20,4
10003f84:	e47fe32e 	bgeu	fp,r17,10003f14 <__alt_data_end+0xf8003f14>
10003f88:	d8c00317 	ldw	r3,12(sp)
10003f8c:	18800017 	ldw	r2,0(r3)
10003f90:	10000c1e 	bne	r2,zero,10003fc4 <quorem+0x13c>
10003f94:	18bfff04 	addi	r2,r3,-4
10003f98:	9880082e 	bgeu	r19,r2,10003fbc <quorem+0x134>
10003f9c:	18ffff17 	ldw	r3,-4(r3)
10003fa0:	18000326 	beq	r3,zero,10003fb0 <quorem+0x128>
10003fa4:	00000506 	br	10003fbc <quorem+0x134>
10003fa8:	10c00017 	ldw	r3,0(r2)
10003fac:	1800031e 	bne	r3,zero,10003fbc <quorem+0x134>
10003fb0:	10bfff04 	addi	r2,r2,-4
10003fb4:	bdffffc4 	addi	r23,r23,-1
10003fb8:	98bffb36 	bltu	r19,r2,10003fa8 <__alt_data_end+0xf8003fa8>
10003fbc:	d8c00017 	ldw	r3,0(sp)
10003fc0:	1dc00415 	stw	r23,16(r3)
10003fc4:	d9400217 	ldw	r5,8(sp)
10003fc8:	d9000017 	ldw	r4,0(sp)
10003fcc:	00079800 	call	10007980 <__mcmp>
10003fd0:	10002816 	blt	r2,zero,10004074 <quorem+0x1ec>
10003fd4:	dc400117 	ldw	r17,4(sp)
10003fd8:	94800044 	addi	r18,r18,1
10003fdc:	980d883a 	mov	r6,r19
10003fe0:	0007883a 	mov	r3,zero
10003fe4:	31000017 	ldw	r4,0(r6)
10003fe8:	89400017 	ldw	r5,0(r17)
10003fec:	31800104 	addi	r6,r6,4
10003ff0:	20bfffcc 	andi	r2,r4,65535
10003ff4:	10c7883a 	add	r3,r2,r3
10003ff8:	28bfffcc 	andi	r2,r5,65535
10003ffc:	1885c83a 	sub	r2,r3,r2
10004000:	280ad43a 	srli	r5,r5,16
10004004:	2008d43a 	srli	r4,r4,16
10004008:	1007d43a 	srai	r3,r2,16
1000400c:	10bfffcc 	andi	r2,r2,65535
10004010:	2149c83a 	sub	r4,r4,r5
10004014:	20c9883a 	add	r4,r4,r3
10004018:	200a943a 	slli	r5,r4,16
1000401c:	8c400104 	addi	r17,r17,4
10004020:	2007d43a 	srai	r3,r4,16
10004024:	2884b03a 	or	r2,r5,r2
10004028:	30bfff15 	stw	r2,-4(r6)
1000402c:	e47fed2e 	bgeu	fp,r17,10003fe4 <__alt_data_end+0xf8003fe4>
10004030:	bdc5883a 	add	r2,r23,r23
10004034:	1085883a 	add	r2,r2,r2
10004038:	9887883a 	add	r3,r19,r2
1000403c:	18800017 	ldw	r2,0(r3)
10004040:	10000c1e 	bne	r2,zero,10004074 <quorem+0x1ec>
10004044:	18bfff04 	addi	r2,r3,-4
10004048:	9880082e 	bgeu	r19,r2,1000406c <quorem+0x1e4>
1000404c:	18ffff17 	ldw	r3,-4(r3)
10004050:	18000326 	beq	r3,zero,10004060 <quorem+0x1d8>
10004054:	00000506 	br	1000406c <quorem+0x1e4>
10004058:	10c00017 	ldw	r3,0(r2)
1000405c:	1800031e 	bne	r3,zero,1000406c <quorem+0x1e4>
10004060:	10bfff04 	addi	r2,r2,-4
10004064:	bdffffc4 	addi	r23,r23,-1
10004068:	98bffb36 	bltu	r19,r2,10004058 <__alt_data_end+0xf8004058>
1000406c:	d8c00017 	ldw	r3,0(sp)
10004070:	1dc00415 	stw	r23,16(r3)
10004074:	9005883a 	mov	r2,r18
10004078:	dfc00d17 	ldw	ra,52(sp)
1000407c:	df000c17 	ldw	fp,48(sp)
10004080:	ddc00b17 	ldw	r23,44(sp)
10004084:	dd800a17 	ldw	r22,40(sp)
10004088:	dd400917 	ldw	r21,36(sp)
1000408c:	dd000817 	ldw	r20,32(sp)
10004090:	dcc00717 	ldw	r19,28(sp)
10004094:	dc800617 	ldw	r18,24(sp)
10004098:	dc400517 	ldw	r17,20(sp)
1000409c:	dc000417 	ldw	r16,16(sp)
100040a0:	dec00e04 	addi	sp,sp,56
100040a4:	f800283a 	ret
100040a8:	0005883a 	mov	r2,zero
100040ac:	003ff206 	br	10004078 <__alt_data_end+0xf8004078>

100040b0 <_dtoa_r>:
100040b0:	20801017 	ldw	r2,64(r4)
100040b4:	deffde04 	addi	sp,sp,-136
100040b8:	df002015 	stw	fp,128(sp)
100040bc:	dcc01b15 	stw	r19,108(sp)
100040c0:	dc801a15 	stw	r18,104(sp)
100040c4:	dc401915 	stw	r17,100(sp)
100040c8:	dc001815 	stw	r16,96(sp)
100040cc:	dfc02115 	stw	ra,132(sp)
100040d0:	ddc01f15 	stw	r23,124(sp)
100040d4:	dd801e15 	stw	r22,120(sp)
100040d8:	dd401d15 	stw	r21,116(sp)
100040dc:	dd001c15 	stw	r20,112(sp)
100040e0:	d9c00315 	stw	r7,12(sp)
100040e4:	2039883a 	mov	fp,r4
100040e8:	3023883a 	mov	r17,r6
100040ec:	2825883a 	mov	r18,r5
100040f0:	dc002417 	ldw	r16,144(sp)
100040f4:	3027883a 	mov	r19,r6
100040f8:	10000826 	beq	r2,zero,1000411c <_dtoa_r+0x6c>
100040fc:	21801117 	ldw	r6,68(r4)
10004100:	00c00044 	movi	r3,1
10004104:	100b883a 	mov	r5,r2
10004108:	1986983a 	sll	r3,r3,r6
1000410c:	11800115 	stw	r6,4(r2)
10004110:	10c00215 	stw	r3,8(r2)
10004114:	00070a40 	call	100070a4 <_Bfree>
10004118:	e0001015 	stw	zero,64(fp)
1000411c:	88002e16 	blt	r17,zero,100041d8 <_dtoa_r+0x128>
10004120:	80000015 	stw	zero,0(r16)
10004124:	889ffc2c 	andhi	r2,r17,32752
10004128:	00dffc34 	movhi	r3,32752
1000412c:	10c01c26 	beq	r2,r3,100041a0 <_dtoa_r+0xf0>
10004130:	000d883a 	mov	r6,zero
10004134:	000f883a 	mov	r7,zero
10004138:	9009883a 	mov	r4,r18
1000413c:	980b883a 	mov	r5,r19
10004140:	000d3400 	call	1000d340 <__eqdf2>
10004144:	10002b1e 	bne	r2,zero,100041f4 <_dtoa_r+0x144>
10004148:	d9c02317 	ldw	r7,140(sp)
1000414c:	00800044 	movi	r2,1
10004150:	38800015 	stw	r2,0(r7)
10004154:	d8802517 	ldw	r2,148(sp)
10004158:	10019e26 	beq	r2,zero,100047d4 <_dtoa_r+0x724>
1000415c:	d8c02517 	ldw	r3,148(sp)
10004160:	00840074 	movhi	r2,4097
10004164:	10866c44 	addi	r2,r2,6577
10004168:	18800015 	stw	r2,0(r3)
1000416c:	10bfffc4 	addi	r2,r2,-1
10004170:	dfc02117 	ldw	ra,132(sp)
10004174:	df002017 	ldw	fp,128(sp)
10004178:	ddc01f17 	ldw	r23,124(sp)
1000417c:	dd801e17 	ldw	r22,120(sp)
10004180:	dd401d17 	ldw	r21,116(sp)
10004184:	dd001c17 	ldw	r20,112(sp)
10004188:	dcc01b17 	ldw	r19,108(sp)
1000418c:	dc801a17 	ldw	r18,104(sp)
10004190:	dc401917 	ldw	r17,100(sp)
10004194:	dc001817 	ldw	r16,96(sp)
10004198:	dec02204 	addi	sp,sp,136
1000419c:	f800283a 	ret
100041a0:	d8c02317 	ldw	r3,140(sp)
100041a4:	0089c3c4 	movi	r2,9999
100041a8:	18800015 	stw	r2,0(r3)
100041ac:	90017726 	beq	r18,zero,1000478c <_dtoa_r+0x6dc>
100041b0:	00840074 	movhi	r2,4097
100041b4:	10867804 	addi	r2,r2,6624
100041b8:	d9002517 	ldw	r4,148(sp)
100041bc:	203fec26 	beq	r4,zero,10004170 <__alt_data_end+0xf8004170>
100041c0:	10c000c7 	ldb	r3,3(r2)
100041c4:	1801781e 	bne	r3,zero,100047a8 <_dtoa_r+0x6f8>
100041c8:	10c000c4 	addi	r3,r2,3
100041cc:	d9802517 	ldw	r6,148(sp)
100041d0:	30c00015 	stw	r3,0(r6)
100041d4:	003fe606 	br	10004170 <__alt_data_end+0xf8004170>
100041d8:	04e00034 	movhi	r19,32768
100041dc:	9cffffc4 	addi	r19,r19,-1
100041e0:	00800044 	movi	r2,1
100041e4:	8ce6703a 	and	r19,r17,r19
100041e8:	80800015 	stw	r2,0(r16)
100041ec:	9823883a 	mov	r17,r19
100041f0:	003fcc06 	br	10004124 <__alt_data_end+0xf8004124>
100041f4:	d8800204 	addi	r2,sp,8
100041f8:	d8800015 	stw	r2,0(sp)
100041fc:	d9c00104 	addi	r7,sp,4
10004200:	900b883a 	mov	r5,r18
10004204:	980d883a 	mov	r6,r19
10004208:	e009883a 	mov	r4,fp
1000420c:	8820d53a 	srli	r16,r17,20
10004210:	0007d4c0 	call	10007d4c <__d2b>
10004214:	d8800915 	stw	r2,36(sp)
10004218:	8001651e 	bne	r16,zero,100047b0 <_dtoa_r+0x700>
1000421c:	dd800217 	ldw	r22,8(sp)
10004220:	dc000117 	ldw	r16,4(sp)
10004224:	00800804 	movi	r2,32
10004228:	b421883a 	add	r16,r22,r16
1000422c:	80c10c84 	addi	r3,r16,1074
10004230:	10c2d10e 	bge	r2,r3,10004d78 <_dtoa_r+0xcc8>
10004234:	00801004 	movi	r2,64
10004238:	81010484 	addi	r4,r16,1042
1000423c:	10c7c83a 	sub	r3,r2,r3
10004240:	9108d83a 	srl	r4,r18,r4
10004244:	88e2983a 	sll	r17,r17,r3
10004248:	2448b03a 	or	r4,r4,r17
1000424c:	000e8580 	call	1000e858 <__floatunsidf>
10004250:	017f8434 	movhi	r5,65040
10004254:	01800044 	movi	r6,1
10004258:	1009883a 	mov	r4,r2
1000425c:	194b883a 	add	r5,r3,r5
10004260:	843fffc4 	addi	r16,r16,-1
10004264:	d9801115 	stw	r6,68(sp)
10004268:	000d883a 	mov	r6,zero
1000426c:	01cffe34 	movhi	r7,16376
10004270:	000de000 	call	1000de00 <__subdf3>
10004274:	0198dbf4 	movhi	r6,25455
10004278:	01cff4f4 	movhi	r7,16339
1000427c:	3190d844 	addi	r6,r6,17249
10004280:	39e1e9c4 	addi	r7,r7,-30809
10004284:	1009883a 	mov	r4,r2
10004288:	180b883a 	mov	r5,r3
1000428c:	000d5980 	call	1000d598 <__muldf3>
10004290:	01a2d874 	movhi	r6,35681
10004294:	01cff1f4 	movhi	r7,16327
10004298:	31b22cc4 	addi	r6,r6,-14157
1000429c:	39e28a04 	addi	r7,r7,-30168
100042a0:	180b883a 	mov	r5,r3
100042a4:	1009883a 	mov	r4,r2
100042a8:	000c0c40 	call	1000c0c4 <__adddf3>
100042ac:	8009883a 	mov	r4,r16
100042b0:	1029883a 	mov	r20,r2
100042b4:	1823883a 	mov	r17,r3
100042b8:	000e77c0 	call	1000e77c <__floatsidf>
100042bc:	019427f4 	movhi	r6,20639
100042c0:	01cff4f4 	movhi	r7,16339
100042c4:	319e7ec4 	addi	r6,r6,31227
100042c8:	39d104c4 	addi	r7,r7,17427
100042cc:	1009883a 	mov	r4,r2
100042d0:	180b883a 	mov	r5,r3
100042d4:	000d5980 	call	1000d598 <__muldf3>
100042d8:	100d883a 	mov	r6,r2
100042dc:	180f883a 	mov	r7,r3
100042e0:	a009883a 	mov	r4,r20
100042e4:	880b883a 	mov	r5,r17
100042e8:	000c0c40 	call	1000c0c4 <__adddf3>
100042ec:	1009883a 	mov	r4,r2
100042f0:	180b883a 	mov	r5,r3
100042f4:	1029883a 	mov	r20,r2
100042f8:	1823883a 	mov	r17,r3
100042fc:	000e6fc0 	call	1000e6fc <__fixdfsi>
10004300:	000d883a 	mov	r6,zero
10004304:	000f883a 	mov	r7,zero
10004308:	a009883a 	mov	r4,r20
1000430c:	880b883a 	mov	r5,r17
10004310:	d8800515 	stw	r2,20(sp)
10004314:	000d4a40 	call	1000d4a4 <__ledf2>
10004318:	10028716 	blt	r2,zero,10004d38 <_dtoa_r+0xc88>
1000431c:	d8c00517 	ldw	r3,20(sp)
10004320:	00800584 	movi	r2,22
10004324:	10c27536 	bltu	r2,r3,10004cfc <_dtoa_r+0xc4c>
10004328:	180490fa 	slli	r2,r3,3
1000432c:	00c40074 	movhi	r3,4097
10004330:	18c69304 	addi	r3,r3,6732
10004334:	1885883a 	add	r2,r3,r2
10004338:	11000017 	ldw	r4,0(r2)
1000433c:	11400117 	ldw	r5,4(r2)
10004340:	900d883a 	mov	r6,r18
10004344:	980f883a 	mov	r7,r19
10004348:	000d3c80 	call	1000d3c8 <__gedf2>
1000434c:	00828d0e 	bge	zero,r2,10004d84 <_dtoa_r+0xcd4>
10004350:	d9000517 	ldw	r4,20(sp)
10004354:	d8000e15 	stw	zero,56(sp)
10004358:	213fffc4 	addi	r4,r4,-1
1000435c:	d9000515 	stw	r4,20(sp)
10004360:	b42dc83a 	sub	r22,r22,r16
10004364:	b5bfffc4 	addi	r22,r22,-1
10004368:	b0026f16 	blt	r22,zero,10004d28 <_dtoa_r+0xc78>
1000436c:	d8000815 	stw	zero,32(sp)
10004370:	d9c00517 	ldw	r7,20(sp)
10004374:	38026416 	blt	r7,zero,10004d08 <_dtoa_r+0xc58>
10004378:	b1ed883a 	add	r22,r22,r7
1000437c:	d9c00d15 	stw	r7,52(sp)
10004380:	d8000a15 	stw	zero,40(sp)
10004384:	d9800317 	ldw	r6,12(sp)
10004388:	00800244 	movi	r2,9
1000438c:	11811436 	bltu	r2,r6,100047e0 <_dtoa_r+0x730>
10004390:	00800144 	movi	r2,5
10004394:	1184e10e 	bge	r2,r6,1000571c <_dtoa_r+0x166c>
10004398:	31bfff04 	addi	r6,r6,-4
1000439c:	d9800315 	stw	r6,12(sp)
100043a0:	0023883a 	mov	r17,zero
100043a4:	d9800317 	ldw	r6,12(sp)
100043a8:	008000c4 	movi	r2,3
100043ac:	30836726 	beq	r6,r2,1000514c <_dtoa_r+0x109c>
100043b0:	1183410e 	bge	r2,r6,100050b8 <_dtoa_r+0x1008>
100043b4:	d9c00317 	ldw	r7,12(sp)
100043b8:	00800104 	movi	r2,4
100043bc:	38827c26 	beq	r7,r2,10004db0 <_dtoa_r+0xd00>
100043c0:	00800144 	movi	r2,5
100043c4:	3884c41e 	bne	r7,r2,100056d8 <_dtoa_r+0x1628>
100043c8:	00800044 	movi	r2,1
100043cc:	d8800b15 	stw	r2,44(sp)
100043d0:	d8c00517 	ldw	r3,20(sp)
100043d4:	d9002217 	ldw	r4,136(sp)
100043d8:	1907883a 	add	r3,r3,r4
100043dc:	19800044 	addi	r6,r3,1
100043e0:	d8c00c15 	stw	r3,48(sp)
100043e4:	d9800615 	stw	r6,24(sp)
100043e8:	0183a40e 	bge	zero,r6,1000527c <_dtoa_r+0x11cc>
100043ec:	d9800617 	ldw	r6,24(sp)
100043f0:	3021883a 	mov	r16,r6
100043f4:	e0001115 	stw	zero,68(fp)
100043f8:	008005c4 	movi	r2,23
100043fc:	1184c92e 	bgeu	r2,r6,10005724 <_dtoa_r+0x1674>
10004400:	00c00044 	movi	r3,1
10004404:	00800104 	movi	r2,4
10004408:	1085883a 	add	r2,r2,r2
1000440c:	11000504 	addi	r4,r2,20
10004410:	180b883a 	mov	r5,r3
10004414:	18c00044 	addi	r3,r3,1
10004418:	313ffb2e 	bgeu	r6,r4,10004408 <__alt_data_end+0xf8004408>
1000441c:	e1401115 	stw	r5,68(fp)
10004420:	e009883a 	mov	r4,fp
10004424:	0006ffc0 	call	10006ffc <_Balloc>
10004428:	d8800715 	stw	r2,28(sp)
1000442c:	e0801015 	stw	r2,64(fp)
10004430:	00800384 	movi	r2,14
10004434:	1400f736 	bltu	r2,r16,10004814 <_dtoa_r+0x764>
10004438:	8800f626 	beq	r17,zero,10004814 <_dtoa_r+0x764>
1000443c:	d9c00517 	ldw	r7,20(sp)
10004440:	01c39a0e 	bge	zero,r7,100052ac <_dtoa_r+0x11fc>
10004444:	388003cc 	andi	r2,r7,15
10004448:	100490fa 	slli	r2,r2,3
1000444c:	382bd13a 	srai	r21,r7,4
10004450:	00c40074 	movhi	r3,4097
10004454:	18c69304 	addi	r3,r3,6732
10004458:	1885883a 	add	r2,r3,r2
1000445c:	a8c0040c 	andi	r3,r21,16
10004460:	12400017 	ldw	r9,0(r2)
10004464:	12000117 	ldw	r8,4(r2)
10004468:	18037926 	beq	r3,zero,10005250 <_dtoa_r+0x11a0>
1000446c:	00840074 	movhi	r2,4097
10004470:	10868904 	addi	r2,r2,6692
10004474:	11800817 	ldw	r6,32(r2)
10004478:	11c00917 	ldw	r7,36(r2)
1000447c:	9009883a 	mov	r4,r18
10004480:	980b883a 	mov	r5,r19
10004484:	da001715 	stw	r8,92(sp)
10004488:	da401615 	stw	r9,88(sp)
1000448c:	000c9700 	call	1000c970 <__divdf3>
10004490:	da001717 	ldw	r8,92(sp)
10004494:	da401617 	ldw	r9,88(sp)
10004498:	ad4003cc 	andi	r21,r21,15
1000449c:	040000c4 	movi	r16,3
100044a0:	1023883a 	mov	r17,r2
100044a4:	1829883a 	mov	r20,r3
100044a8:	a8001126 	beq	r21,zero,100044f0 <_dtoa_r+0x440>
100044ac:	05c40074 	movhi	r23,4097
100044b0:	bdc68904 	addi	r23,r23,6692
100044b4:	4805883a 	mov	r2,r9
100044b8:	4007883a 	mov	r3,r8
100044bc:	a980004c 	andi	r6,r21,1
100044c0:	1009883a 	mov	r4,r2
100044c4:	a82bd07a 	srai	r21,r21,1
100044c8:	180b883a 	mov	r5,r3
100044cc:	30000426 	beq	r6,zero,100044e0 <_dtoa_r+0x430>
100044d0:	b9800017 	ldw	r6,0(r23)
100044d4:	b9c00117 	ldw	r7,4(r23)
100044d8:	84000044 	addi	r16,r16,1
100044dc:	000d5980 	call	1000d598 <__muldf3>
100044e0:	bdc00204 	addi	r23,r23,8
100044e4:	a83ff51e 	bne	r21,zero,100044bc <__alt_data_end+0xf80044bc>
100044e8:	1013883a 	mov	r9,r2
100044ec:	1811883a 	mov	r8,r3
100044f0:	480d883a 	mov	r6,r9
100044f4:	400f883a 	mov	r7,r8
100044f8:	8809883a 	mov	r4,r17
100044fc:	a00b883a 	mov	r5,r20
10004500:	000c9700 	call	1000c970 <__divdf3>
10004504:	d8800f15 	stw	r2,60(sp)
10004508:	d8c01015 	stw	r3,64(sp)
1000450c:	d8c00e17 	ldw	r3,56(sp)
10004510:	18000626 	beq	r3,zero,1000452c <_dtoa_r+0x47c>
10004514:	d9000f17 	ldw	r4,60(sp)
10004518:	d9401017 	ldw	r5,64(sp)
1000451c:	000d883a 	mov	r6,zero
10004520:	01cffc34 	movhi	r7,16368
10004524:	000d4a40 	call	1000d4a4 <__ledf2>
10004528:	10040b16 	blt	r2,zero,10005558 <_dtoa_r+0x14a8>
1000452c:	8009883a 	mov	r4,r16
10004530:	000e77c0 	call	1000e77c <__floatsidf>
10004534:	d9800f17 	ldw	r6,60(sp)
10004538:	d9c01017 	ldw	r7,64(sp)
1000453c:	1009883a 	mov	r4,r2
10004540:	180b883a 	mov	r5,r3
10004544:	000d5980 	call	1000d598 <__muldf3>
10004548:	000d883a 	mov	r6,zero
1000454c:	01d00734 	movhi	r7,16412
10004550:	1009883a 	mov	r4,r2
10004554:	180b883a 	mov	r5,r3
10004558:	000c0c40 	call	1000c0c4 <__adddf3>
1000455c:	1021883a 	mov	r16,r2
10004560:	d8800617 	ldw	r2,24(sp)
10004564:	047f3034 	movhi	r17,64704
10004568:	1c63883a 	add	r17,r3,r17
1000456c:	10031826 	beq	r2,zero,100051d0 <_dtoa_r+0x1120>
10004570:	d8c00517 	ldw	r3,20(sp)
10004574:	db000617 	ldw	r12,24(sp)
10004578:	d8c01315 	stw	r3,76(sp)
1000457c:	d9000b17 	ldw	r4,44(sp)
10004580:	20038f26 	beq	r4,zero,100053c0 <_dtoa_r+0x1310>
10004584:	60bfffc4 	addi	r2,r12,-1
10004588:	100490fa 	slli	r2,r2,3
1000458c:	00c40074 	movhi	r3,4097
10004590:	18c69304 	addi	r3,r3,6732
10004594:	1885883a 	add	r2,r3,r2
10004598:	11800017 	ldw	r6,0(r2)
1000459c:	11c00117 	ldw	r7,4(r2)
100045a0:	d8800717 	ldw	r2,28(sp)
100045a4:	0009883a 	mov	r4,zero
100045a8:	014ff834 	movhi	r5,16352
100045ac:	db001615 	stw	r12,88(sp)
100045b0:	15c00044 	addi	r23,r2,1
100045b4:	000c9700 	call	1000c970 <__divdf3>
100045b8:	800d883a 	mov	r6,r16
100045bc:	880f883a 	mov	r7,r17
100045c0:	1009883a 	mov	r4,r2
100045c4:	180b883a 	mov	r5,r3
100045c8:	000de000 	call	1000de00 <__subdf3>
100045cc:	d9401017 	ldw	r5,64(sp)
100045d0:	d9000f17 	ldw	r4,60(sp)
100045d4:	102b883a 	mov	r21,r2
100045d8:	d8c01215 	stw	r3,72(sp)
100045dc:	000e6fc0 	call	1000e6fc <__fixdfsi>
100045e0:	1009883a 	mov	r4,r2
100045e4:	1029883a 	mov	r20,r2
100045e8:	000e77c0 	call	1000e77c <__floatsidf>
100045ec:	d9000f17 	ldw	r4,60(sp)
100045f0:	d9401017 	ldw	r5,64(sp)
100045f4:	100d883a 	mov	r6,r2
100045f8:	180f883a 	mov	r7,r3
100045fc:	000de000 	call	1000de00 <__subdf3>
10004600:	1823883a 	mov	r17,r3
10004604:	d8c00717 	ldw	r3,28(sp)
10004608:	d9401217 	ldw	r5,72(sp)
1000460c:	a2000c04 	addi	r8,r20,48
10004610:	1021883a 	mov	r16,r2
10004614:	1a000005 	stb	r8,0(r3)
10004618:	800d883a 	mov	r6,r16
1000461c:	880f883a 	mov	r7,r17
10004620:	a809883a 	mov	r4,r21
10004624:	4029883a 	mov	r20,r8
10004628:	000d3c80 	call	1000d3c8 <__gedf2>
1000462c:	00841d16 	blt	zero,r2,100056a4 <_dtoa_r+0x15f4>
10004630:	800d883a 	mov	r6,r16
10004634:	880f883a 	mov	r7,r17
10004638:	0009883a 	mov	r4,zero
1000463c:	014ffc34 	movhi	r5,16368
10004640:	000de000 	call	1000de00 <__subdf3>
10004644:	d9401217 	ldw	r5,72(sp)
10004648:	100d883a 	mov	r6,r2
1000464c:	180f883a 	mov	r7,r3
10004650:	a809883a 	mov	r4,r21
10004654:	000d3c80 	call	1000d3c8 <__gedf2>
10004658:	db001617 	ldw	r12,88(sp)
1000465c:	00840e16 	blt	zero,r2,10005698 <_dtoa_r+0x15e8>
10004660:	00800044 	movi	r2,1
10004664:	13006b0e 	bge	r2,r12,10004814 <_dtoa_r+0x764>
10004668:	d9000717 	ldw	r4,28(sp)
1000466c:	dd800f15 	stw	r22,60(sp)
10004670:	dcc01015 	stw	r19,64(sp)
10004674:	2319883a 	add	r12,r4,r12
10004678:	dcc01217 	ldw	r19,72(sp)
1000467c:	602d883a 	mov	r22,r12
10004680:	dc801215 	stw	r18,72(sp)
10004684:	b825883a 	mov	r18,r23
10004688:	00000906 	br	100046b0 <_dtoa_r+0x600>
1000468c:	000de000 	call	1000de00 <__subdf3>
10004690:	a80d883a 	mov	r6,r21
10004694:	980f883a 	mov	r7,r19
10004698:	1009883a 	mov	r4,r2
1000469c:	180b883a 	mov	r5,r3
100046a0:	000d4a40 	call	1000d4a4 <__ledf2>
100046a4:	1003e816 	blt	r2,zero,10005648 <_dtoa_r+0x1598>
100046a8:	b825883a 	mov	r18,r23
100046ac:	bd83e926 	beq	r23,r22,10005654 <_dtoa_r+0x15a4>
100046b0:	a809883a 	mov	r4,r21
100046b4:	980b883a 	mov	r5,r19
100046b8:	000d883a 	mov	r6,zero
100046bc:	01d00934 	movhi	r7,16420
100046c0:	000d5980 	call	1000d598 <__muldf3>
100046c4:	000d883a 	mov	r6,zero
100046c8:	01d00934 	movhi	r7,16420
100046cc:	8009883a 	mov	r4,r16
100046d0:	880b883a 	mov	r5,r17
100046d4:	102b883a 	mov	r21,r2
100046d8:	1827883a 	mov	r19,r3
100046dc:	000d5980 	call	1000d598 <__muldf3>
100046e0:	180b883a 	mov	r5,r3
100046e4:	1009883a 	mov	r4,r2
100046e8:	1821883a 	mov	r16,r3
100046ec:	1023883a 	mov	r17,r2
100046f0:	000e6fc0 	call	1000e6fc <__fixdfsi>
100046f4:	1009883a 	mov	r4,r2
100046f8:	1029883a 	mov	r20,r2
100046fc:	000e77c0 	call	1000e77c <__floatsidf>
10004700:	8809883a 	mov	r4,r17
10004704:	800b883a 	mov	r5,r16
10004708:	100d883a 	mov	r6,r2
1000470c:	180f883a 	mov	r7,r3
10004710:	000de000 	call	1000de00 <__subdf3>
10004714:	a5000c04 	addi	r20,r20,48
10004718:	a80d883a 	mov	r6,r21
1000471c:	980f883a 	mov	r7,r19
10004720:	1009883a 	mov	r4,r2
10004724:	180b883a 	mov	r5,r3
10004728:	95000005 	stb	r20,0(r18)
1000472c:	1021883a 	mov	r16,r2
10004730:	1823883a 	mov	r17,r3
10004734:	000d4a40 	call	1000d4a4 <__ledf2>
10004738:	bdc00044 	addi	r23,r23,1
1000473c:	800d883a 	mov	r6,r16
10004740:	880f883a 	mov	r7,r17
10004744:	0009883a 	mov	r4,zero
10004748:	014ffc34 	movhi	r5,16368
1000474c:	103fcf0e 	bge	r2,zero,1000468c <__alt_data_end+0xf800468c>
10004750:	d8c01317 	ldw	r3,76(sp)
10004754:	d8c00515 	stw	r3,20(sp)
10004758:	d9400917 	ldw	r5,36(sp)
1000475c:	e009883a 	mov	r4,fp
10004760:	00070a40 	call	100070a4 <_Bfree>
10004764:	d9000517 	ldw	r4,20(sp)
10004768:	d9802317 	ldw	r6,140(sp)
1000476c:	d9c02517 	ldw	r7,148(sp)
10004770:	b8000005 	stb	zero,0(r23)
10004774:	20800044 	addi	r2,r4,1
10004778:	30800015 	stw	r2,0(r6)
1000477c:	3802aa26 	beq	r7,zero,10005228 <_dtoa_r+0x1178>
10004780:	3dc00015 	stw	r23,0(r7)
10004784:	d8800717 	ldw	r2,28(sp)
10004788:	003e7906 	br	10004170 <__alt_data_end+0xf8004170>
1000478c:	00800434 	movhi	r2,16
10004790:	10bfffc4 	addi	r2,r2,-1
10004794:	88a2703a 	and	r17,r17,r2
10004798:	883e851e 	bne	r17,zero,100041b0 <__alt_data_end+0xf80041b0>
1000479c:	00840074 	movhi	r2,4097
100047a0:	10867504 	addi	r2,r2,6612
100047a4:	003e8406 	br	100041b8 <__alt_data_end+0xf80041b8>
100047a8:	10c00204 	addi	r3,r2,8
100047ac:	003e8706 	br	100041cc <__alt_data_end+0xf80041cc>
100047b0:	01400434 	movhi	r5,16
100047b4:	297fffc4 	addi	r5,r5,-1
100047b8:	994a703a 	and	r5,r19,r5
100047bc:	9009883a 	mov	r4,r18
100047c0:	843f0044 	addi	r16,r16,-1023
100047c4:	294ffc34 	orhi	r5,r5,16368
100047c8:	dd800217 	ldw	r22,8(sp)
100047cc:	d8001115 	stw	zero,68(sp)
100047d0:	003ea506 	br	10004268 <__alt_data_end+0xf8004268>
100047d4:	00840074 	movhi	r2,4097
100047d8:	10866c04 	addi	r2,r2,6576
100047dc:	003e6406 	br	10004170 <__alt_data_end+0xf8004170>
100047e0:	e0001115 	stw	zero,68(fp)
100047e4:	000b883a 	mov	r5,zero
100047e8:	e009883a 	mov	r4,fp
100047ec:	0006ffc0 	call	10006ffc <_Balloc>
100047f0:	01bfffc4 	movi	r6,-1
100047f4:	01c00044 	movi	r7,1
100047f8:	d8800715 	stw	r2,28(sp)
100047fc:	d9800c15 	stw	r6,48(sp)
10004800:	e0801015 	stw	r2,64(fp)
10004804:	d8000315 	stw	zero,12(sp)
10004808:	d9c00b15 	stw	r7,44(sp)
1000480c:	d9800615 	stw	r6,24(sp)
10004810:	d8002215 	stw	zero,136(sp)
10004814:	d8800117 	ldw	r2,4(sp)
10004818:	10008916 	blt	r2,zero,10004a40 <_dtoa_r+0x990>
1000481c:	d9000517 	ldw	r4,20(sp)
10004820:	00c00384 	movi	r3,14
10004824:	19008616 	blt	r3,r4,10004a40 <_dtoa_r+0x990>
10004828:	200490fa 	slli	r2,r4,3
1000482c:	00c40074 	movhi	r3,4097
10004830:	d9802217 	ldw	r6,136(sp)
10004834:	18c69304 	addi	r3,r3,6732
10004838:	1885883a 	add	r2,r3,r2
1000483c:	14000017 	ldw	r16,0(r2)
10004840:	14400117 	ldw	r17,4(r2)
10004844:	30016316 	blt	r6,zero,10004dd4 <_dtoa_r+0xd24>
10004848:	800d883a 	mov	r6,r16
1000484c:	880f883a 	mov	r7,r17
10004850:	9009883a 	mov	r4,r18
10004854:	980b883a 	mov	r5,r19
10004858:	000c9700 	call	1000c970 <__divdf3>
1000485c:	180b883a 	mov	r5,r3
10004860:	1009883a 	mov	r4,r2
10004864:	000e6fc0 	call	1000e6fc <__fixdfsi>
10004868:	1009883a 	mov	r4,r2
1000486c:	102b883a 	mov	r21,r2
10004870:	000e77c0 	call	1000e77c <__floatsidf>
10004874:	800d883a 	mov	r6,r16
10004878:	880f883a 	mov	r7,r17
1000487c:	1009883a 	mov	r4,r2
10004880:	180b883a 	mov	r5,r3
10004884:	000d5980 	call	1000d598 <__muldf3>
10004888:	100d883a 	mov	r6,r2
1000488c:	180f883a 	mov	r7,r3
10004890:	9009883a 	mov	r4,r18
10004894:	980b883a 	mov	r5,r19
10004898:	000de000 	call	1000de00 <__subdf3>
1000489c:	d9c00717 	ldw	r7,28(sp)
100048a0:	1009883a 	mov	r4,r2
100048a4:	a8800c04 	addi	r2,r21,48
100048a8:	38800005 	stb	r2,0(r7)
100048ac:	3dc00044 	addi	r23,r7,1
100048b0:	d9c00617 	ldw	r7,24(sp)
100048b4:	01800044 	movi	r6,1
100048b8:	180b883a 	mov	r5,r3
100048bc:	2005883a 	mov	r2,r4
100048c0:	39803826 	beq	r7,r6,100049a4 <_dtoa_r+0x8f4>
100048c4:	000d883a 	mov	r6,zero
100048c8:	01d00934 	movhi	r7,16420
100048cc:	000d5980 	call	1000d598 <__muldf3>
100048d0:	000d883a 	mov	r6,zero
100048d4:	000f883a 	mov	r7,zero
100048d8:	1009883a 	mov	r4,r2
100048dc:	180b883a 	mov	r5,r3
100048e0:	1025883a 	mov	r18,r2
100048e4:	1827883a 	mov	r19,r3
100048e8:	000d3400 	call	1000d340 <__eqdf2>
100048ec:	103f9a26 	beq	r2,zero,10004758 <__alt_data_end+0xf8004758>
100048f0:	d9c00617 	ldw	r7,24(sp)
100048f4:	d8c00717 	ldw	r3,28(sp)
100048f8:	b829883a 	mov	r20,r23
100048fc:	38bfffc4 	addi	r2,r7,-1
10004900:	18ad883a 	add	r22,r3,r2
10004904:	00000a06 	br	10004930 <_dtoa_r+0x880>
10004908:	000d5980 	call	1000d598 <__muldf3>
1000490c:	000d883a 	mov	r6,zero
10004910:	000f883a 	mov	r7,zero
10004914:	1009883a 	mov	r4,r2
10004918:	180b883a 	mov	r5,r3
1000491c:	1025883a 	mov	r18,r2
10004920:	1827883a 	mov	r19,r3
10004924:	b829883a 	mov	r20,r23
10004928:	000d3400 	call	1000d340 <__eqdf2>
1000492c:	103f8a26 	beq	r2,zero,10004758 <__alt_data_end+0xf8004758>
10004930:	800d883a 	mov	r6,r16
10004934:	880f883a 	mov	r7,r17
10004938:	9009883a 	mov	r4,r18
1000493c:	980b883a 	mov	r5,r19
10004940:	000c9700 	call	1000c970 <__divdf3>
10004944:	180b883a 	mov	r5,r3
10004948:	1009883a 	mov	r4,r2
1000494c:	000e6fc0 	call	1000e6fc <__fixdfsi>
10004950:	1009883a 	mov	r4,r2
10004954:	102b883a 	mov	r21,r2
10004958:	000e77c0 	call	1000e77c <__floatsidf>
1000495c:	800d883a 	mov	r6,r16
10004960:	880f883a 	mov	r7,r17
10004964:	1009883a 	mov	r4,r2
10004968:	180b883a 	mov	r5,r3
1000496c:	000d5980 	call	1000d598 <__muldf3>
10004970:	100d883a 	mov	r6,r2
10004974:	180f883a 	mov	r7,r3
10004978:	9009883a 	mov	r4,r18
1000497c:	980b883a 	mov	r5,r19
10004980:	000de000 	call	1000de00 <__subdf3>
10004984:	aa000c04 	addi	r8,r21,48
10004988:	a2000005 	stb	r8,0(r20)
1000498c:	000d883a 	mov	r6,zero
10004990:	01d00934 	movhi	r7,16420
10004994:	1009883a 	mov	r4,r2
10004998:	180b883a 	mov	r5,r3
1000499c:	a5c00044 	addi	r23,r20,1
100049a0:	b53fd91e 	bne	r22,r20,10004908 <__alt_data_end+0xf8004908>
100049a4:	100d883a 	mov	r6,r2
100049a8:	180f883a 	mov	r7,r3
100049ac:	1009883a 	mov	r4,r2
100049b0:	180b883a 	mov	r5,r3
100049b4:	000c0c40 	call	1000c0c4 <__adddf3>
100049b8:	100d883a 	mov	r6,r2
100049bc:	180f883a 	mov	r7,r3
100049c0:	8009883a 	mov	r4,r16
100049c4:	880b883a 	mov	r5,r17
100049c8:	1027883a 	mov	r19,r2
100049cc:	1825883a 	mov	r18,r3
100049d0:	000d4a40 	call	1000d4a4 <__ledf2>
100049d4:	10000816 	blt	r2,zero,100049f8 <_dtoa_r+0x948>
100049d8:	980d883a 	mov	r6,r19
100049dc:	900f883a 	mov	r7,r18
100049e0:	8009883a 	mov	r4,r16
100049e4:	880b883a 	mov	r5,r17
100049e8:	000d3400 	call	1000d340 <__eqdf2>
100049ec:	103f5a1e 	bne	r2,zero,10004758 <__alt_data_end+0xf8004758>
100049f0:	ad40004c 	andi	r21,r21,1
100049f4:	a83f5826 	beq	r21,zero,10004758 <__alt_data_end+0xf8004758>
100049f8:	bd3fffc3 	ldbu	r20,-1(r23)
100049fc:	b8bfffc4 	addi	r2,r23,-1
10004a00:	1007883a 	mov	r3,r2
10004a04:	01400e44 	movi	r5,57
10004a08:	d9800717 	ldw	r6,28(sp)
10004a0c:	00000506 	br	10004a24 <_dtoa_r+0x974>
10004a10:	18ffffc4 	addi	r3,r3,-1
10004a14:	11824726 	beq	r2,r6,10005334 <_dtoa_r+0x1284>
10004a18:	1d000003 	ldbu	r20,0(r3)
10004a1c:	102f883a 	mov	r23,r2
10004a20:	10bfffc4 	addi	r2,r2,-1
10004a24:	a1003fcc 	andi	r4,r20,255
10004a28:	2100201c 	xori	r4,r4,128
10004a2c:	213fe004 	addi	r4,r4,-128
10004a30:	217ff726 	beq	r4,r5,10004a10 <__alt_data_end+0xf8004a10>
10004a34:	a2000044 	addi	r8,r20,1
10004a38:	12000005 	stb	r8,0(r2)
10004a3c:	003f4606 	br	10004758 <__alt_data_end+0xf8004758>
10004a40:	d9000b17 	ldw	r4,44(sp)
10004a44:	2000c826 	beq	r4,zero,10004d68 <_dtoa_r+0xcb8>
10004a48:	d9800317 	ldw	r6,12(sp)
10004a4c:	00c00044 	movi	r3,1
10004a50:	1980f90e 	bge	r3,r6,10004e38 <_dtoa_r+0xd88>
10004a54:	d8800617 	ldw	r2,24(sp)
10004a58:	d8c00a17 	ldw	r3,40(sp)
10004a5c:	157fffc4 	addi	r21,r2,-1
10004a60:	1d41f316 	blt	r3,r21,10005230 <_dtoa_r+0x1180>
10004a64:	1d6bc83a 	sub	r21,r3,r21
10004a68:	d9c00617 	ldw	r7,24(sp)
10004a6c:	3802aa16 	blt	r7,zero,10005518 <_dtoa_r+0x1468>
10004a70:	dd000817 	ldw	r20,32(sp)
10004a74:	d8800617 	ldw	r2,24(sp)
10004a78:	d8c00817 	ldw	r3,32(sp)
10004a7c:	01400044 	movi	r5,1
10004a80:	e009883a 	mov	r4,fp
10004a84:	1887883a 	add	r3,r3,r2
10004a88:	d8c00815 	stw	r3,32(sp)
10004a8c:	b0ad883a 	add	r22,r22,r2
10004a90:	00074300 	call	10007430 <__i2b>
10004a94:	1023883a 	mov	r17,r2
10004a98:	a0000826 	beq	r20,zero,10004abc <_dtoa_r+0xa0c>
10004a9c:	0580070e 	bge	zero,r22,10004abc <_dtoa_r+0xa0c>
10004aa0:	a005883a 	mov	r2,r20
10004aa4:	b500b916 	blt	r22,r20,10004d8c <_dtoa_r+0xcdc>
10004aa8:	d9000817 	ldw	r4,32(sp)
10004aac:	a0a9c83a 	sub	r20,r20,r2
10004ab0:	b0adc83a 	sub	r22,r22,r2
10004ab4:	2089c83a 	sub	r4,r4,r2
10004ab8:	d9000815 	stw	r4,32(sp)
10004abc:	d9800a17 	ldw	r6,40(sp)
10004ac0:	0181810e 	bge	zero,r6,100050c8 <_dtoa_r+0x1018>
10004ac4:	d9c00b17 	ldw	r7,44(sp)
10004ac8:	3800b326 	beq	r7,zero,10004d98 <_dtoa_r+0xce8>
10004acc:	a800b226 	beq	r21,zero,10004d98 <_dtoa_r+0xce8>
10004ad0:	880b883a 	mov	r5,r17
10004ad4:	a80d883a 	mov	r6,r21
10004ad8:	e009883a 	mov	r4,fp
10004adc:	00076f80 	call	100076f8 <__pow5mult>
10004ae0:	d9800917 	ldw	r6,36(sp)
10004ae4:	100b883a 	mov	r5,r2
10004ae8:	e009883a 	mov	r4,fp
10004aec:	1023883a 	mov	r17,r2
10004af0:	000746c0 	call	1000746c <__multiply>
10004af4:	1021883a 	mov	r16,r2
10004af8:	d8800a17 	ldw	r2,40(sp)
10004afc:	d9400917 	ldw	r5,36(sp)
10004b00:	e009883a 	mov	r4,fp
10004b04:	1545c83a 	sub	r2,r2,r21
10004b08:	d8800a15 	stw	r2,40(sp)
10004b0c:	00070a40 	call	100070a4 <_Bfree>
10004b10:	d8c00a17 	ldw	r3,40(sp)
10004b14:	18009f1e 	bne	r3,zero,10004d94 <_dtoa_r+0xce4>
10004b18:	05c00044 	movi	r23,1
10004b1c:	e009883a 	mov	r4,fp
10004b20:	b80b883a 	mov	r5,r23
10004b24:	00074300 	call	10007430 <__i2b>
10004b28:	d9000d17 	ldw	r4,52(sp)
10004b2c:	102b883a 	mov	r21,r2
10004b30:	2000ce26 	beq	r4,zero,10004e6c <_dtoa_r+0xdbc>
10004b34:	200d883a 	mov	r6,r4
10004b38:	100b883a 	mov	r5,r2
10004b3c:	e009883a 	mov	r4,fp
10004b40:	00076f80 	call	100076f8 <__pow5mult>
10004b44:	d9800317 	ldw	r6,12(sp)
10004b48:	102b883a 	mov	r21,r2
10004b4c:	b981810e 	bge	r23,r6,10005154 <_dtoa_r+0x10a4>
10004b50:	0027883a 	mov	r19,zero
10004b54:	a8800417 	ldw	r2,16(r21)
10004b58:	05c00804 	movi	r23,32
10004b5c:	10800104 	addi	r2,r2,4
10004b60:	1085883a 	add	r2,r2,r2
10004b64:	1085883a 	add	r2,r2,r2
10004b68:	a885883a 	add	r2,r21,r2
10004b6c:	11000017 	ldw	r4,0(r2)
10004b70:	00073180 	call	10007318 <__hi0bits>
10004b74:	b885c83a 	sub	r2,r23,r2
10004b78:	1585883a 	add	r2,r2,r22
10004b7c:	108007cc 	andi	r2,r2,31
10004b80:	1000b326 	beq	r2,zero,10004e50 <_dtoa_r+0xda0>
10004b84:	00c00804 	movi	r3,32
10004b88:	1887c83a 	sub	r3,r3,r2
10004b8c:	01000104 	movi	r4,4
10004b90:	20c2cd0e 	bge	r4,r3,100056c8 <_dtoa_r+0x1618>
10004b94:	00c00704 	movi	r3,28
10004b98:	1885c83a 	sub	r2,r3,r2
10004b9c:	d8c00817 	ldw	r3,32(sp)
10004ba0:	a0a9883a 	add	r20,r20,r2
10004ba4:	b0ad883a 	add	r22,r22,r2
10004ba8:	1887883a 	add	r3,r3,r2
10004bac:	d8c00815 	stw	r3,32(sp)
10004bb0:	d9800817 	ldw	r6,32(sp)
10004bb4:	0180040e 	bge	zero,r6,10004bc8 <_dtoa_r+0xb18>
10004bb8:	800b883a 	mov	r5,r16
10004bbc:	e009883a 	mov	r4,fp
10004bc0:	00078380 	call	10007838 <__lshift>
10004bc4:	1021883a 	mov	r16,r2
10004bc8:	0580050e 	bge	zero,r22,10004be0 <_dtoa_r+0xb30>
10004bcc:	a80b883a 	mov	r5,r21
10004bd0:	b00d883a 	mov	r6,r22
10004bd4:	e009883a 	mov	r4,fp
10004bd8:	00078380 	call	10007838 <__lshift>
10004bdc:	102b883a 	mov	r21,r2
10004be0:	d9c00e17 	ldw	r7,56(sp)
10004be4:	3801211e 	bne	r7,zero,1000506c <_dtoa_r+0xfbc>
10004be8:	d9800617 	ldw	r6,24(sp)
10004bec:	0181380e 	bge	zero,r6,100050d0 <_dtoa_r+0x1020>
10004bf0:	d8c00b17 	ldw	r3,44(sp)
10004bf4:	1800ab1e 	bne	r3,zero,10004ea4 <_dtoa_r+0xdf4>
10004bf8:	dc800717 	ldw	r18,28(sp)
10004bfc:	dcc00617 	ldw	r19,24(sp)
10004c00:	9029883a 	mov	r20,r18
10004c04:	00000206 	br	10004c10 <_dtoa_r+0xb60>
10004c08:	00070cc0 	call	100070cc <__multadd>
10004c0c:	1021883a 	mov	r16,r2
10004c10:	a80b883a 	mov	r5,r21
10004c14:	8009883a 	mov	r4,r16
10004c18:	0003e880 	call	10003e88 <quorem>
10004c1c:	10800c04 	addi	r2,r2,48
10004c20:	90800005 	stb	r2,0(r18)
10004c24:	94800044 	addi	r18,r18,1
10004c28:	9507c83a 	sub	r3,r18,r20
10004c2c:	000f883a 	mov	r7,zero
10004c30:	01800284 	movi	r6,10
10004c34:	800b883a 	mov	r5,r16
10004c38:	e009883a 	mov	r4,fp
10004c3c:	1cfff216 	blt	r3,r19,10004c08 <__alt_data_end+0xf8004c08>
10004c40:	1011883a 	mov	r8,r2
10004c44:	d8800617 	ldw	r2,24(sp)
10004c48:	0082370e 	bge	zero,r2,10005528 <_dtoa_r+0x1478>
10004c4c:	d9000717 	ldw	r4,28(sp)
10004c50:	0025883a 	mov	r18,zero
10004c54:	20af883a 	add	r23,r4,r2
10004c58:	01800044 	movi	r6,1
10004c5c:	800b883a 	mov	r5,r16
10004c60:	e009883a 	mov	r4,fp
10004c64:	da001715 	stw	r8,92(sp)
10004c68:	00078380 	call	10007838 <__lshift>
10004c6c:	a80b883a 	mov	r5,r21
10004c70:	1009883a 	mov	r4,r2
10004c74:	d8800915 	stw	r2,36(sp)
10004c78:	00079800 	call	10007980 <__mcmp>
10004c7c:	da001717 	ldw	r8,92(sp)
10004c80:	0081800e 	bge	zero,r2,10005284 <_dtoa_r+0x11d4>
10004c84:	b93fffc3 	ldbu	r4,-1(r23)
10004c88:	b8bfffc4 	addi	r2,r23,-1
10004c8c:	1007883a 	mov	r3,r2
10004c90:	01800e44 	movi	r6,57
10004c94:	d9c00717 	ldw	r7,28(sp)
10004c98:	00000506 	br	10004cb0 <_dtoa_r+0xc00>
10004c9c:	18ffffc4 	addi	r3,r3,-1
10004ca0:	11c12326 	beq	r2,r7,10005130 <_dtoa_r+0x1080>
10004ca4:	19000003 	ldbu	r4,0(r3)
10004ca8:	102f883a 	mov	r23,r2
10004cac:	10bfffc4 	addi	r2,r2,-1
10004cb0:	21403fcc 	andi	r5,r4,255
10004cb4:	2940201c 	xori	r5,r5,128
10004cb8:	297fe004 	addi	r5,r5,-128
10004cbc:	29bff726 	beq	r5,r6,10004c9c <__alt_data_end+0xf8004c9c>
10004cc0:	21000044 	addi	r4,r4,1
10004cc4:	11000005 	stb	r4,0(r2)
10004cc8:	a80b883a 	mov	r5,r21
10004ccc:	e009883a 	mov	r4,fp
10004cd0:	00070a40 	call	100070a4 <_Bfree>
10004cd4:	883ea026 	beq	r17,zero,10004758 <__alt_data_end+0xf8004758>
10004cd8:	90000426 	beq	r18,zero,10004cec <_dtoa_r+0xc3c>
10004cdc:	94400326 	beq	r18,r17,10004cec <_dtoa_r+0xc3c>
10004ce0:	900b883a 	mov	r5,r18
10004ce4:	e009883a 	mov	r4,fp
10004ce8:	00070a40 	call	100070a4 <_Bfree>
10004cec:	880b883a 	mov	r5,r17
10004cf0:	e009883a 	mov	r4,fp
10004cf4:	00070a40 	call	100070a4 <_Bfree>
10004cf8:	003e9706 	br	10004758 <__alt_data_end+0xf8004758>
10004cfc:	01800044 	movi	r6,1
10004d00:	d9800e15 	stw	r6,56(sp)
10004d04:	003d9606 	br	10004360 <__alt_data_end+0xf8004360>
10004d08:	d8800817 	ldw	r2,32(sp)
10004d0c:	d8c00517 	ldw	r3,20(sp)
10004d10:	d8000d15 	stw	zero,52(sp)
10004d14:	10c5c83a 	sub	r2,r2,r3
10004d18:	00c9c83a 	sub	r4,zero,r3
10004d1c:	d8800815 	stw	r2,32(sp)
10004d20:	d9000a15 	stw	r4,40(sp)
10004d24:	003d9706 	br	10004384 <__alt_data_end+0xf8004384>
10004d28:	05adc83a 	sub	r22,zero,r22
10004d2c:	dd800815 	stw	r22,32(sp)
10004d30:	002d883a 	mov	r22,zero
10004d34:	003d8e06 	br	10004370 <__alt_data_end+0xf8004370>
10004d38:	d9000517 	ldw	r4,20(sp)
10004d3c:	000e77c0 	call	1000e77c <__floatsidf>
10004d40:	100d883a 	mov	r6,r2
10004d44:	180f883a 	mov	r7,r3
10004d48:	a009883a 	mov	r4,r20
10004d4c:	880b883a 	mov	r5,r17
10004d50:	000d3400 	call	1000d340 <__eqdf2>
10004d54:	103d7126 	beq	r2,zero,1000431c <__alt_data_end+0xf800431c>
10004d58:	d9c00517 	ldw	r7,20(sp)
10004d5c:	39ffffc4 	addi	r7,r7,-1
10004d60:	d9c00515 	stw	r7,20(sp)
10004d64:	003d6d06 	br	1000431c <__alt_data_end+0xf800431c>
10004d68:	dd400a17 	ldw	r21,40(sp)
10004d6c:	dd000817 	ldw	r20,32(sp)
10004d70:	0023883a 	mov	r17,zero
10004d74:	003f4806 	br	10004a98 <__alt_data_end+0xf8004a98>
10004d78:	10e3c83a 	sub	r17,r2,r3
10004d7c:	9448983a 	sll	r4,r18,r17
10004d80:	003d3206 	br	1000424c <__alt_data_end+0xf800424c>
10004d84:	d8000e15 	stw	zero,56(sp)
10004d88:	003d7506 	br	10004360 <__alt_data_end+0xf8004360>
10004d8c:	b005883a 	mov	r2,r22
10004d90:	003f4506 	br	10004aa8 <__alt_data_end+0xf8004aa8>
10004d94:	dc000915 	stw	r16,36(sp)
10004d98:	d9800a17 	ldw	r6,40(sp)
10004d9c:	d9400917 	ldw	r5,36(sp)
10004da0:	e009883a 	mov	r4,fp
10004da4:	00076f80 	call	100076f8 <__pow5mult>
10004da8:	1021883a 	mov	r16,r2
10004dac:	003f5a06 	br	10004b18 <__alt_data_end+0xf8004b18>
10004db0:	01c00044 	movi	r7,1
10004db4:	d9c00b15 	stw	r7,44(sp)
10004db8:	d8802217 	ldw	r2,136(sp)
10004dbc:	0081280e 	bge	zero,r2,10005260 <_dtoa_r+0x11b0>
10004dc0:	100d883a 	mov	r6,r2
10004dc4:	1021883a 	mov	r16,r2
10004dc8:	d8800c15 	stw	r2,48(sp)
10004dcc:	d8800615 	stw	r2,24(sp)
10004dd0:	003d8806 	br	100043f4 <__alt_data_end+0xf80043f4>
10004dd4:	d8800617 	ldw	r2,24(sp)
10004dd8:	00be9b16 	blt	zero,r2,10004848 <__alt_data_end+0xf8004848>
10004ddc:	10010f1e 	bne	r2,zero,1000521c <_dtoa_r+0x116c>
10004de0:	880b883a 	mov	r5,r17
10004de4:	000d883a 	mov	r6,zero
10004de8:	01d00534 	movhi	r7,16404
10004dec:	8009883a 	mov	r4,r16
10004df0:	000d5980 	call	1000d598 <__muldf3>
10004df4:	900d883a 	mov	r6,r18
10004df8:	980f883a 	mov	r7,r19
10004dfc:	1009883a 	mov	r4,r2
10004e00:	180b883a 	mov	r5,r3
10004e04:	000d3c80 	call	1000d3c8 <__gedf2>
10004e08:	002b883a 	mov	r21,zero
10004e0c:	0023883a 	mov	r17,zero
10004e10:	1000bf16 	blt	r2,zero,10005110 <_dtoa_r+0x1060>
10004e14:	d9802217 	ldw	r6,136(sp)
10004e18:	ddc00717 	ldw	r23,28(sp)
10004e1c:	018c303a 	nor	r6,zero,r6
10004e20:	d9800515 	stw	r6,20(sp)
10004e24:	a80b883a 	mov	r5,r21
10004e28:	e009883a 	mov	r4,fp
10004e2c:	00070a40 	call	100070a4 <_Bfree>
10004e30:	883e4926 	beq	r17,zero,10004758 <__alt_data_end+0xf8004758>
10004e34:	003fad06 	br	10004cec <__alt_data_end+0xf8004cec>
10004e38:	d9c01117 	ldw	r7,68(sp)
10004e3c:	3801bc26 	beq	r7,zero,10005530 <_dtoa_r+0x1480>
10004e40:	10810cc4 	addi	r2,r2,1075
10004e44:	dd400a17 	ldw	r21,40(sp)
10004e48:	dd000817 	ldw	r20,32(sp)
10004e4c:	003f0a06 	br	10004a78 <__alt_data_end+0xf8004a78>
10004e50:	00800704 	movi	r2,28
10004e54:	d9000817 	ldw	r4,32(sp)
10004e58:	a0a9883a 	add	r20,r20,r2
10004e5c:	b0ad883a 	add	r22,r22,r2
10004e60:	2089883a 	add	r4,r4,r2
10004e64:	d9000815 	stw	r4,32(sp)
10004e68:	003f5106 	br	10004bb0 <__alt_data_end+0xf8004bb0>
10004e6c:	d8c00317 	ldw	r3,12(sp)
10004e70:	b8c1fc0e 	bge	r23,r3,10005664 <_dtoa_r+0x15b4>
10004e74:	0027883a 	mov	r19,zero
10004e78:	b805883a 	mov	r2,r23
10004e7c:	003f3e06 	br	10004b78 <__alt_data_end+0xf8004b78>
10004e80:	880b883a 	mov	r5,r17
10004e84:	e009883a 	mov	r4,fp
10004e88:	000f883a 	mov	r7,zero
10004e8c:	01800284 	movi	r6,10
10004e90:	00070cc0 	call	100070cc <__multadd>
10004e94:	d9000c17 	ldw	r4,48(sp)
10004e98:	1023883a 	mov	r17,r2
10004e9c:	0102040e 	bge	zero,r4,100056b0 <_dtoa_r+0x1600>
10004ea0:	d9000615 	stw	r4,24(sp)
10004ea4:	0500050e 	bge	zero,r20,10004ebc <_dtoa_r+0xe0c>
10004ea8:	880b883a 	mov	r5,r17
10004eac:	a00d883a 	mov	r6,r20
10004eb0:	e009883a 	mov	r4,fp
10004eb4:	00078380 	call	10007838 <__lshift>
10004eb8:	1023883a 	mov	r17,r2
10004ebc:	9801241e 	bne	r19,zero,10005350 <_dtoa_r+0x12a0>
10004ec0:	8829883a 	mov	r20,r17
10004ec4:	d9000617 	ldw	r4,24(sp)
10004ec8:	dcc00717 	ldw	r19,28(sp)
10004ecc:	9480004c 	andi	r18,r18,1
10004ed0:	20bfffc4 	addi	r2,r4,-1
10004ed4:	9885883a 	add	r2,r19,r2
10004ed8:	d8800415 	stw	r2,16(sp)
10004edc:	dc800615 	stw	r18,24(sp)
10004ee0:	a80b883a 	mov	r5,r21
10004ee4:	8009883a 	mov	r4,r16
10004ee8:	0003e880 	call	10003e88 <quorem>
10004eec:	880b883a 	mov	r5,r17
10004ef0:	8009883a 	mov	r4,r16
10004ef4:	102f883a 	mov	r23,r2
10004ef8:	00079800 	call	10007980 <__mcmp>
10004efc:	a80b883a 	mov	r5,r21
10004f00:	a00d883a 	mov	r6,r20
10004f04:	e009883a 	mov	r4,fp
10004f08:	102d883a 	mov	r22,r2
10004f0c:	00079e00 	call	100079e0 <__mdiff>
10004f10:	1007883a 	mov	r3,r2
10004f14:	10800317 	ldw	r2,12(r2)
10004f18:	bc800c04 	addi	r18,r23,48
10004f1c:	180b883a 	mov	r5,r3
10004f20:	10004e1e 	bne	r2,zero,1000505c <_dtoa_r+0xfac>
10004f24:	8009883a 	mov	r4,r16
10004f28:	d8c01615 	stw	r3,88(sp)
10004f2c:	00079800 	call	10007980 <__mcmp>
10004f30:	d8c01617 	ldw	r3,88(sp)
10004f34:	e009883a 	mov	r4,fp
10004f38:	d8801615 	stw	r2,88(sp)
10004f3c:	180b883a 	mov	r5,r3
10004f40:	00070a40 	call	100070a4 <_Bfree>
10004f44:	d8801617 	ldw	r2,88(sp)
10004f48:	1000041e 	bne	r2,zero,10004f5c <_dtoa_r+0xeac>
10004f4c:	d9800317 	ldw	r6,12(sp)
10004f50:	3000021e 	bne	r6,zero,10004f5c <_dtoa_r+0xeac>
10004f54:	d8c00617 	ldw	r3,24(sp)
10004f58:	18003726 	beq	r3,zero,10005038 <_dtoa_r+0xf88>
10004f5c:	b0002016 	blt	r22,zero,10004fe0 <_dtoa_r+0xf30>
10004f60:	b000041e 	bne	r22,zero,10004f74 <_dtoa_r+0xec4>
10004f64:	d9000317 	ldw	r4,12(sp)
10004f68:	2000021e 	bne	r4,zero,10004f74 <_dtoa_r+0xec4>
10004f6c:	d8c00617 	ldw	r3,24(sp)
10004f70:	18001b26 	beq	r3,zero,10004fe0 <_dtoa_r+0xf30>
10004f74:	00810716 	blt	zero,r2,10005394 <_dtoa_r+0x12e4>
10004f78:	d8c00417 	ldw	r3,16(sp)
10004f7c:	9d800044 	addi	r22,r19,1
10004f80:	9c800005 	stb	r18,0(r19)
10004f84:	b02f883a 	mov	r23,r22
10004f88:	98c10626 	beq	r19,r3,100053a4 <_dtoa_r+0x12f4>
10004f8c:	800b883a 	mov	r5,r16
10004f90:	000f883a 	mov	r7,zero
10004f94:	01800284 	movi	r6,10
10004f98:	e009883a 	mov	r4,fp
10004f9c:	00070cc0 	call	100070cc <__multadd>
10004fa0:	1021883a 	mov	r16,r2
10004fa4:	000f883a 	mov	r7,zero
10004fa8:	01800284 	movi	r6,10
10004fac:	880b883a 	mov	r5,r17
10004fb0:	e009883a 	mov	r4,fp
10004fb4:	8d002526 	beq	r17,r20,1000504c <_dtoa_r+0xf9c>
10004fb8:	00070cc0 	call	100070cc <__multadd>
10004fbc:	a00b883a 	mov	r5,r20
10004fc0:	000f883a 	mov	r7,zero
10004fc4:	01800284 	movi	r6,10
10004fc8:	e009883a 	mov	r4,fp
10004fcc:	1023883a 	mov	r17,r2
10004fd0:	00070cc0 	call	100070cc <__multadd>
10004fd4:	1029883a 	mov	r20,r2
10004fd8:	b027883a 	mov	r19,r22
10004fdc:	003fc006 	br	10004ee0 <__alt_data_end+0xf8004ee0>
10004fe0:	9011883a 	mov	r8,r18
10004fe4:	00800e0e 	bge	zero,r2,10005020 <_dtoa_r+0xf70>
10004fe8:	800b883a 	mov	r5,r16
10004fec:	01800044 	movi	r6,1
10004ff0:	e009883a 	mov	r4,fp
10004ff4:	da001715 	stw	r8,92(sp)
10004ff8:	00078380 	call	10007838 <__lshift>
10004ffc:	a80b883a 	mov	r5,r21
10005000:	1009883a 	mov	r4,r2
10005004:	1021883a 	mov	r16,r2
10005008:	00079800 	call	10007980 <__mcmp>
1000500c:	da001717 	ldw	r8,92(sp)
10005010:	0081960e 	bge	zero,r2,1000566c <_dtoa_r+0x15bc>
10005014:	00800e44 	movi	r2,57
10005018:	40817026 	beq	r8,r2,100055dc <_dtoa_r+0x152c>
1000501c:	ba000c44 	addi	r8,r23,49
10005020:	8825883a 	mov	r18,r17
10005024:	9dc00044 	addi	r23,r19,1
10005028:	9a000005 	stb	r8,0(r19)
1000502c:	a023883a 	mov	r17,r20
10005030:	dc000915 	stw	r16,36(sp)
10005034:	003f2406 	br	10004cc8 <__alt_data_end+0xf8004cc8>
10005038:	00800e44 	movi	r2,57
1000503c:	9011883a 	mov	r8,r18
10005040:	90816626 	beq	r18,r2,100055dc <_dtoa_r+0x152c>
10005044:	05bff516 	blt	zero,r22,1000501c <__alt_data_end+0xf800501c>
10005048:	003ff506 	br	10005020 <__alt_data_end+0xf8005020>
1000504c:	00070cc0 	call	100070cc <__multadd>
10005050:	1023883a 	mov	r17,r2
10005054:	1029883a 	mov	r20,r2
10005058:	003fdf06 	br	10004fd8 <__alt_data_end+0xf8004fd8>
1000505c:	e009883a 	mov	r4,fp
10005060:	00070a40 	call	100070a4 <_Bfree>
10005064:	00800044 	movi	r2,1
10005068:	003fbc06 	br	10004f5c <__alt_data_end+0xf8004f5c>
1000506c:	a80b883a 	mov	r5,r21
10005070:	8009883a 	mov	r4,r16
10005074:	00079800 	call	10007980 <__mcmp>
10005078:	103edb0e 	bge	r2,zero,10004be8 <__alt_data_end+0xf8004be8>
1000507c:	800b883a 	mov	r5,r16
10005080:	000f883a 	mov	r7,zero
10005084:	01800284 	movi	r6,10
10005088:	e009883a 	mov	r4,fp
1000508c:	00070cc0 	call	100070cc <__multadd>
10005090:	1021883a 	mov	r16,r2
10005094:	d8800517 	ldw	r2,20(sp)
10005098:	d8c00b17 	ldw	r3,44(sp)
1000509c:	10bfffc4 	addi	r2,r2,-1
100050a0:	d8800515 	stw	r2,20(sp)
100050a4:	183f761e 	bne	r3,zero,10004e80 <__alt_data_end+0xf8004e80>
100050a8:	d9000c17 	ldw	r4,48(sp)
100050ac:	0101730e 	bge	zero,r4,1000567c <_dtoa_r+0x15cc>
100050b0:	d9000615 	stw	r4,24(sp)
100050b4:	003ed006 	br	10004bf8 <__alt_data_end+0xf8004bf8>
100050b8:	00800084 	movi	r2,2
100050bc:	3081861e 	bne	r6,r2,100056d8 <_dtoa_r+0x1628>
100050c0:	d8000b15 	stw	zero,44(sp)
100050c4:	003f3c06 	br	10004db8 <__alt_data_end+0xf8004db8>
100050c8:	dc000917 	ldw	r16,36(sp)
100050cc:	003e9206 	br	10004b18 <__alt_data_end+0xf8004b18>
100050d0:	d9c00317 	ldw	r7,12(sp)
100050d4:	00800084 	movi	r2,2
100050d8:	11fec50e 	bge	r2,r7,10004bf0 <__alt_data_end+0xf8004bf0>
100050dc:	d9000617 	ldw	r4,24(sp)
100050e0:	20013c1e 	bne	r4,zero,100055d4 <_dtoa_r+0x1524>
100050e4:	a80b883a 	mov	r5,r21
100050e8:	000f883a 	mov	r7,zero
100050ec:	01800144 	movi	r6,5
100050f0:	e009883a 	mov	r4,fp
100050f4:	00070cc0 	call	100070cc <__multadd>
100050f8:	100b883a 	mov	r5,r2
100050fc:	8009883a 	mov	r4,r16
10005100:	102b883a 	mov	r21,r2
10005104:	00079800 	call	10007980 <__mcmp>
10005108:	dc000915 	stw	r16,36(sp)
1000510c:	00bf410e 	bge	zero,r2,10004e14 <__alt_data_end+0xf8004e14>
10005110:	d9c00717 	ldw	r7,28(sp)
10005114:	00800c44 	movi	r2,49
10005118:	38800005 	stb	r2,0(r7)
1000511c:	d8800517 	ldw	r2,20(sp)
10005120:	3dc00044 	addi	r23,r7,1
10005124:	10800044 	addi	r2,r2,1
10005128:	d8800515 	stw	r2,20(sp)
1000512c:	003f3d06 	br	10004e24 <__alt_data_end+0xf8004e24>
10005130:	d9800517 	ldw	r6,20(sp)
10005134:	d9c00717 	ldw	r7,28(sp)
10005138:	00800c44 	movi	r2,49
1000513c:	31800044 	addi	r6,r6,1
10005140:	d9800515 	stw	r6,20(sp)
10005144:	38800005 	stb	r2,0(r7)
10005148:	003edf06 	br	10004cc8 <__alt_data_end+0xf8004cc8>
1000514c:	d8000b15 	stw	zero,44(sp)
10005150:	003c9f06 	br	100043d0 <__alt_data_end+0xf80043d0>
10005154:	903e7e1e 	bne	r18,zero,10004b50 <__alt_data_end+0xf8004b50>
10005158:	00800434 	movhi	r2,16
1000515c:	10bfffc4 	addi	r2,r2,-1
10005160:	9884703a 	and	r2,r19,r2
10005164:	1000ea1e 	bne	r2,zero,10005510 <_dtoa_r+0x1460>
10005168:	9cdffc2c 	andhi	r19,r19,32752
1000516c:	9800e826 	beq	r19,zero,10005510 <_dtoa_r+0x1460>
10005170:	d9c00817 	ldw	r7,32(sp)
10005174:	b5800044 	addi	r22,r22,1
10005178:	04c00044 	movi	r19,1
1000517c:	39c00044 	addi	r7,r7,1
10005180:	d9c00815 	stw	r7,32(sp)
10005184:	d8800d17 	ldw	r2,52(sp)
10005188:	103e721e 	bne	r2,zero,10004b54 <__alt_data_end+0xf8004b54>
1000518c:	00800044 	movi	r2,1
10005190:	003e7906 	br	10004b78 <__alt_data_end+0xf8004b78>
10005194:	8009883a 	mov	r4,r16
10005198:	000e77c0 	call	1000e77c <__floatsidf>
1000519c:	d9800f17 	ldw	r6,60(sp)
100051a0:	d9c01017 	ldw	r7,64(sp)
100051a4:	1009883a 	mov	r4,r2
100051a8:	180b883a 	mov	r5,r3
100051ac:	000d5980 	call	1000d598 <__muldf3>
100051b0:	000d883a 	mov	r6,zero
100051b4:	01d00734 	movhi	r7,16412
100051b8:	1009883a 	mov	r4,r2
100051bc:	180b883a 	mov	r5,r3
100051c0:	000c0c40 	call	1000c0c4 <__adddf3>
100051c4:	047f3034 	movhi	r17,64704
100051c8:	1021883a 	mov	r16,r2
100051cc:	1c63883a 	add	r17,r3,r17
100051d0:	d9000f17 	ldw	r4,60(sp)
100051d4:	d9401017 	ldw	r5,64(sp)
100051d8:	000d883a 	mov	r6,zero
100051dc:	01d00534 	movhi	r7,16404
100051e0:	000de000 	call	1000de00 <__subdf3>
100051e4:	800d883a 	mov	r6,r16
100051e8:	880f883a 	mov	r7,r17
100051ec:	1009883a 	mov	r4,r2
100051f0:	180b883a 	mov	r5,r3
100051f4:	102b883a 	mov	r21,r2
100051f8:	1829883a 	mov	r20,r3
100051fc:	000d3c80 	call	1000d3c8 <__gedf2>
10005200:	00806c16 	blt	zero,r2,100053b4 <_dtoa_r+0x1304>
10005204:	89e0003c 	xorhi	r7,r17,32768
10005208:	800d883a 	mov	r6,r16
1000520c:	a809883a 	mov	r4,r21
10005210:	a00b883a 	mov	r5,r20
10005214:	000d4a40 	call	1000d4a4 <__ledf2>
10005218:	103d7e0e 	bge	r2,zero,10004814 <__alt_data_end+0xf8004814>
1000521c:	002b883a 	mov	r21,zero
10005220:	0023883a 	mov	r17,zero
10005224:	003efb06 	br	10004e14 <__alt_data_end+0xf8004e14>
10005228:	d8800717 	ldw	r2,28(sp)
1000522c:	003bd006 	br	10004170 <__alt_data_end+0xf8004170>
10005230:	d9000a17 	ldw	r4,40(sp)
10005234:	d9800d17 	ldw	r6,52(sp)
10005238:	dd400a15 	stw	r21,40(sp)
1000523c:	a905c83a 	sub	r2,r21,r4
10005240:	308d883a 	add	r6,r6,r2
10005244:	d9800d15 	stw	r6,52(sp)
10005248:	002b883a 	mov	r21,zero
1000524c:	003e0606 	br	10004a68 <__alt_data_end+0xf8004a68>
10005250:	9023883a 	mov	r17,r18
10005254:	9829883a 	mov	r20,r19
10005258:	04000084 	movi	r16,2
1000525c:	003c9206 	br	100044a8 <__alt_data_end+0xf80044a8>
10005260:	04000044 	movi	r16,1
10005264:	dc000c15 	stw	r16,48(sp)
10005268:	dc000615 	stw	r16,24(sp)
1000526c:	dc002215 	stw	r16,136(sp)
10005270:	e0001115 	stw	zero,68(fp)
10005274:	000b883a 	mov	r5,zero
10005278:	003c6906 	br	10004420 <__alt_data_end+0xf8004420>
1000527c:	3021883a 	mov	r16,r6
10005280:	003ffb06 	br	10005270 <__alt_data_end+0xf8005270>
10005284:	1000021e 	bne	r2,zero,10005290 <_dtoa_r+0x11e0>
10005288:	4200004c 	andi	r8,r8,1
1000528c:	403e7d1e 	bne	r8,zero,10004c84 <__alt_data_end+0xf8004c84>
10005290:	01000c04 	movi	r4,48
10005294:	00000106 	br	1000529c <_dtoa_r+0x11ec>
10005298:	102f883a 	mov	r23,r2
1000529c:	b8bfffc4 	addi	r2,r23,-1
100052a0:	10c00007 	ldb	r3,0(r2)
100052a4:	193ffc26 	beq	r3,r4,10005298 <__alt_data_end+0xf8005298>
100052a8:	003e8706 	br	10004cc8 <__alt_data_end+0xf8004cc8>
100052ac:	d8800517 	ldw	r2,20(sp)
100052b0:	00a3c83a 	sub	r17,zero,r2
100052b4:	8800a426 	beq	r17,zero,10005548 <_dtoa_r+0x1498>
100052b8:	888003cc 	andi	r2,r17,15
100052bc:	100490fa 	slli	r2,r2,3
100052c0:	00c40074 	movhi	r3,4097
100052c4:	18c69304 	addi	r3,r3,6732
100052c8:	1885883a 	add	r2,r3,r2
100052cc:	11800017 	ldw	r6,0(r2)
100052d0:	11c00117 	ldw	r7,4(r2)
100052d4:	9009883a 	mov	r4,r18
100052d8:	980b883a 	mov	r5,r19
100052dc:	8823d13a 	srai	r17,r17,4
100052e0:	000d5980 	call	1000d598 <__muldf3>
100052e4:	d8800f15 	stw	r2,60(sp)
100052e8:	d8c01015 	stw	r3,64(sp)
100052ec:	8800e826 	beq	r17,zero,10005690 <_dtoa_r+0x15e0>
100052f0:	05040074 	movhi	r20,4097
100052f4:	a5068904 	addi	r20,r20,6692
100052f8:	04000084 	movi	r16,2
100052fc:	8980004c 	andi	r6,r17,1
10005300:	1009883a 	mov	r4,r2
10005304:	8823d07a 	srai	r17,r17,1
10005308:	180b883a 	mov	r5,r3
1000530c:	30000426 	beq	r6,zero,10005320 <_dtoa_r+0x1270>
10005310:	a1800017 	ldw	r6,0(r20)
10005314:	a1c00117 	ldw	r7,4(r20)
10005318:	84000044 	addi	r16,r16,1
1000531c:	000d5980 	call	1000d598 <__muldf3>
10005320:	a5000204 	addi	r20,r20,8
10005324:	883ff51e 	bne	r17,zero,100052fc <__alt_data_end+0xf80052fc>
10005328:	d8800f15 	stw	r2,60(sp)
1000532c:	d8c01015 	stw	r3,64(sp)
10005330:	003c7606 	br	1000450c <__alt_data_end+0xf800450c>
10005334:	00c00c04 	movi	r3,48
10005338:	10c00005 	stb	r3,0(r2)
1000533c:	d8c00517 	ldw	r3,20(sp)
10005340:	bd3fffc3 	ldbu	r20,-1(r23)
10005344:	18c00044 	addi	r3,r3,1
10005348:	d8c00515 	stw	r3,20(sp)
1000534c:	003db906 	br	10004a34 <__alt_data_end+0xf8004a34>
10005350:	89400117 	ldw	r5,4(r17)
10005354:	e009883a 	mov	r4,fp
10005358:	0006ffc0 	call	10006ffc <_Balloc>
1000535c:	89800417 	ldw	r6,16(r17)
10005360:	89400304 	addi	r5,r17,12
10005364:	11000304 	addi	r4,r2,12
10005368:	31800084 	addi	r6,r6,2
1000536c:	318d883a 	add	r6,r6,r6
10005370:	318d883a 	add	r6,r6,r6
10005374:	1027883a 	mov	r19,r2
10005378:	00017240 	call	10001724 <memcpy>
1000537c:	01800044 	movi	r6,1
10005380:	980b883a 	mov	r5,r19
10005384:	e009883a 	mov	r4,fp
10005388:	00078380 	call	10007838 <__lshift>
1000538c:	1029883a 	mov	r20,r2
10005390:	003ecc06 	br	10004ec4 <__alt_data_end+0xf8004ec4>
10005394:	00800e44 	movi	r2,57
10005398:	90809026 	beq	r18,r2,100055dc <_dtoa_r+0x152c>
1000539c:	92000044 	addi	r8,r18,1
100053a0:	003f1f06 	br	10005020 <__alt_data_end+0xf8005020>
100053a4:	9011883a 	mov	r8,r18
100053a8:	8825883a 	mov	r18,r17
100053ac:	a023883a 	mov	r17,r20
100053b0:	003e2906 	br	10004c58 <__alt_data_end+0xf8004c58>
100053b4:	002b883a 	mov	r21,zero
100053b8:	0023883a 	mov	r17,zero
100053bc:	003f5406 	br	10005110 <__alt_data_end+0xf8005110>
100053c0:	61bfffc4 	addi	r6,r12,-1
100053c4:	300490fa 	slli	r2,r6,3
100053c8:	00c40074 	movhi	r3,4097
100053cc:	18c69304 	addi	r3,r3,6732
100053d0:	1885883a 	add	r2,r3,r2
100053d4:	11000017 	ldw	r4,0(r2)
100053d8:	11400117 	ldw	r5,4(r2)
100053dc:	d8800717 	ldw	r2,28(sp)
100053e0:	880f883a 	mov	r7,r17
100053e4:	d9801215 	stw	r6,72(sp)
100053e8:	800d883a 	mov	r6,r16
100053ec:	db001615 	stw	r12,88(sp)
100053f0:	15c00044 	addi	r23,r2,1
100053f4:	000d5980 	call	1000d598 <__muldf3>
100053f8:	d9401017 	ldw	r5,64(sp)
100053fc:	d9000f17 	ldw	r4,60(sp)
10005400:	d8c01515 	stw	r3,84(sp)
10005404:	d8801415 	stw	r2,80(sp)
10005408:	000e6fc0 	call	1000e6fc <__fixdfsi>
1000540c:	1009883a 	mov	r4,r2
10005410:	1021883a 	mov	r16,r2
10005414:	000e77c0 	call	1000e77c <__floatsidf>
10005418:	d9000f17 	ldw	r4,60(sp)
1000541c:	d9401017 	ldw	r5,64(sp)
10005420:	100d883a 	mov	r6,r2
10005424:	180f883a 	mov	r7,r3
10005428:	000de000 	call	1000de00 <__subdf3>
1000542c:	1829883a 	mov	r20,r3
10005430:	d8c00717 	ldw	r3,28(sp)
10005434:	84000c04 	addi	r16,r16,48
10005438:	1023883a 	mov	r17,r2
1000543c:	1c000005 	stb	r16,0(r3)
10005440:	db001617 	ldw	r12,88(sp)
10005444:	00800044 	movi	r2,1
10005448:	60802226 	beq	r12,r2,100054d4 <_dtoa_r+0x1424>
1000544c:	d9c00717 	ldw	r7,28(sp)
10005450:	8805883a 	mov	r2,r17
10005454:	b82b883a 	mov	r21,r23
10005458:	3b19883a 	add	r12,r7,r12
1000545c:	6023883a 	mov	r17,r12
10005460:	a007883a 	mov	r3,r20
10005464:	dc800f15 	stw	r18,60(sp)
10005468:	000d883a 	mov	r6,zero
1000546c:	01d00934 	movhi	r7,16420
10005470:	1009883a 	mov	r4,r2
10005474:	180b883a 	mov	r5,r3
10005478:	000d5980 	call	1000d598 <__muldf3>
1000547c:	180b883a 	mov	r5,r3
10005480:	1009883a 	mov	r4,r2
10005484:	1829883a 	mov	r20,r3
10005488:	1025883a 	mov	r18,r2
1000548c:	000e6fc0 	call	1000e6fc <__fixdfsi>
10005490:	1009883a 	mov	r4,r2
10005494:	1021883a 	mov	r16,r2
10005498:	000e77c0 	call	1000e77c <__floatsidf>
1000549c:	100d883a 	mov	r6,r2
100054a0:	180f883a 	mov	r7,r3
100054a4:	9009883a 	mov	r4,r18
100054a8:	a00b883a 	mov	r5,r20
100054ac:	84000c04 	addi	r16,r16,48
100054b0:	000de000 	call	1000de00 <__subdf3>
100054b4:	ad400044 	addi	r21,r21,1
100054b8:	ac3fffc5 	stb	r16,-1(r21)
100054bc:	ac7fea1e 	bne	r21,r17,10005468 <__alt_data_end+0xf8005468>
100054c0:	1023883a 	mov	r17,r2
100054c4:	d8801217 	ldw	r2,72(sp)
100054c8:	dc800f17 	ldw	r18,60(sp)
100054cc:	1829883a 	mov	r20,r3
100054d0:	b8af883a 	add	r23,r23,r2
100054d4:	d9001417 	ldw	r4,80(sp)
100054d8:	d9401517 	ldw	r5,84(sp)
100054dc:	000d883a 	mov	r6,zero
100054e0:	01cff834 	movhi	r7,16352
100054e4:	000c0c40 	call	1000c0c4 <__adddf3>
100054e8:	880d883a 	mov	r6,r17
100054ec:	a00f883a 	mov	r7,r20
100054f0:	1009883a 	mov	r4,r2
100054f4:	180b883a 	mov	r5,r3
100054f8:	000d4a40 	call	1000d4a4 <__ledf2>
100054fc:	10003e0e 	bge	r2,zero,100055f8 <_dtoa_r+0x1548>
10005500:	d9001317 	ldw	r4,76(sp)
10005504:	bd3fffc3 	ldbu	r20,-1(r23)
10005508:	d9000515 	stw	r4,20(sp)
1000550c:	003d3b06 	br	100049fc <__alt_data_end+0xf80049fc>
10005510:	0027883a 	mov	r19,zero
10005514:	003f1b06 	br	10005184 <__alt_data_end+0xf8005184>
10005518:	d8800817 	ldw	r2,32(sp)
1000551c:	11e9c83a 	sub	r20,r2,r7
10005520:	0005883a 	mov	r2,zero
10005524:	003d5406 	br	10004a78 <__alt_data_end+0xf8004a78>
10005528:	00800044 	movi	r2,1
1000552c:	003dc706 	br	10004c4c <__alt_data_end+0xf8004c4c>
10005530:	d8c00217 	ldw	r3,8(sp)
10005534:	00800d84 	movi	r2,54
10005538:	dd400a17 	ldw	r21,40(sp)
1000553c:	10c5c83a 	sub	r2,r2,r3
10005540:	dd000817 	ldw	r20,32(sp)
10005544:	003d4c06 	br	10004a78 <__alt_data_end+0xf8004a78>
10005548:	dc800f15 	stw	r18,60(sp)
1000554c:	dcc01015 	stw	r19,64(sp)
10005550:	04000084 	movi	r16,2
10005554:	003bed06 	br	1000450c <__alt_data_end+0xf800450c>
10005558:	d9000617 	ldw	r4,24(sp)
1000555c:	203f0d26 	beq	r4,zero,10005194 <__alt_data_end+0xf8005194>
10005560:	d9800c17 	ldw	r6,48(sp)
10005564:	01bcab0e 	bge	zero,r6,10004814 <__alt_data_end+0xf8004814>
10005568:	d9401017 	ldw	r5,64(sp)
1000556c:	d9000f17 	ldw	r4,60(sp)
10005570:	000d883a 	mov	r6,zero
10005574:	01d00934 	movhi	r7,16420
10005578:	000d5980 	call	1000d598 <__muldf3>
1000557c:	81000044 	addi	r4,r16,1
10005580:	d8800f15 	stw	r2,60(sp)
10005584:	d8c01015 	stw	r3,64(sp)
10005588:	000e77c0 	call	1000e77c <__floatsidf>
1000558c:	d9800f17 	ldw	r6,60(sp)
10005590:	d9c01017 	ldw	r7,64(sp)
10005594:	1009883a 	mov	r4,r2
10005598:	180b883a 	mov	r5,r3
1000559c:	000d5980 	call	1000d598 <__muldf3>
100055a0:	01d00734 	movhi	r7,16412
100055a4:	000d883a 	mov	r6,zero
100055a8:	1009883a 	mov	r4,r2
100055ac:	180b883a 	mov	r5,r3
100055b0:	000c0c40 	call	1000c0c4 <__adddf3>
100055b4:	d9c00517 	ldw	r7,20(sp)
100055b8:	047f3034 	movhi	r17,64704
100055bc:	1021883a 	mov	r16,r2
100055c0:	39ffffc4 	addi	r7,r7,-1
100055c4:	d9c01315 	stw	r7,76(sp)
100055c8:	1c63883a 	add	r17,r3,r17
100055cc:	db000c17 	ldw	r12,48(sp)
100055d0:	003bea06 	br	1000457c <__alt_data_end+0xf800457c>
100055d4:	dc000915 	stw	r16,36(sp)
100055d8:	003e0e06 	br	10004e14 <__alt_data_end+0xf8004e14>
100055dc:	01000e44 	movi	r4,57
100055e0:	8825883a 	mov	r18,r17
100055e4:	9dc00044 	addi	r23,r19,1
100055e8:	99000005 	stb	r4,0(r19)
100055ec:	a023883a 	mov	r17,r20
100055f0:	dc000915 	stw	r16,36(sp)
100055f4:	003da406 	br	10004c88 <__alt_data_end+0xf8004c88>
100055f8:	d9801417 	ldw	r6,80(sp)
100055fc:	d9c01517 	ldw	r7,84(sp)
10005600:	0009883a 	mov	r4,zero
10005604:	014ff834 	movhi	r5,16352
10005608:	000de000 	call	1000de00 <__subdf3>
1000560c:	880d883a 	mov	r6,r17
10005610:	a00f883a 	mov	r7,r20
10005614:	1009883a 	mov	r4,r2
10005618:	180b883a 	mov	r5,r3
1000561c:	000d3c80 	call	1000d3c8 <__gedf2>
10005620:	00bc7c0e 	bge	zero,r2,10004814 <__alt_data_end+0xf8004814>
10005624:	01000c04 	movi	r4,48
10005628:	00000106 	br	10005630 <_dtoa_r+0x1580>
1000562c:	102f883a 	mov	r23,r2
10005630:	b8bfffc4 	addi	r2,r23,-1
10005634:	10c00007 	ldb	r3,0(r2)
10005638:	193ffc26 	beq	r3,r4,1000562c <__alt_data_end+0xf800562c>
1000563c:	d9801317 	ldw	r6,76(sp)
10005640:	d9800515 	stw	r6,20(sp)
10005644:	003c4406 	br	10004758 <__alt_data_end+0xf8004758>
10005648:	d9801317 	ldw	r6,76(sp)
1000564c:	d9800515 	stw	r6,20(sp)
10005650:	003cea06 	br	100049fc <__alt_data_end+0xf80049fc>
10005654:	dd800f17 	ldw	r22,60(sp)
10005658:	dcc01017 	ldw	r19,64(sp)
1000565c:	dc801217 	ldw	r18,72(sp)
10005660:	003c6c06 	br	10004814 <__alt_data_end+0xf8004814>
10005664:	903e031e 	bne	r18,zero,10004e74 <__alt_data_end+0xf8004e74>
10005668:	003ebb06 	br	10005158 <__alt_data_end+0xf8005158>
1000566c:	103e6c1e 	bne	r2,zero,10005020 <__alt_data_end+0xf8005020>
10005670:	4080004c 	andi	r2,r8,1
10005674:	103e6a26 	beq	r2,zero,10005020 <__alt_data_end+0xf8005020>
10005678:	003e6606 	br	10005014 <__alt_data_end+0xf8005014>
1000567c:	d8c00317 	ldw	r3,12(sp)
10005680:	00800084 	movi	r2,2
10005684:	10c02916 	blt	r2,r3,1000572c <_dtoa_r+0x167c>
10005688:	d9000c17 	ldw	r4,48(sp)
1000568c:	003e8806 	br	100050b0 <__alt_data_end+0xf80050b0>
10005690:	04000084 	movi	r16,2
10005694:	003b9d06 	br	1000450c <__alt_data_end+0xf800450c>
10005698:	d9001317 	ldw	r4,76(sp)
1000569c:	d9000515 	stw	r4,20(sp)
100056a0:	003cd606 	br	100049fc <__alt_data_end+0xf80049fc>
100056a4:	d8801317 	ldw	r2,76(sp)
100056a8:	d8800515 	stw	r2,20(sp)
100056ac:	003c2a06 	br	10004758 <__alt_data_end+0xf8004758>
100056b0:	d9800317 	ldw	r6,12(sp)
100056b4:	00800084 	movi	r2,2
100056b8:	11801516 	blt	r2,r6,10005710 <_dtoa_r+0x1660>
100056bc:	d9c00c17 	ldw	r7,48(sp)
100056c0:	d9c00615 	stw	r7,24(sp)
100056c4:	003df706 	br	10004ea4 <__alt_data_end+0xf8004ea4>
100056c8:	193d3926 	beq	r3,r4,10004bb0 <__alt_data_end+0xf8004bb0>
100056cc:	00c00f04 	movi	r3,60
100056d0:	1885c83a 	sub	r2,r3,r2
100056d4:	003ddf06 	br	10004e54 <__alt_data_end+0xf8004e54>
100056d8:	e009883a 	mov	r4,fp
100056dc:	e0001115 	stw	zero,68(fp)
100056e0:	000b883a 	mov	r5,zero
100056e4:	0006ffc0 	call	10006ffc <_Balloc>
100056e8:	d8800715 	stw	r2,28(sp)
100056ec:	d8c00717 	ldw	r3,28(sp)
100056f0:	00bfffc4 	movi	r2,-1
100056f4:	01000044 	movi	r4,1
100056f8:	d8800c15 	stw	r2,48(sp)
100056fc:	e0c01015 	stw	r3,64(fp)
10005700:	d9000b15 	stw	r4,44(sp)
10005704:	d8800615 	stw	r2,24(sp)
10005708:	d8002215 	stw	zero,136(sp)
1000570c:	003c4106 	br	10004814 <__alt_data_end+0xf8004814>
10005710:	d8c00c17 	ldw	r3,48(sp)
10005714:	d8c00615 	stw	r3,24(sp)
10005718:	003e7006 	br	100050dc <__alt_data_end+0xf80050dc>
1000571c:	04400044 	movi	r17,1
10005720:	003b2006 	br	100043a4 <__alt_data_end+0xf80043a4>
10005724:	000b883a 	mov	r5,zero
10005728:	003b3d06 	br	10004420 <__alt_data_end+0xf8004420>
1000572c:	d8800c17 	ldw	r2,48(sp)
10005730:	d8800615 	stw	r2,24(sp)
10005734:	003e6906 	br	100050dc <__alt_data_end+0xf80050dc>

10005738 <__sflush_r>:
10005738:	2880030b 	ldhu	r2,12(r5)
1000573c:	defffb04 	addi	sp,sp,-20
10005740:	dcc00315 	stw	r19,12(sp)
10005744:	dc400115 	stw	r17,4(sp)
10005748:	dfc00415 	stw	ra,16(sp)
1000574c:	dc800215 	stw	r18,8(sp)
10005750:	dc000015 	stw	r16,0(sp)
10005754:	10c0020c 	andi	r3,r2,8
10005758:	2823883a 	mov	r17,r5
1000575c:	2027883a 	mov	r19,r4
10005760:	1800311e 	bne	r3,zero,10005828 <__sflush_r+0xf0>
10005764:	28c00117 	ldw	r3,4(r5)
10005768:	10820014 	ori	r2,r2,2048
1000576c:	2880030d 	sth	r2,12(r5)
10005770:	00c04b0e 	bge	zero,r3,100058a0 <__sflush_r+0x168>
10005774:	8a000a17 	ldw	r8,40(r17)
10005778:	40002326 	beq	r8,zero,10005808 <__sflush_r+0xd0>
1000577c:	9c000017 	ldw	r16,0(r19)
10005780:	10c4000c 	andi	r3,r2,4096
10005784:	98000015 	stw	zero,0(r19)
10005788:	18004826 	beq	r3,zero,100058ac <__sflush_r+0x174>
1000578c:	89801417 	ldw	r6,80(r17)
10005790:	10c0010c 	andi	r3,r2,4
10005794:	18000626 	beq	r3,zero,100057b0 <__sflush_r+0x78>
10005798:	88c00117 	ldw	r3,4(r17)
1000579c:	88800c17 	ldw	r2,48(r17)
100057a0:	30cdc83a 	sub	r6,r6,r3
100057a4:	10000226 	beq	r2,zero,100057b0 <__sflush_r+0x78>
100057a8:	88800f17 	ldw	r2,60(r17)
100057ac:	308dc83a 	sub	r6,r6,r2
100057b0:	89400717 	ldw	r5,28(r17)
100057b4:	000f883a 	mov	r7,zero
100057b8:	9809883a 	mov	r4,r19
100057bc:	403ee83a 	callr	r8
100057c0:	00ffffc4 	movi	r3,-1
100057c4:	10c04426 	beq	r2,r3,100058d8 <__sflush_r+0x1a0>
100057c8:	88c0030b 	ldhu	r3,12(r17)
100057cc:	89000417 	ldw	r4,16(r17)
100057d0:	88000115 	stw	zero,4(r17)
100057d4:	197dffcc 	andi	r5,r3,63487
100057d8:	8940030d 	sth	r5,12(r17)
100057dc:	89000015 	stw	r4,0(r17)
100057e0:	18c4000c 	andi	r3,r3,4096
100057e4:	18002c1e 	bne	r3,zero,10005898 <__sflush_r+0x160>
100057e8:	89400c17 	ldw	r5,48(r17)
100057ec:	9c000015 	stw	r16,0(r19)
100057f0:	28000526 	beq	r5,zero,10005808 <__sflush_r+0xd0>
100057f4:	88801004 	addi	r2,r17,64
100057f8:	28800226 	beq	r5,r2,10005804 <__sflush_r+0xcc>
100057fc:	9809883a 	mov	r4,r19
10005800:	0005eb40 	call	10005eb4 <_free_r>
10005804:	88000c15 	stw	zero,48(r17)
10005808:	0005883a 	mov	r2,zero
1000580c:	dfc00417 	ldw	ra,16(sp)
10005810:	dcc00317 	ldw	r19,12(sp)
10005814:	dc800217 	ldw	r18,8(sp)
10005818:	dc400117 	ldw	r17,4(sp)
1000581c:	dc000017 	ldw	r16,0(sp)
10005820:	dec00504 	addi	sp,sp,20
10005824:	f800283a 	ret
10005828:	2c800417 	ldw	r18,16(r5)
1000582c:	903ff626 	beq	r18,zero,10005808 <__alt_data_end+0xf8005808>
10005830:	2c000017 	ldw	r16,0(r5)
10005834:	108000cc 	andi	r2,r2,3
10005838:	2c800015 	stw	r18,0(r5)
1000583c:	84a1c83a 	sub	r16,r16,r18
10005840:	1000131e 	bne	r2,zero,10005890 <__sflush_r+0x158>
10005844:	28800517 	ldw	r2,20(r5)
10005848:	88800215 	stw	r2,8(r17)
1000584c:	04000316 	blt	zero,r16,1000585c <__sflush_r+0x124>
10005850:	003fed06 	br	10005808 <__alt_data_end+0xf8005808>
10005854:	90a5883a 	add	r18,r18,r2
10005858:	043feb0e 	bge	zero,r16,10005808 <__alt_data_end+0xf8005808>
1000585c:	88800917 	ldw	r2,36(r17)
10005860:	89400717 	ldw	r5,28(r17)
10005864:	800f883a 	mov	r7,r16
10005868:	900d883a 	mov	r6,r18
1000586c:	9809883a 	mov	r4,r19
10005870:	103ee83a 	callr	r2
10005874:	80a1c83a 	sub	r16,r16,r2
10005878:	00bff616 	blt	zero,r2,10005854 <__alt_data_end+0xf8005854>
1000587c:	88c0030b 	ldhu	r3,12(r17)
10005880:	00bfffc4 	movi	r2,-1
10005884:	18c01014 	ori	r3,r3,64
10005888:	88c0030d 	sth	r3,12(r17)
1000588c:	003fdf06 	br	1000580c <__alt_data_end+0xf800580c>
10005890:	0005883a 	mov	r2,zero
10005894:	003fec06 	br	10005848 <__alt_data_end+0xf8005848>
10005898:	88801415 	stw	r2,80(r17)
1000589c:	003fd206 	br	100057e8 <__alt_data_end+0xf80057e8>
100058a0:	28c00f17 	ldw	r3,60(r5)
100058a4:	00ffb316 	blt	zero,r3,10005774 <__alt_data_end+0xf8005774>
100058a8:	003fd706 	br	10005808 <__alt_data_end+0xf8005808>
100058ac:	89400717 	ldw	r5,28(r17)
100058b0:	000d883a 	mov	r6,zero
100058b4:	01c00044 	movi	r7,1
100058b8:	9809883a 	mov	r4,r19
100058bc:	403ee83a 	callr	r8
100058c0:	100d883a 	mov	r6,r2
100058c4:	00bfffc4 	movi	r2,-1
100058c8:	30801426 	beq	r6,r2,1000591c <__sflush_r+0x1e4>
100058cc:	8880030b 	ldhu	r2,12(r17)
100058d0:	8a000a17 	ldw	r8,40(r17)
100058d4:	003fae06 	br	10005790 <__alt_data_end+0xf8005790>
100058d8:	98c00017 	ldw	r3,0(r19)
100058dc:	183fba26 	beq	r3,zero,100057c8 <__alt_data_end+0xf80057c8>
100058e0:	01000744 	movi	r4,29
100058e4:	19000626 	beq	r3,r4,10005900 <__sflush_r+0x1c8>
100058e8:	01000584 	movi	r4,22
100058ec:	19000426 	beq	r3,r4,10005900 <__sflush_r+0x1c8>
100058f0:	88c0030b 	ldhu	r3,12(r17)
100058f4:	18c01014 	ori	r3,r3,64
100058f8:	88c0030d 	sth	r3,12(r17)
100058fc:	003fc306 	br	1000580c <__alt_data_end+0xf800580c>
10005900:	8880030b 	ldhu	r2,12(r17)
10005904:	88c00417 	ldw	r3,16(r17)
10005908:	88000115 	stw	zero,4(r17)
1000590c:	10bdffcc 	andi	r2,r2,63487
10005910:	8880030d 	sth	r2,12(r17)
10005914:	88c00015 	stw	r3,0(r17)
10005918:	003fb306 	br	100057e8 <__alt_data_end+0xf80057e8>
1000591c:	98800017 	ldw	r2,0(r19)
10005920:	103fea26 	beq	r2,zero,100058cc <__alt_data_end+0xf80058cc>
10005924:	00c00744 	movi	r3,29
10005928:	10c00226 	beq	r2,r3,10005934 <__sflush_r+0x1fc>
1000592c:	00c00584 	movi	r3,22
10005930:	10c0031e 	bne	r2,r3,10005940 <__sflush_r+0x208>
10005934:	9c000015 	stw	r16,0(r19)
10005938:	0005883a 	mov	r2,zero
1000593c:	003fb306 	br	1000580c <__alt_data_end+0xf800580c>
10005940:	88c0030b 	ldhu	r3,12(r17)
10005944:	3005883a 	mov	r2,r6
10005948:	18c01014 	ori	r3,r3,64
1000594c:	88c0030d 	sth	r3,12(r17)
10005950:	003fae06 	br	1000580c <__alt_data_end+0xf800580c>

10005954 <_fflush_r>:
10005954:	defffd04 	addi	sp,sp,-12
10005958:	dc000115 	stw	r16,4(sp)
1000595c:	dfc00215 	stw	ra,8(sp)
10005960:	2021883a 	mov	r16,r4
10005964:	20000226 	beq	r4,zero,10005970 <_fflush_r+0x1c>
10005968:	20800e17 	ldw	r2,56(r4)
1000596c:	10000c26 	beq	r2,zero,100059a0 <_fflush_r+0x4c>
10005970:	2880030f 	ldh	r2,12(r5)
10005974:	1000051e 	bne	r2,zero,1000598c <_fflush_r+0x38>
10005978:	0005883a 	mov	r2,zero
1000597c:	dfc00217 	ldw	ra,8(sp)
10005980:	dc000117 	ldw	r16,4(sp)
10005984:	dec00304 	addi	sp,sp,12
10005988:	f800283a 	ret
1000598c:	8009883a 	mov	r4,r16
10005990:	dfc00217 	ldw	ra,8(sp)
10005994:	dc000117 	ldw	r16,4(sp)
10005998:	dec00304 	addi	sp,sp,12
1000599c:	00057381 	jmpi	10005738 <__sflush_r>
100059a0:	d9400015 	stw	r5,0(sp)
100059a4:	0005d400 	call	10005d40 <__sinit>
100059a8:	d9400017 	ldw	r5,0(sp)
100059ac:	003ff006 	br	10005970 <__alt_data_end+0xf8005970>

100059b0 <fflush>:
100059b0:	20000526 	beq	r4,zero,100059c8 <fflush+0x18>
100059b4:	00840074 	movhi	r2,4097
100059b8:	108e0604 	addi	r2,r2,14360
100059bc:	200b883a 	mov	r5,r4
100059c0:	11000017 	ldw	r4,0(r2)
100059c4:	00059541 	jmpi	10005954 <_fflush_r>
100059c8:	00840074 	movhi	r2,4097
100059cc:	108e0504 	addi	r2,r2,14356
100059d0:	11000017 	ldw	r4,0(r2)
100059d4:	01440034 	movhi	r5,4096
100059d8:	29565504 	addi	r5,r5,22868
100059dc:	00062881 	jmpi	10006288 <_fwalk_reent>

100059e0 <__fp_unlock>:
100059e0:	0005883a 	mov	r2,zero
100059e4:	f800283a 	ret

100059e8 <_cleanup_r>:
100059e8:	01440074 	movhi	r5,4097
100059ec:	29685904 	addi	r5,r5,-24220
100059f0:	00062881 	jmpi	10006288 <_fwalk_reent>

100059f4 <__sinit.part.1>:
100059f4:	defff704 	addi	sp,sp,-36
100059f8:	00c40034 	movhi	r3,4096
100059fc:	dfc00815 	stw	ra,32(sp)
10005a00:	ddc00715 	stw	r23,28(sp)
10005a04:	dd800615 	stw	r22,24(sp)
10005a08:	dd400515 	stw	r21,20(sp)
10005a0c:	dd000415 	stw	r20,16(sp)
10005a10:	dcc00315 	stw	r19,12(sp)
10005a14:	dc800215 	stw	r18,8(sp)
10005a18:	dc400115 	stw	r17,4(sp)
10005a1c:	dc000015 	stw	r16,0(sp)
10005a20:	18d67a04 	addi	r3,r3,23016
10005a24:	24000117 	ldw	r16,4(r4)
10005a28:	20c00f15 	stw	r3,60(r4)
10005a2c:	2080bb04 	addi	r2,r4,748
10005a30:	00c000c4 	movi	r3,3
10005a34:	20c0b915 	stw	r3,740(r4)
10005a38:	2080ba15 	stw	r2,744(r4)
10005a3c:	2000b815 	stw	zero,736(r4)
10005a40:	05c00204 	movi	r23,8
10005a44:	00800104 	movi	r2,4
10005a48:	2025883a 	mov	r18,r4
10005a4c:	b80d883a 	mov	r6,r23
10005a50:	81001704 	addi	r4,r16,92
10005a54:	000b883a 	mov	r5,zero
10005a58:	80000015 	stw	zero,0(r16)
10005a5c:	80000115 	stw	zero,4(r16)
10005a60:	80000215 	stw	zero,8(r16)
10005a64:	8080030d 	sth	r2,12(r16)
10005a68:	80001915 	stw	zero,100(r16)
10005a6c:	8000038d 	sth	zero,14(r16)
10005a70:	80000415 	stw	zero,16(r16)
10005a74:	80000515 	stw	zero,20(r16)
10005a78:	80000615 	stw	zero,24(r16)
10005a7c:	0006ed40 	call	10006ed4 <memset>
10005a80:	05840074 	movhi	r22,4097
10005a84:	94400217 	ldw	r17,8(r18)
10005a88:	05440074 	movhi	r21,4097
10005a8c:	05040074 	movhi	r20,4097
10005a90:	04c40074 	movhi	r19,4097
10005a94:	b5a13504 	addi	r22,r22,-31532
10005a98:	ad614c04 	addi	r21,r21,-31440
10005a9c:	a5216b04 	addi	r20,r20,-31316
10005aa0:	9ce18204 	addi	r19,r19,-31224
10005aa4:	85800815 	stw	r22,32(r16)
10005aa8:	85400915 	stw	r21,36(r16)
10005aac:	85000a15 	stw	r20,40(r16)
10005ab0:	84c00b15 	stw	r19,44(r16)
10005ab4:	84000715 	stw	r16,28(r16)
10005ab8:	00800284 	movi	r2,10
10005abc:	8880030d 	sth	r2,12(r17)
10005ac0:	00800044 	movi	r2,1
10005ac4:	b80d883a 	mov	r6,r23
10005ac8:	89001704 	addi	r4,r17,92
10005acc:	000b883a 	mov	r5,zero
10005ad0:	88000015 	stw	zero,0(r17)
10005ad4:	88000115 	stw	zero,4(r17)
10005ad8:	88000215 	stw	zero,8(r17)
10005adc:	88001915 	stw	zero,100(r17)
10005ae0:	8880038d 	sth	r2,14(r17)
10005ae4:	88000415 	stw	zero,16(r17)
10005ae8:	88000515 	stw	zero,20(r17)
10005aec:	88000615 	stw	zero,24(r17)
10005af0:	0006ed40 	call	10006ed4 <memset>
10005af4:	94000317 	ldw	r16,12(r18)
10005af8:	00800484 	movi	r2,18
10005afc:	8c400715 	stw	r17,28(r17)
10005b00:	8d800815 	stw	r22,32(r17)
10005b04:	8d400915 	stw	r21,36(r17)
10005b08:	8d000a15 	stw	r20,40(r17)
10005b0c:	8cc00b15 	stw	r19,44(r17)
10005b10:	8080030d 	sth	r2,12(r16)
10005b14:	00800084 	movi	r2,2
10005b18:	80000015 	stw	zero,0(r16)
10005b1c:	80000115 	stw	zero,4(r16)
10005b20:	80000215 	stw	zero,8(r16)
10005b24:	80001915 	stw	zero,100(r16)
10005b28:	8080038d 	sth	r2,14(r16)
10005b2c:	80000415 	stw	zero,16(r16)
10005b30:	80000515 	stw	zero,20(r16)
10005b34:	80000615 	stw	zero,24(r16)
10005b38:	b80d883a 	mov	r6,r23
10005b3c:	000b883a 	mov	r5,zero
10005b40:	81001704 	addi	r4,r16,92
10005b44:	0006ed40 	call	10006ed4 <memset>
10005b48:	00800044 	movi	r2,1
10005b4c:	84000715 	stw	r16,28(r16)
10005b50:	85800815 	stw	r22,32(r16)
10005b54:	85400915 	stw	r21,36(r16)
10005b58:	85000a15 	stw	r20,40(r16)
10005b5c:	84c00b15 	stw	r19,44(r16)
10005b60:	90800e15 	stw	r2,56(r18)
10005b64:	dfc00817 	ldw	ra,32(sp)
10005b68:	ddc00717 	ldw	r23,28(sp)
10005b6c:	dd800617 	ldw	r22,24(sp)
10005b70:	dd400517 	ldw	r21,20(sp)
10005b74:	dd000417 	ldw	r20,16(sp)
10005b78:	dcc00317 	ldw	r19,12(sp)
10005b7c:	dc800217 	ldw	r18,8(sp)
10005b80:	dc400117 	ldw	r17,4(sp)
10005b84:	dc000017 	ldw	r16,0(sp)
10005b88:	dec00904 	addi	sp,sp,36
10005b8c:	f800283a 	ret

10005b90 <__fp_lock>:
10005b90:	0005883a 	mov	r2,zero
10005b94:	f800283a 	ret

10005b98 <__sfmoreglue>:
10005b98:	defffc04 	addi	sp,sp,-16
10005b9c:	dc800215 	stw	r18,8(sp)
10005ba0:	2825883a 	mov	r18,r5
10005ba4:	dc000015 	stw	r16,0(sp)
10005ba8:	01401a04 	movi	r5,104
10005bac:	2021883a 	mov	r16,r4
10005bb0:	913fffc4 	addi	r4,r18,-1
10005bb4:	dfc00315 	stw	ra,12(sp)
10005bb8:	dc400115 	stw	r17,4(sp)
10005bbc:	00016040 	call	10001604 <__mulsi3>
10005bc0:	8009883a 	mov	r4,r16
10005bc4:	11401d04 	addi	r5,r2,116
10005bc8:	1023883a 	mov	r17,r2
10005bcc:	00065e40 	call	100065e4 <_malloc_r>
10005bd0:	1021883a 	mov	r16,r2
10005bd4:	10000726 	beq	r2,zero,10005bf4 <__sfmoreglue+0x5c>
10005bd8:	11000304 	addi	r4,r2,12
10005bdc:	10000015 	stw	zero,0(r2)
10005be0:	14800115 	stw	r18,4(r2)
10005be4:	11000215 	stw	r4,8(r2)
10005be8:	89801a04 	addi	r6,r17,104
10005bec:	000b883a 	mov	r5,zero
10005bf0:	0006ed40 	call	10006ed4 <memset>
10005bf4:	8005883a 	mov	r2,r16
10005bf8:	dfc00317 	ldw	ra,12(sp)
10005bfc:	dc800217 	ldw	r18,8(sp)
10005c00:	dc400117 	ldw	r17,4(sp)
10005c04:	dc000017 	ldw	r16,0(sp)
10005c08:	dec00404 	addi	sp,sp,16
10005c0c:	f800283a 	ret

10005c10 <__sfp>:
10005c10:	defffb04 	addi	sp,sp,-20
10005c14:	dc000015 	stw	r16,0(sp)
10005c18:	04040074 	movhi	r16,4097
10005c1c:	840e0504 	addi	r16,r16,14356
10005c20:	dcc00315 	stw	r19,12(sp)
10005c24:	2027883a 	mov	r19,r4
10005c28:	81000017 	ldw	r4,0(r16)
10005c2c:	dfc00415 	stw	ra,16(sp)
10005c30:	dc800215 	stw	r18,8(sp)
10005c34:	20800e17 	ldw	r2,56(r4)
10005c38:	dc400115 	stw	r17,4(sp)
10005c3c:	1000021e 	bne	r2,zero,10005c48 <__sfp+0x38>
10005c40:	00059f40 	call	100059f4 <__sinit.part.1>
10005c44:	81000017 	ldw	r4,0(r16)
10005c48:	2480b804 	addi	r18,r4,736
10005c4c:	047fffc4 	movi	r17,-1
10005c50:	91000117 	ldw	r4,4(r18)
10005c54:	94000217 	ldw	r16,8(r18)
10005c58:	213fffc4 	addi	r4,r4,-1
10005c5c:	20000a16 	blt	r4,zero,10005c88 <__sfp+0x78>
10005c60:	8080030f 	ldh	r2,12(r16)
10005c64:	10000c26 	beq	r2,zero,10005c98 <__sfp+0x88>
10005c68:	80c01d04 	addi	r3,r16,116
10005c6c:	00000206 	br	10005c78 <__sfp+0x68>
10005c70:	18bfe60f 	ldh	r2,-104(r3)
10005c74:	10000826 	beq	r2,zero,10005c98 <__sfp+0x88>
10005c78:	213fffc4 	addi	r4,r4,-1
10005c7c:	1c3ffd04 	addi	r16,r3,-12
10005c80:	18c01a04 	addi	r3,r3,104
10005c84:	247ffa1e 	bne	r4,r17,10005c70 <__alt_data_end+0xf8005c70>
10005c88:	90800017 	ldw	r2,0(r18)
10005c8c:	10001d26 	beq	r2,zero,10005d04 <__sfp+0xf4>
10005c90:	1025883a 	mov	r18,r2
10005c94:	003fee06 	br	10005c50 <__alt_data_end+0xf8005c50>
10005c98:	00bfffc4 	movi	r2,-1
10005c9c:	8080038d 	sth	r2,14(r16)
10005ca0:	00800044 	movi	r2,1
10005ca4:	8080030d 	sth	r2,12(r16)
10005ca8:	80001915 	stw	zero,100(r16)
10005cac:	80000015 	stw	zero,0(r16)
10005cb0:	80000215 	stw	zero,8(r16)
10005cb4:	80000115 	stw	zero,4(r16)
10005cb8:	80000415 	stw	zero,16(r16)
10005cbc:	80000515 	stw	zero,20(r16)
10005cc0:	80000615 	stw	zero,24(r16)
10005cc4:	01800204 	movi	r6,8
10005cc8:	000b883a 	mov	r5,zero
10005ccc:	81001704 	addi	r4,r16,92
10005cd0:	0006ed40 	call	10006ed4 <memset>
10005cd4:	8005883a 	mov	r2,r16
10005cd8:	80000c15 	stw	zero,48(r16)
10005cdc:	80000d15 	stw	zero,52(r16)
10005ce0:	80001115 	stw	zero,68(r16)
10005ce4:	80001215 	stw	zero,72(r16)
10005ce8:	dfc00417 	ldw	ra,16(sp)
10005cec:	dcc00317 	ldw	r19,12(sp)
10005cf0:	dc800217 	ldw	r18,8(sp)
10005cf4:	dc400117 	ldw	r17,4(sp)
10005cf8:	dc000017 	ldw	r16,0(sp)
10005cfc:	dec00504 	addi	sp,sp,20
10005d00:	f800283a 	ret
10005d04:	01400104 	movi	r5,4
10005d08:	9809883a 	mov	r4,r19
10005d0c:	0005b980 	call	10005b98 <__sfmoreglue>
10005d10:	90800015 	stw	r2,0(r18)
10005d14:	103fde1e 	bne	r2,zero,10005c90 <__alt_data_end+0xf8005c90>
10005d18:	00800304 	movi	r2,12
10005d1c:	98800015 	stw	r2,0(r19)
10005d20:	0005883a 	mov	r2,zero
10005d24:	003ff006 	br	10005ce8 <__alt_data_end+0xf8005ce8>

10005d28 <_cleanup>:
10005d28:	00840074 	movhi	r2,4097
10005d2c:	108e0504 	addi	r2,r2,14356
10005d30:	11000017 	ldw	r4,0(r2)
10005d34:	01440074 	movhi	r5,4097
10005d38:	29685904 	addi	r5,r5,-24220
10005d3c:	00062881 	jmpi	10006288 <_fwalk_reent>

10005d40 <__sinit>:
10005d40:	20800e17 	ldw	r2,56(r4)
10005d44:	10000126 	beq	r2,zero,10005d4c <__sinit+0xc>
10005d48:	f800283a 	ret
10005d4c:	00059f41 	jmpi	100059f4 <__sinit.part.1>

10005d50 <__sfp_lock_acquire>:
10005d50:	f800283a 	ret

10005d54 <__sfp_lock_release>:
10005d54:	f800283a 	ret

10005d58 <__sinit_lock_acquire>:
10005d58:	f800283a 	ret

10005d5c <__sinit_lock_release>:
10005d5c:	f800283a 	ret

10005d60 <__fp_lock_all>:
10005d60:	00840074 	movhi	r2,4097
10005d64:	108e0604 	addi	r2,r2,14360
10005d68:	11000017 	ldw	r4,0(r2)
10005d6c:	01440034 	movhi	r5,4096
10005d70:	2956e404 	addi	r5,r5,23440
10005d74:	00061c41 	jmpi	100061c4 <_fwalk>

10005d78 <__fp_unlock_all>:
10005d78:	00840074 	movhi	r2,4097
10005d7c:	108e0604 	addi	r2,r2,14360
10005d80:	11000017 	ldw	r4,0(r2)
10005d84:	01440034 	movhi	r5,4096
10005d88:	29567804 	addi	r5,r5,23008
10005d8c:	00061c41 	jmpi	100061c4 <_fwalk>

10005d90 <_malloc_trim_r>:
10005d90:	defffb04 	addi	sp,sp,-20
10005d94:	dcc00315 	stw	r19,12(sp)
10005d98:	04c40074 	movhi	r19,4097
10005d9c:	dc800215 	stw	r18,8(sp)
10005da0:	dc400115 	stw	r17,4(sp)
10005da4:	dc000015 	stw	r16,0(sp)
10005da8:	dfc00415 	stw	ra,16(sp)
10005dac:	2821883a 	mov	r16,r5
10005db0:	9cc88104 	addi	r19,r19,8708
10005db4:	2025883a 	mov	r18,r4
10005db8:	000ef500 	call	1000ef50 <__malloc_lock>
10005dbc:	98800217 	ldw	r2,8(r19)
10005dc0:	14400117 	ldw	r17,4(r2)
10005dc4:	00bfff04 	movi	r2,-4
10005dc8:	88a2703a 	and	r17,r17,r2
10005dcc:	8c21c83a 	sub	r16,r17,r16
10005dd0:	8403fbc4 	addi	r16,r16,4079
10005dd4:	8020d33a 	srli	r16,r16,12
10005dd8:	0083ffc4 	movi	r2,4095
10005ddc:	843fffc4 	addi	r16,r16,-1
10005de0:	8020933a 	slli	r16,r16,12
10005de4:	1400060e 	bge	r2,r16,10005e00 <_malloc_trim_r+0x70>
10005de8:	000b883a 	mov	r5,zero
10005dec:	9009883a 	mov	r4,r18
10005df0:	00084800 	call	10008480 <_sbrk_r>
10005df4:	98c00217 	ldw	r3,8(r19)
10005df8:	1c47883a 	add	r3,r3,r17
10005dfc:	10c00a26 	beq	r2,r3,10005e28 <_malloc_trim_r+0x98>
10005e00:	9009883a 	mov	r4,r18
10005e04:	000ef740 	call	1000ef74 <__malloc_unlock>
10005e08:	0005883a 	mov	r2,zero
10005e0c:	dfc00417 	ldw	ra,16(sp)
10005e10:	dcc00317 	ldw	r19,12(sp)
10005e14:	dc800217 	ldw	r18,8(sp)
10005e18:	dc400117 	ldw	r17,4(sp)
10005e1c:	dc000017 	ldw	r16,0(sp)
10005e20:	dec00504 	addi	sp,sp,20
10005e24:	f800283a 	ret
10005e28:	040bc83a 	sub	r5,zero,r16
10005e2c:	9009883a 	mov	r4,r18
10005e30:	00084800 	call	10008480 <_sbrk_r>
10005e34:	00ffffc4 	movi	r3,-1
10005e38:	10c00d26 	beq	r2,r3,10005e70 <_malloc_trim_r+0xe0>
10005e3c:	00c40074 	movhi	r3,4097
10005e40:	18d51e04 	addi	r3,r3,21624
10005e44:	18800017 	ldw	r2,0(r3)
10005e48:	99000217 	ldw	r4,8(r19)
10005e4c:	8c23c83a 	sub	r17,r17,r16
10005e50:	8c400054 	ori	r17,r17,1
10005e54:	1421c83a 	sub	r16,r2,r16
10005e58:	24400115 	stw	r17,4(r4)
10005e5c:	9009883a 	mov	r4,r18
10005e60:	1c000015 	stw	r16,0(r3)
10005e64:	000ef740 	call	1000ef74 <__malloc_unlock>
10005e68:	00800044 	movi	r2,1
10005e6c:	003fe706 	br	10005e0c <__alt_data_end+0xf8005e0c>
10005e70:	000b883a 	mov	r5,zero
10005e74:	9009883a 	mov	r4,r18
10005e78:	00084800 	call	10008480 <_sbrk_r>
10005e7c:	99000217 	ldw	r4,8(r19)
10005e80:	014003c4 	movi	r5,15
10005e84:	1107c83a 	sub	r3,r2,r4
10005e88:	28ffdd0e 	bge	r5,r3,10005e00 <__alt_data_end+0xf8005e00>
10005e8c:	01440074 	movhi	r5,4097
10005e90:	294e0804 	addi	r5,r5,14368
10005e94:	29400017 	ldw	r5,0(r5)
10005e98:	18c00054 	ori	r3,r3,1
10005e9c:	20c00115 	stw	r3,4(r4)
10005ea0:	00c40074 	movhi	r3,4097
10005ea4:	1145c83a 	sub	r2,r2,r5
10005ea8:	18d51e04 	addi	r3,r3,21624
10005eac:	18800015 	stw	r2,0(r3)
10005eb0:	003fd306 	br	10005e00 <__alt_data_end+0xf8005e00>

10005eb4 <_free_r>:
10005eb4:	28004126 	beq	r5,zero,10005fbc <_free_r+0x108>
10005eb8:	defffd04 	addi	sp,sp,-12
10005ebc:	dc400115 	stw	r17,4(sp)
10005ec0:	dc000015 	stw	r16,0(sp)
10005ec4:	2023883a 	mov	r17,r4
10005ec8:	2821883a 	mov	r16,r5
10005ecc:	dfc00215 	stw	ra,8(sp)
10005ed0:	000ef500 	call	1000ef50 <__malloc_lock>
10005ed4:	81ffff17 	ldw	r7,-4(r16)
10005ed8:	00bfff84 	movi	r2,-2
10005edc:	01040074 	movhi	r4,4097
10005ee0:	81bffe04 	addi	r6,r16,-8
10005ee4:	3884703a 	and	r2,r7,r2
10005ee8:	21088104 	addi	r4,r4,8708
10005eec:	308b883a 	add	r5,r6,r2
10005ef0:	2a400117 	ldw	r9,4(r5)
10005ef4:	22000217 	ldw	r8,8(r4)
10005ef8:	00ffff04 	movi	r3,-4
10005efc:	48c6703a 	and	r3,r9,r3
10005f00:	2a005726 	beq	r5,r8,10006060 <_free_r+0x1ac>
10005f04:	28c00115 	stw	r3,4(r5)
10005f08:	39c0004c 	andi	r7,r7,1
10005f0c:	3800091e 	bne	r7,zero,10005f34 <_free_r+0x80>
10005f10:	823ffe17 	ldw	r8,-8(r16)
10005f14:	22400204 	addi	r9,r4,8
10005f18:	320dc83a 	sub	r6,r6,r8
10005f1c:	31c00217 	ldw	r7,8(r6)
10005f20:	1205883a 	add	r2,r2,r8
10005f24:	3a406526 	beq	r7,r9,100060bc <_free_r+0x208>
10005f28:	32000317 	ldw	r8,12(r6)
10005f2c:	3a000315 	stw	r8,12(r7)
10005f30:	41c00215 	stw	r7,8(r8)
10005f34:	28cf883a 	add	r7,r5,r3
10005f38:	39c00117 	ldw	r7,4(r7)
10005f3c:	39c0004c 	andi	r7,r7,1
10005f40:	38003a26 	beq	r7,zero,1000602c <_free_r+0x178>
10005f44:	10c00054 	ori	r3,r2,1
10005f48:	30c00115 	stw	r3,4(r6)
10005f4c:	3087883a 	add	r3,r6,r2
10005f50:	18800015 	stw	r2,0(r3)
10005f54:	00c07fc4 	movi	r3,511
10005f58:	18801936 	bltu	r3,r2,10005fc0 <_free_r+0x10c>
10005f5c:	1004d0fa 	srli	r2,r2,3
10005f60:	01c00044 	movi	r7,1
10005f64:	21400117 	ldw	r5,4(r4)
10005f68:	10c00044 	addi	r3,r2,1
10005f6c:	18c7883a 	add	r3,r3,r3
10005f70:	1005d0ba 	srai	r2,r2,2
10005f74:	18c7883a 	add	r3,r3,r3
10005f78:	18c7883a 	add	r3,r3,r3
10005f7c:	1907883a 	add	r3,r3,r4
10005f80:	3884983a 	sll	r2,r7,r2
10005f84:	19c00017 	ldw	r7,0(r3)
10005f88:	1a3ffe04 	addi	r8,r3,-8
10005f8c:	1144b03a 	or	r2,r2,r5
10005f90:	32000315 	stw	r8,12(r6)
10005f94:	31c00215 	stw	r7,8(r6)
10005f98:	20800115 	stw	r2,4(r4)
10005f9c:	19800015 	stw	r6,0(r3)
10005fa0:	39800315 	stw	r6,12(r7)
10005fa4:	8809883a 	mov	r4,r17
10005fa8:	dfc00217 	ldw	ra,8(sp)
10005fac:	dc400117 	ldw	r17,4(sp)
10005fb0:	dc000017 	ldw	r16,0(sp)
10005fb4:	dec00304 	addi	sp,sp,12
10005fb8:	000ef741 	jmpi	1000ef74 <__malloc_unlock>
10005fbc:	f800283a 	ret
10005fc0:	100ad27a 	srli	r5,r2,9
10005fc4:	00c00104 	movi	r3,4
10005fc8:	19404a36 	bltu	r3,r5,100060f4 <_free_r+0x240>
10005fcc:	100ad1ba 	srli	r5,r2,6
10005fd0:	28c00e44 	addi	r3,r5,57
10005fd4:	18c7883a 	add	r3,r3,r3
10005fd8:	29400e04 	addi	r5,r5,56
10005fdc:	18c7883a 	add	r3,r3,r3
10005fe0:	18c7883a 	add	r3,r3,r3
10005fe4:	1909883a 	add	r4,r3,r4
10005fe8:	20c00017 	ldw	r3,0(r4)
10005fec:	01c40074 	movhi	r7,4097
10005ff0:	213ffe04 	addi	r4,r4,-8
10005ff4:	39c88104 	addi	r7,r7,8708
10005ff8:	20c04426 	beq	r4,r3,1000610c <_free_r+0x258>
10005ffc:	01ffff04 	movi	r7,-4
10006000:	19400117 	ldw	r5,4(r3)
10006004:	29ca703a 	and	r5,r5,r7
10006008:	1140022e 	bgeu	r2,r5,10006014 <_free_r+0x160>
1000600c:	18c00217 	ldw	r3,8(r3)
10006010:	20fffb1e 	bne	r4,r3,10006000 <__alt_data_end+0xf8006000>
10006014:	19000317 	ldw	r4,12(r3)
10006018:	31000315 	stw	r4,12(r6)
1000601c:	30c00215 	stw	r3,8(r6)
10006020:	21800215 	stw	r6,8(r4)
10006024:	19800315 	stw	r6,12(r3)
10006028:	003fde06 	br	10005fa4 <__alt_data_end+0xf8005fa4>
1000602c:	29c00217 	ldw	r7,8(r5)
10006030:	10c5883a 	add	r2,r2,r3
10006034:	00c40074 	movhi	r3,4097
10006038:	18c88304 	addi	r3,r3,8716
1000603c:	38c03b26 	beq	r7,r3,1000612c <_free_r+0x278>
10006040:	2a000317 	ldw	r8,12(r5)
10006044:	11400054 	ori	r5,r2,1
10006048:	3087883a 	add	r3,r6,r2
1000604c:	3a000315 	stw	r8,12(r7)
10006050:	41c00215 	stw	r7,8(r8)
10006054:	31400115 	stw	r5,4(r6)
10006058:	18800015 	stw	r2,0(r3)
1000605c:	003fbd06 	br	10005f54 <__alt_data_end+0xf8005f54>
10006060:	39c0004c 	andi	r7,r7,1
10006064:	10c5883a 	add	r2,r2,r3
10006068:	3800071e 	bne	r7,zero,10006088 <_free_r+0x1d4>
1000606c:	81fffe17 	ldw	r7,-8(r16)
10006070:	31cdc83a 	sub	r6,r6,r7
10006074:	30c00317 	ldw	r3,12(r6)
10006078:	31400217 	ldw	r5,8(r6)
1000607c:	11c5883a 	add	r2,r2,r7
10006080:	28c00315 	stw	r3,12(r5)
10006084:	19400215 	stw	r5,8(r3)
10006088:	10c00054 	ori	r3,r2,1
1000608c:	30c00115 	stw	r3,4(r6)
10006090:	00c40074 	movhi	r3,4097
10006094:	18ce0904 	addi	r3,r3,14372
10006098:	18c00017 	ldw	r3,0(r3)
1000609c:	21800215 	stw	r6,8(r4)
100060a0:	10ffc036 	bltu	r2,r3,10005fa4 <__alt_data_end+0xf8005fa4>
100060a4:	00840074 	movhi	r2,4097
100060a8:	10951504 	addi	r2,r2,21588
100060ac:	11400017 	ldw	r5,0(r2)
100060b0:	8809883a 	mov	r4,r17
100060b4:	0005d900 	call	10005d90 <_malloc_trim_r>
100060b8:	003fba06 	br	10005fa4 <__alt_data_end+0xf8005fa4>
100060bc:	28c9883a 	add	r4,r5,r3
100060c0:	21000117 	ldw	r4,4(r4)
100060c4:	2100004c 	andi	r4,r4,1
100060c8:	2000391e 	bne	r4,zero,100061b0 <_free_r+0x2fc>
100060cc:	29c00217 	ldw	r7,8(r5)
100060d0:	29000317 	ldw	r4,12(r5)
100060d4:	1885883a 	add	r2,r3,r2
100060d8:	10c00054 	ori	r3,r2,1
100060dc:	39000315 	stw	r4,12(r7)
100060e0:	21c00215 	stw	r7,8(r4)
100060e4:	30c00115 	stw	r3,4(r6)
100060e8:	308d883a 	add	r6,r6,r2
100060ec:	30800015 	stw	r2,0(r6)
100060f0:	003fac06 	br	10005fa4 <__alt_data_end+0xf8005fa4>
100060f4:	00c00504 	movi	r3,20
100060f8:	19401536 	bltu	r3,r5,10006150 <_free_r+0x29c>
100060fc:	28c01704 	addi	r3,r5,92
10006100:	18c7883a 	add	r3,r3,r3
10006104:	294016c4 	addi	r5,r5,91
10006108:	003fb406 	br	10005fdc <__alt_data_end+0xf8005fdc>
1000610c:	280bd0ba 	srai	r5,r5,2
10006110:	00c00044 	movi	r3,1
10006114:	38800117 	ldw	r2,4(r7)
10006118:	194a983a 	sll	r5,r3,r5
1000611c:	2007883a 	mov	r3,r4
10006120:	2884b03a 	or	r2,r5,r2
10006124:	38800115 	stw	r2,4(r7)
10006128:	003fbb06 	br	10006018 <__alt_data_end+0xf8006018>
1000612c:	21800515 	stw	r6,20(r4)
10006130:	21800415 	stw	r6,16(r4)
10006134:	10c00054 	ori	r3,r2,1
10006138:	31c00315 	stw	r7,12(r6)
1000613c:	31c00215 	stw	r7,8(r6)
10006140:	30c00115 	stw	r3,4(r6)
10006144:	308d883a 	add	r6,r6,r2
10006148:	30800015 	stw	r2,0(r6)
1000614c:	003f9506 	br	10005fa4 <__alt_data_end+0xf8005fa4>
10006150:	00c01504 	movi	r3,84
10006154:	19400536 	bltu	r3,r5,1000616c <_free_r+0x2b8>
10006158:	100ad33a 	srli	r5,r2,12
1000615c:	28c01bc4 	addi	r3,r5,111
10006160:	18c7883a 	add	r3,r3,r3
10006164:	29401b84 	addi	r5,r5,110
10006168:	003f9c06 	br	10005fdc <__alt_data_end+0xf8005fdc>
1000616c:	00c05504 	movi	r3,340
10006170:	19400536 	bltu	r3,r5,10006188 <_free_r+0x2d4>
10006174:	100ad3fa 	srli	r5,r2,15
10006178:	28c01e04 	addi	r3,r5,120
1000617c:	18c7883a 	add	r3,r3,r3
10006180:	29401dc4 	addi	r5,r5,119
10006184:	003f9506 	br	10005fdc <__alt_data_end+0xf8005fdc>
10006188:	00c15504 	movi	r3,1364
1000618c:	19400536 	bltu	r3,r5,100061a4 <_free_r+0x2f0>
10006190:	100ad4ba 	srli	r5,r2,18
10006194:	28c01f44 	addi	r3,r5,125
10006198:	18c7883a 	add	r3,r3,r3
1000619c:	29401f04 	addi	r5,r5,124
100061a0:	003f8e06 	br	10005fdc <__alt_data_end+0xf8005fdc>
100061a4:	00c03f84 	movi	r3,254
100061a8:	01401f84 	movi	r5,126
100061ac:	003f8b06 	br	10005fdc <__alt_data_end+0xf8005fdc>
100061b0:	10c00054 	ori	r3,r2,1
100061b4:	30c00115 	stw	r3,4(r6)
100061b8:	308d883a 	add	r6,r6,r2
100061bc:	30800015 	stw	r2,0(r6)
100061c0:	003f7806 	br	10005fa4 <__alt_data_end+0xf8005fa4>

100061c4 <_fwalk>:
100061c4:	defff704 	addi	sp,sp,-36
100061c8:	dd000415 	stw	r20,16(sp)
100061cc:	dfc00815 	stw	ra,32(sp)
100061d0:	ddc00715 	stw	r23,28(sp)
100061d4:	dd800615 	stw	r22,24(sp)
100061d8:	dd400515 	stw	r21,20(sp)
100061dc:	dcc00315 	stw	r19,12(sp)
100061e0:	dc800215 	stw	r18,8(sp)
100061e4:	dc400115 	stw	r17,4(sp)
100061e8:	dc000015 	stw	r16,0(sp)
100061ec:	2500b804 	addi	r20,r4,736
100061f0:	a0002326 	beq	r20,zero,10006280 <_fwalk+0xbc>
100061f4:	282b883a 	mov	r21,r5
100061f8:	002f883a 	mov	r23,zero
100061fc:	05800044 	movi	r22,1
10006200:	04ffffc4 	movi	r19,-1
10006204:	a4400117 	ldw	r17,4(r20)
10006208:	a4800217 	ldw	r18,8(r20)
1000620c:	8c7fffc4 	addi	r17,r17,-1
10006210:	88000d16 	blt	r17,zero,10006248 <_fwalk+0x84>
10006214:	94000304 	addi	r16,r18,12
10006218:	94800384 	addi	r18,r18,14
1000621c:	8080000b 	ldhu	r2,0(r16)
10006220:	8c7fffc4 	addi	r17,r17,-1
10006224:	813ffd04 	addi	r4,r16,-12
10006228:	b080042e 	bgeu	r22,r2,1000623c <_fwalk+0x78>
1000622c:	9080000f 	ldh	r2,0(r18)
10006230:	14c00226 	beq	r2,r19,1000623c <_fwalk+0x78>
10006234:	a83ee83a 	callr	r21
10006238:	b8aeb03a 	or	r23,r23,r2
1000623c:	84001a04 	addi	r16,r16,104
10006240:	94801a04 	addi	r18,r18,104
10006244:	8cfff51e 	bne	r17,r19,1000621c <__alt_data_end+0xf800621c>
10006248:	a5000017 	ldw	r20,0(r20)
1000624c:	a03fed1e 	bne	r20,zero,10006204 <__alt_data_end+0xf8006204>
10006250:	b805883a 	mov	r2,r23
10006254:	dfc00817 	ldw	ra,32(sp)
10006258:	ddc00717 	ldw	r23,28(sp)
1000625c:	dd800617 	ldw	r22,24(sp)
10006260:	dd400517 	ldw	r21,20(sp)
10006264:	dd000417 	ldw	r20,16(sp)
10006268:	dcc00317 	ldw	r19,12(sp)
1000626c:	dc800217 	ldw	r18,8(sp)
10006270:	dc400117 	ldw	r17,4(sp)
10006274:	dc000017 	ldw	r16,0(sp)
10006278:	dec00904 	addi	sp,sp,36
1000627c:	f800283a 	ret
10006280:	002f883a 	mov	r23,zero
10006284:	003ff206 	br	10006250 <__alt_data_end+0xf8006250>

10006288 <_fwalk_reent>:
10006288:	defff704 	addi	sp,sp,-36
1000628c:	dd000415 	stw	r20,16(sp)
10006290:	dfc00815 	stw	ra,32(sp)
10006294:	ddc00715 	stw	r23,28(sp)
10006298:	dd800615 	stw	r22,24(sp)
1000629c:	dd400515 	stw	r21,20(sp)
100062a0:	dcc00315 	stw	r19,12(sp)
100062a4:	dc800215 	stw	r18,8(sp)
100062a8:	dc400115 	stw	r17,4(sp)
100062ac:	dc000015 	stw	r16,0(sp)
100062b0:	2500b804 	addi	r20,r4,736
100062b4:	a0002326 	beq	r20,zero,10006344 <_fwalk_reent+0xbc>
100062b8:	282b883a 	mov	r21,r5
100062bc:	2027883a 	mov	r19,r4
100062c0:	002f883a 	mov	r23,zero
100062c4:	05800044 	movi	r22,1
100062c8:	04bfffc4 	movi	r18,-1
100062cc:	a4400117 	ldw	r17,4(r20)
100062d0:	a4000217 	ldw	r16,8(r20)
100062d4:	8c7fffc4 	addi	r17,r17,-1
100062d8:	88000c16 	blt	r17,zero,1000630c <_fwalk_reent+0x84>
100062dc:	84000304 	addi	r16,r16,12
100062e0:	8080000b 	ldhu	r2,0(r16)
100062e4:	8c7fffc4 	addi	r17,r17,-1
100062e8:	817ffd04 	addi	r5,r16,-12
100062ec:	b080052e 	bgeu	r22,r2,10006304 <_fwalk_reent+0x7c>
100062f0:	8080008f 	ldh	r2,2(r16)
100062f4:	9809883a 	mov	r4,r19
100062f8:	14800226 	beq	r2,r18,10006304 <_fwalk_reent+0x7c>
100062fc:	a83ee83a 	callr	r21
10006300:	b8aeb03a 	or	r23,r23,r2
10006304:	84001a04 	addi	r16,r16,104
10006308:	8cbff51e 	bne	r17,r18,100062e0 <__alt_data_end+0xf80062e0>
1000630c:	a5000017 	ldw	r20,0(r20)
10006310:	a03fee1e 	bne	r20,zero,100062cc <__alt_data_end+0xf80062cc>
10006314:	b805883a 	mov	r2,r23
10006318:	dfc00817 	ldw	ra,32(sp)
1000631c:	ddc00717 	ldw	r23,28(sp)
10006320:	dd800617 	ldw	r22,24(sp)
10006324:	dd400517 	ldw	r21,20(sp)
10006328:	dd000417 	ldw	r20,16(sp)
1000632c:	dcc00317 	ldw	r19,12(sp)
10006330:	dc800217 	ldw	r18,8(sp)
10006334:	dc400117 	ldw	r17,4(sp)
10006338:	dc000017 	ldw	r16,0(sp)
1000633c:	dec00904 	addi	sp,sp,36
10006340:	f800283a 	ret
10006344:	002f883a 	mov	r23,zero
10006348:	003ff206 	br	10006314 <__alt_data_end+0xf8006314>

1000634c <_setlocale_r>:
1000634c:	30001b26 	beq	r6,zero,100063bc <_setlocale_r+0x70>
10006350:	01440074 	movhi	r5,4097
10006354:	defffe04 	addi	sp,sp,-8
10006358:	29467904 	addi	r5,r5,6628
1000635c:	3009883a 	mov	r4,r6
10006360:	dc000015 	stw	r16,0(sp)
10006364:	dfc00115 	stw	ra,4(sp)
10006368:	3021883a 	mov	r16,r6
1000636c:	00086100 	call	10008610 <strcmp>
10006370:	1000061e 	bne	r2,zero,1000638c <_setlocale_r+0x40>
10006374:	00840074 	movhi	r2,4097
10006378:	10865b04 	addi	r2,r2,6508
1000637c:	dfc00117 	ldw	ra,4(sp)
10006380:	dc000017 	ldw	r16,0(sp)
10006384:	dec00204 	addi	sp,sp,8
10006388:	f800283a 	ret
1000638c:	01440074 	movhi	r5,4097
10006390:	29465b04 	addi	r5,r5,6508
10006394:	8009883a 	mov	r4,r16
10006398:	00086100 	call	10008610 <strcmp>
1000639c:	103ff526 	beq	r2,zero,10006374 <__alt_data_end+0xf8006374>
100063a0:	01440074 	movhi	r5,4097
100063a4:	29466404 	addi	r5,r5,6544
100063a8:	8009883a 	mov	r4,r16
100063ac:	00086100 	call	10008610 <strcmp>
100063b0:	103ff026 	beq	r2,zero,10006374 <__alt_data_end+0xf8006374>
100063b4:	0005883a 	mov	r2,zero
100063b8:	003ff006 	br	1000637c <__alt_data_end+0xf800637c>
100063bc:	00840074 	movhi	r2,4097
100063c0:	10865b04 	addi	r2,r2,6508
100063c4:	f800283a 	ret

100063c8 <__locale_charset>:
100063c8:	00840074 	movhi	r2,4097
100063cc:	10886b04 	addi	r2,r2,8620
100063d0:	f800283a 	ret

100063d4 <__locale_mb_cur_max>:
100063d4:	00840074 	movhi	r2,4097
100063d8:	108e0704 	addi	r2,r2,14364
100063dc:	10800017 	ldw	r2,0(r2)
100063e0:	f800283a 	ret

100063e4 <__locale_msgcharset>:
100063e4:	00840074 	movhi	r2,4097
100063e8:	10886304 	addi	r2,r2,8588
100063ec:	f800283a 	ret

100063f0 <__locale_cjk_lang>:
100063f0:	0005883a 	mov	r2,zero
100063f4:	f800283a 	ret

100063f8 <_localeconv_r>:
100063f8:	00840074 	movhi	r2,4097
100063fc:	10887304 	addi	r2,r2,8652
10006400:	f800283a 	ret

10006404 <setlocale>:
10006404:	00840074 	movhi	r2,4097
10006408:	108e0604 	addi	r2,r2,14360
1000640c:	280d883a 	mov	r6,r5
10006410:	200b883a 	mov	r5,r4
10006414:	11000017 	ldw	r4,0(r2)
10006418:	000634c1 	jmpi	1000634c <_setlocale_r>

1000641c <localeconv>:
1000641c:	00840074 	movhi	r2,4097
10006420:	10887304 	addi	r2,r2,8652
10006424:	f800283a 	ret

10006428 <__smakebuf_r>:
10006428:	2880030b 	ldhu	r2,12(r5)
1000642c:	10c0008c 	andi	r3,r2,2
10006430:	1800411e 	bne	r3,zero,10006538 <__smakebuf_r+0x110>
10006434:	deffec04 	addi	sp,sp,-80
10006438:	dc000f15 	stw	r16,60(sp)
1000643c:	2821883a 	mov	r16,r5
10006440:	2940038f 	ldh	r5,14(r5)
10006444:	dc401015 	stw	r17,64(sp)
10006448:	dfc01315 	stw	ra,76(sp)
1000644c:	dcc01215 	stw	r19,72(sp)
10006450:	dc801115 	stw	r18,68(sp)
10006454:	2023883a 	mov	r17,r4
10006458:	28001c16 	blt	r5,zero,100064cc <__smakebuf_r+0xa4>
1000645c:	d80d883a 	mov	r6,sp
10006460:	000a4700 	call	1000a470 <_fstat_r>
10006464:	10001816 	blt	r2,zero,100064c8 <__smakebuf_r+0xa0>
10006468:	d8800117 	ldw	r2,4(sp)
1000646c:	00e00014 	movui	r3,32768
10006470:	10bc000c 	andi	r2,r2,61440
10006474:	14c80020 	cmpeqi	r19,r2,8192
10006478:	10c03726 	beq	r2,r3,10006558 <__smakebuf_r+0x130>
1000647c:	80c0030b 	ldhu	r3,12(r16)
10006480:	18c20014 	ori	r3,r3,2048
10006484:	80c0030d 	sth	r3,12(r16)
10006488:	00c80004 	movi	r3,8192
1000648c:	10c0521e 	bne	r2,r3,100065d8 <__smakebuf_r+0x1b0>
10006490:	8140038f 	ldh	r5,14(r16)
10006494:	8809883a 	mov	r4,r17
10006498:	000a9940 	call	1000a994 <_isatty_r>
1000649c:	10004c26 	beq	r2,zero,100065d0 <__smakebuf_r+0x1a8>
100064a0:	8080030b 	ldhu	r2,12(r16)
100064a4:	80c010c4 	addi	r3,r16,67
100064a8:	80c00015 	stw	r3,0(r16)
100064ac:	10800054 	ori	r2,r2,1
100064b0:	8080030d 	sth	r2,12(r16)
100064b4:	00800044 	movi	r2,1
100064b8:	80c00415 	stw	r3,16(r16)
100064bc:	80800515 	stw	r2,20(r16)
100064c0:	04810004 	movi	r18,1024
100064c4:	00000706 	br	100064e4 <__smakebuf_r+0xbc>
100064c8:	8080030b 	ldhu	r2,12(r16)
100064cc:	10c0200c 	andi	r3,r2,128
100064d0:	18001f1e 	bne	r3,zero,10006550 <__smakebuf_r+0x128>
100064d4:	04810004 	movi	r18,1024
100064d8:	10820014 	ori	r2,r2,2048
100064dc:	8080030d 	sth	r2,12(r16)
100064e0:	0027883a 	mov	r19,zero
100064e4:	900b883a 	mov	r5,r18
100064e8:	8809883a 	mov	r4,r17
100064ec:	00065e40 	call	100065e4 <_malloc_r>
100064f0:	10002c26 	beq	r2,zero,100065a4 <__smakebuf_r+0x17c>
100064f4:	80c0030b 	ldhu	r3,12(r16)
100064f8:	01040034 	movhi	r4,4096
100064fc:	21167a04 	addi	r4,r4,23016
10006500:	89000f15 	stw	r4,60(r17)
10006504:	18c02014 	ori	r3,r3,128
10006508:	80c0030d 	sth	r3,12(r16)
1000650c:	80800015 	stw	r2,0(r16)
10006510:	80800415 	stw	r2,16(r16)
10006514:	84800515 	stw	r18,20(r16)
10006518:	98001a1e 	bne	r19,zero,10006584 <__smakebuf_r+0x15c>
1000651c:	dfc01317 	ldw	ra,76(sp)
10006520:	dcc01217 	ldw	r19,72(sp)
10006524:	dc801117 	ldw	r18,68(sp)
10006528:	dc401017 	ldw	r17,64(sp)
1000652c:	dc000f17 	ldw	r16,60(sp)
10006530:	dec01404 	addi	sp,sp,80
10006534:	f800283a 	ret
10006538:	288010c4 	addi	r2,r5,67
1000653c:	28800015 	stw	r2,0(r5)
10006540:	28800415 	stw	r2,16(r5)
10006544:	00800044 	movi	r2,1
10006548:	28800515 	stw	r2,20(r5)
1000654c:	f800283a 	ret
10006550:	04801004 	movi	r18,64
10006554:	003fe006 	br	100064d8 <__alt_data_end+0xf80064d8>
10006558:	81000a17 	ldw	r4,40(r16)
1000655c:	00c40074 	movhi	r3,4097
10006560:	18e16b04 	addi	r3,r3,-31316
10006564:	20ffc51e 	bne	r4,r3,1000647c <__alt_data_end+0xf800647c>
10006568:	8080030b 	ldhu	r2,12(r16)
1000656c:	04810004 	movi	r18,1024
10006570:	84801315 	stw	r18,76(r16)
10006574:	1484b03a 	or	r2,r2,r18
10006578:	8080030d 	sth	r2,12(r16)
1000657c:	0027883a 	mov	r19,zero
10006580:	003fd806 	br	100064e4 <__alt_data_end+0xf80064e4>
10006584:	8140038f 	ldh	r5,14(r16)
10006588:	8809883a 	mov	r4,r17
1000658c:	000a9940 	call	1000a994 <_isatty_r>
10006590:	103fe226 	beq	r2,zero,1000651c <__alt_data_end+0xf800651c>
10006594:	8080030b 	ldhu	r2,12(r16)
10006598:	10800054 	ori	r2,r2,1
1000659c:	8080030d 	sth	r2,12(r16)
100065a0:	003fde06 	br	1000651c <__alt_data_end+0xf800651c>
100065a4:	8080030b 	ldhu	r2,12(r16)
100065a8:	10c0800c 	andi	r3,r2,512
100065ac:	183fdb1e 	bne	r3,zero,1000651c <__alt_data_end+0xf800651c>
100065b0:	10800094 	ori	r2,r2,2
100065b4:	80c010c4 	addi	r3,r16,67
100065b8:	8080030d 	sth	r2,12(r16)
100065bc:	00800044 	movi	r2,1
100065c0:	80c00015 	stw	r3,0(r16)
100065c4:	80c00415 	stw	r3,16(r16)
100065c8:	80800515 	stw	r2,20(r16)
100065cc:	003fd306 	br	1000651c <__alt_data_end+0xf800651c>
100065d0:	04810004 	movi	r18,1024
100065d4:	003fc306 	br	100064e4 <__alt_data_end+0xf80064e4>
100065d8:	0027883a 	mov	r19,zero
100065dc:	04810004 	movi	r18,1024
100065e0:	003fc006 	br	100064e4 <__alt_data_end+0xf80064e4>

100065e4 <_malloc_r>:
100065e4:	defff504 	addi	sp,sp,-44
100065e8:	dc800315 	stw	r18,12(sp)
100065ec:	dfc00a15 	stw	ra,40(sp)
100065f0:	df000915 	stw	fp,36(sp)
100065f4:	ddc00815 	stw	r23,32(sp)
100065f8:	dd800715 	stw	r22,28(sp)
100065fc:	dd400615 	stw	r21,24(sp)
10006600:	dd000515 	stw	r20,20(sp)
10006604:	dcc00415 	stw	r19,16(sp)
10006608:	dc400215 	stw	r17,8(sp)
1000660c:	dc000115 	stw	r16,4(sp)
10006610:	288002c4 	addi	r2,r5,11
10006614:	00c00584 	movi	r3,22
10006618:	2025883a 	mov	r18,r4
1000661c:	18807f2e 	bgeu	r3,r2,1000681c <_malloc_r+0x238>
10006620:	047ffe04 	movi	r17,-8
10006624:	1462703a 	and	r17,r2,r17
10006628:	8800a316 	blt	r17,zero,100068b8 <_malloc_r+0x2d4>
1000662c:	8940a236 	bltu	r17,r5,100068b8 <_malloc_r+0x2d4>
10006630:	000ef500 	call	1000ef50 <__malloc_lock>
10006634:	00807dc4 	movi	r2,503
10006638:	1441e92e 	bgeu	r2,r17,10006de0 <_malloc_r+0x7fc>
1000663c:	8804d27a 	srli	r2,r17,9
10006640:	1000a126 	beq	r2,zero,100068c8 <_malloc_r+0x2e4>
10006644:	00c00104 	movi	r3,4
10006648:	18811e36 	bltu	r3,r2,10006ac4 <_malloc_r+0x4e0>
1000664c:	8804d1ba 	srli	r2,r17,6
10006650:	12000e44 	addi	r8,r2,57
10006654:	11c00e04 	addi	r7,r2,56
10006658:	4209883a 	add	r4,r8,r8
1000665c:	04c40074 	movhi	r19,4097
10006660:	2109883a 	add	r4,r4,r4
10006664:	9cc88104 	addi	r19,r19,8708
10006668:	2109883a 	add	r4,r4,r4
1000666c:	9909883a 	add	r4,r19,r4
10006670:	24000117 	ldw	r16,4(r4)
10006674:	213ffe04 	addi	r4,r4,-8
10006678:	24009726 	beq	r4,r16,100068d8 <_malloc_r+0x2f4>
1000667c:	80800117 	ldw	r2,4(r16)
10006680:	01bfff04 	movi	r6,-4
10006684:	014003c4 	movi	r5,15
10006688:	1184703a 	and	r2,r2,r6
1000668c:	1447c83a 	sub	r3,r2,r17
10006690:	28c00716 	blt	r5,r3,100066b0 <_malloc_r+0xcc>
10006694:	1800920e 	bge	r3,zero,100068e0 <_malloc_r+0x2fc>
10006698:	84000317 	ldw	r16,12(r16)
1000669c:	24008e26 	beq	r4,r16,100068d8 <_malloc_r+0x2f4>
100066a0:	80800117 	ldw	r2,4(r16)
100066a4:	1184703a 	and	r2,r2,r6
100066a8:	1447c83a 	sub	r3,r2,r17
100066ac:	28fff90e 	bge	r5,r3,10006694 <__alt_data_end+0xf8006694>
100066b0:	3809883a 	mov	r4,r7
100066b4:	01840074 	movhi	r6,4097
100066b8:	9c000417 	ldw	r16,16(r19)
100066bc:	31888104 	addi	r6,r6,8708
100066c0:	32000204 	addi	r8,r6,8
100066c4:	82013426 	beq	r16,r8,10006b98 <_malloc_r+0x5b4>
100066c8:	80c00117 	ldw	r3,4(r16)
100066cc:	00bfff04 	movi	r2,-4
100066d0:	188e703a 	and	r7,r3,r2
100066d4:	3c45c83a 	sub	r2,r7,r17
100066d8:	00c003c4 	movi	r3,15
100066dc:	18811f16 	blt	r3,r2,10006b5c <_malloc_r+0x578>
100066e0:	32000515 	stw	r8,20(r6)
100066e4:	32000415 	stw	r8,16(r6)
100066e8:	10007f0e 	bge	r2,zero,100068e8 <_malloc_r+0x304>
100066ec:	00807fc4 	movi	r2,511
100066f0:	11c0fd36 	bltu	r2,r7,10006ae8 <_malloc_r+0x504>
100066f4:	3806d0fa 	srli	r3,r7,3
100066f8:	01c00044 	movi	r7,1
100066fc:	30800117 	ldw	r2,4(r6)
10006700:	19400044 	addi	r5,r3,1
10006704:	294b883a 	add	r5,r5,r5
10006708:	1807d0ba 	srai	r3,r3,2
1000670c:	294b883a 	add	r5,r5,r5
10006710:	294b883a 	add	r5,r5,r5
10006714:	298b883a 	add	r5,r5,r6
10006718:	38c6983a 	sll	r3,r7,r3
1000671c:	29c00017 	ldw	r7,0(r5)
10006720:	2a7ffe04 	addi	r9,r5,-8
10006724:	1886b03a 	or	r3,r3,r2
10006728:	82400315 	stw	r9,12(r16)
1000672c:	81c00215 	stw	r7,8(r16)
10006730:	30c00115 	stw	r3,4(r6)
10006734:	2c000015 	stw	r16,0(r5)
10006738:	3c000315 	stw	r16,12(r7)
1000673c:	2005d0ba 	srai	r2,r4,2
10006740:	01400044 	movi	r5,1
10006744:	288a983a 	sll	r5,r5,r2
10006748:	19406f36 	bltu	r3,r5,10006908 <_malloc_r+0x324>
1000674c:	28c4703a 	and	r2,r5,r3
10006750:	10000a1e 	bne	r2,zero,1000677c <_malloc_r+0x198>
10006754:	00bfff04 	movi	r2,-4
10006758:	294b883a 	add	r5,r5,r5
1000675c:	2088703a 	and	r4,r4,r2
10006760:	28c4703a 	and	r2,r5,r3
10006764:	21000104 	addi	r4,r4,4
10006768:	1000041e 	bne	r2,zero,1000677c <_malloc_r+0x198>
1000676c:	294b883a 	add	r5,r5,r5
10006770:	28c4703a 	and	r2,r5,r3
10006774:	21000104 	addi	r4,r4,4
10006778:	103ffc26 	beq	r2,zero,1000676c <__alt_data_end+0xf800676c>
1000677c:	02bfff04 	movi	r10,-4
10006780:	024003c4 	movi	r9,15
10006784:	21800044 	addi	r6,r4,1
10006788:	318d883a 	add	r6,r6,r6
1000678c:	318d883a 	add	r6,r6,r6
10006790:	318d883a 	add	r6,r6,r6
10006794:	998d883a 	add	r6,r19,r6
10006798:	333ffe04 	addi	r12,r6,-8
1000679c:	2017883a 	mov	r11,r4
100067a0:	31800104 	addi	r6,r6,4
100067a4:	34000017 	ldw	r16,0(r6)
100067a8:	31fffd04 	addi	r7,r6,-12
100067ac:	81c0041e 	bne	r16,r7,100067c0 <_malloc_r+0x1dc>
100067b0:	0000fb06 	br	10006ba0 <_malloc_r+0x5bc>
100067b4:	1801030e 	bge	r3,zero,10006bc4 <_malloc_r+0x5e0>
100067b8:	84000317 	ldw	r16,12(r16)
100067bc:	81c0f826 	beq	r16,r7,10006ba0 <_malloc_r+0x5bc>
100067c0:	80800117 	ldw	r2,4(r16)
100067c4:	1284703a 	and	r2,r2,r10
100067c8:	1447c83a 	sub	r3,r2,r17
100067cc:	48fff90e 	bge	r9,r3,100067b4 <__alt_data_end+0xf80067b4>
100067d0:	80800317 	ldw	r2,12(r16)
100067d4:	81000217 	ldw	r4,8(r16)
100067d8:	89400054 	ori	r5,r17,1
100067dc:	81400115 	stw	r5,4(r16)
100067e0:	20800315 	stw	r2,12(r4)
100067e4:	11000215 	stw	r4,8(r2)
100067e8:	8463883a 	add	r17,r16,r17
100067ec:	9c400515 	stw	r17,20(r19)
100067f0:	9c400415 	stw	r17,16(r19)
100067f4:	18800054 	ori	r2,r3,1
100067f8:	88800115 	stw	r2,4(r17)
100067fc:	8a000315 	stw	r8,12(r17)
10006800:	8a000215 	stw	r8,8(r17)
10006804:	88e3883a 	add	r17,r17,r3
10006808:	88c00015 	stw	r3,0(r17)
1000680c:	9009883a 	mov	r4,r18
10006810:	000ef740 	call	1000ef74 <__malloc_unlock>
10006814:	80800204 	addi	r2,r16,8
10006818:	00001b06 	br	10006888 <_malloc_r+0x2a4>
1000681c:	04400404 	movi	r17,16
10006820:	89402536 	bltu	r17,r5,100068b8 <_malloc_r+0x2d4>
10006824:	000ef500 	call	1000ef50 <__malloc_lock>
10006828:	00800184 	movi	r2,6
1000682c:	01000084 	movi	r4,2
10006830:	04c40074 	movhi	r19,4097
10006834:	1085883a 	add	r2,r2,r2
10006838:	9cc88104 	addi	r19,r19,8708
1000683c:	1085883a 	add	r2,r2,r2
10006840:	9885883a 	add	r2,r19,r2
10006844:	14000117 	ldw	r16,4(r2)
10006848:	10fffe04 	addi	r3,r2,-8
1000684c:	80c0d926 	beq	r16,r3,10006bb4 <_malloc_r+0x5d0>
10006850:	80c00117 	ldw	r3,4(r16)
10006854:	81000317 	ldw	r4,12(r16)
10006858:	00bfff04 	movi	r2,-4
1000685c:	1884703a 	and	r2,r3,r2
10006860:	81400217 	ldw	r5,8(r16)
10006864:	8085883a 	add	r2,r16,r2
10006868:	10c00117 	ldw	r3,4(r2)
1000686c:	29000315 	stw	r4,12(r5)
10006870:	21400215 	stw	r5,8(r4)
10006874:	18c00054 	ori	r3,r3,1
10006878:	10c00115 	stw	r3,4(r2)
1000687c:	9009883a 	mov	r4,r18
10006880:	000ef740 	call	1000ef74 <__malloc_unlock>
10006884:	80800204 	addi	r2,r16,8
10006888:	dfc00a17 	ldw	ra,40(sp)
1000688c:	df000917 	ldw	fp,36(sp)
10006890:	ddc00817 	ldw	r23,32(sp)
10006894:	dd800717 	ldw	r22,28(sp)
10006898:	dd400617 	ldw	r21,24(sp)
1000689c:	dd000517 	ldw	r20,20(sp)
100068a0:	dcc00417 	ldw	r19,16(sp)
100068a4:	dc800317 	ldw	r18,12(sp)
100068a8:	dc400217 	ldw	r17,8(sp)
100068ac:	dc000117 	ldw	r16,4(sp)
100068b0:	dec00b04 	addi	sp,sp,44
100068b4:	f800283a 	ret
100068b8:	00800304 	movi	r2,12
100068bc:	90800015 	stw	r2,0(r18)
100068c0:	0005883a 	mov	r2,zero
100068c4:	003ff006 	br	10006888 <__alt_data_end+0xf8006888>
100068c8:	01002004 	movi	r4,128
100068cc:	02001004 	movi	r8,64
100068d0:	01c00fc4 	movi	r7,63
100068d4:	003f6106 	br	1000665c <__alt_data_end+0xf800665c>
100068d8:	4009883a 	mov	r4,r8
100068dc:	003f7506 	br	100066b4 <__alt_data_end+0xf80066b4>
100068e0:	81000317 	ldw	r4,12(r16)
100068e4:	003fde06 	br	10006860 <__alt_data_end+0xf8006860>
100068e8:	81c5883a 	add	r2,r16,r7
100068ec:	11400117 	ldw	r5,4(r2)
100068f0:	9009883a 	mov	r4,r18
100068f4:	29400054 	ori	r5,r5,1
100068f8:	11400115 	stw	r5,4(r2)
100068fc:	000ef740 	call	1000ef74 <__malloc_unlock>
10006900:	80800204 	addi	r2,r16,8
10006904:	003fe006 	br	10006888 <__alt_data_end+0xf8006888>
10006908:	9c000217 	ldw	r16,8(r19)
1000690c:	00bfff04 	movi	r2,-4
10006910:	85800117 	ldw	r22,4(r16)
10006914:	b0ac703a 	and	r22,r22,r2
10006918:	b4400336 	bltu	r22,r17,10006928 <_malloc_r+0x344>
1000691c:	b445c83a 	sub	r2,r22,r17
10006920:	00c003c4 	movi	r3,15
10006924:	18805d16 	blt	r3,r2,10006a9c <_malloc_r+0x4b8>
10006928:	05c40074 	movhi	r23,4097
1000692c:	00840074 	movhi	r2,4097
10006930:	10951504 	addi	r2,r2,21588
10006934:	bdce0804 	addi	r23,r23,14368
10006938:	15400017 	ldw	r21,0(r2)
1000693c:	b8c00017 	ldw	r3,0(r23)
10006940:	00bfffc4 	movi	r2,-1
10006944:	858d883a 	add	r6,r16,r22
10006948:	8d6b883a 	add	r21,r17,r21
1000694c:	1880ea26 	beq	r3,r2,10006cf8 <_malloc_r+0x714>
10006950:	ad4403c4 	addi	r21,r21,4111
10006954:	00bc0004 	movi	r2,-4096
10006958:	a8aa703a 	and	r21,r21,r2
1000695c:	a80b883a 	mov	r5,r21
10006960:	9009883a 	mov	r4,r18
10006964:	d9800015 	stw	r6,0(sp)
10006968:	00084800 	call	10008480 <_sbrk_r>
1000696c:	1029883a 	mov	r20,r2
10006970:	00bfffc4 	movi	r2,-1
10006974:	d9800017 	ldw	r6,0(sp)
10006978:	a080e826 	beq	r20,r2,10006d1c <_malloc_r+0x738>
1000697c:	a180a636 	bltu	r20,r6,10006c18 <_malloc_r+0x634>
10006980:	07040074 	movhi	fp,4097
10006984:	e7151e04 	addi	fp,fp,21624
10006988:	e0800017 	ldw	r2,0(fp)
1000698c:	a887883a 	add	r3,r21,r2
10006990:	e0c00015 	stw	r3,0(fp)
10006994:	3500e626 	beq	r6,r20,10006d30 <_malloc_r+0x74c>
10006998:	b9000017 	ldw	r4,0(r23)
1000699c:	00bfffc4 	movi	r2,-1
100069a0:	2080ee26 	beq	r4,r2,10006d5c <_malloc_r+0x778>
100069a4:	a185c83a 	sub	r2,r20,r6
100069a8:	10c5883a 	add	r2,r2,r3
100069ac:	e0800015 	stw	r2,0(fp)
100069b0:	a0c001cc 	andi	r3,r20,7
100069b4:	1800bc26 	beq	r3,zero,10006ca8 <_malloc_r+0x6c4>
100069b8:	a0e9c83a 	sub	r20,r20,r3
100069bc:	00840204 	movi	r2,4104
100069c0:	a5000204 	addi	r20,r20,8
100069c4:	10c7c83a 	sub	r3,r2,r3
100069c8:	a545883a 	add	r2,r20,r21
100069cc:	1083ffcc 	andi	r2,r2,4095
100069d0:	18abc83a 	sub	r21,r3,r2
100069d4:	a80b883a 	mov	r5,r21
100069d8:	9009883a 	mov	r4,r18
100069dc:	00084800 	call	10008480 <_sbrk_r>
100069e0:	00ffffc4 	movi	r3,-1
100069e4:	10c0e126 	beq	r2,r3,10006d6c <_malloc_r+0x788>
100069e8:	1505c83a 	sub	r2,r2,r20
100069ec:	1545883a 	add	r2,r2,r21
100069f0:	10800054 	ori	r2,r2,1
100069f4:	e0c00017 	ldw	r3,0(fp)
100069f8:	9d000215 	stw	r20,8(r19)
100069fc:	a0800115 	stw	r2,4(r20)
10006a00:	a8c7883a 	add	r3,r21,r3
10006a04:	e0c00015 	stw	r3,0(fp)
10006a08:	84c00e26 	beq	r16,r19,10006a44 <_malloc_r+0x460>
10006a0c:	018003c4 	movi	r6,15
10006a10:	3580a72e 	bgeu	r6,r22,10006cb0 <_malloc_r+0x6cc>
10006a14:	81400117 	ldw	r5,4(r16)
10006a18:	013ffe04 	movi	r4,-8
10006a1c:	b0bffd04 	addi	r2,r22,-12
10006a20:	1104703a 	and	r2,r2,r4
10006a24:	2900004c 	andi	r4,r5,1
10006a28:	2088b03a 	or	r4,r4,r2
10006a2c:	81000115 	stw	r4,4(r16)
10006a30:	01400144 	movi	r5,5
10006a34:	8089883a 	add	r4,r16,r2
10006a38:	21400115 	stw	r5,4(r4)
10006a3c:	21400215 	stw	r5,8(r4)
10006a40:	3080cd36 	bltu	r6,r2,10006d78 <_malloc_r+0x794>
10006a44:	00840074 	movhi	r2,4097
10006a48:	10951404 	addi	r2,r2,21584
10006a4c:	11000017 	ldw	r4,0(r2)
10006a50:	20c0012e 	bgeu	r4,r3,10006a58 <_malloc_r+0x474>
10006a54:	10c00015 	stw	r3,0(r2)
10006a58:	00840074 	movhi	r2,4097
10006a5c:	10951304 	addi	r2,r2,21580
10006a60:	11000017 	ldw	r4,0(r2)
10006a64:	9c000217 	ldw	r16,8(r19)
10006a68:	20c0012e 	bgeu	r4,r3,10006a70 <_malloc_r+0x48c>
10006a6c:	10c00015 	stw	r3,0(r2)
10006a70:	80c00117 	ldw	r3,4(r16)
10006a74:	00bfff04 	movi	r2,-4
10006a78:	1886703a 	and	r3,r3,r2
10006a7c:	1c45c83a 	sub	r2,r3,r17
10006a80:	1c400236 	bltu	r3,r17,10006a8c <_malloc_r+0x4a8>
10006a84:	00c003c4 	movi	r3,15
10006a88:	18800416 	blt	r3,r2,10006a9c <_malloc_r+0x4b8>
10006a8c:	9009883a 	mov	r4,r18
10006a90:	000ef740 	call	1000ef74 <__malloc_unlock>
10006a94:	0005883a 	mov	r2,zero
10006a98:	003f7b06 	br	10006888 <__alt_data_end+0xf8006888>
10006a9c:	88c00054 	ori	r3,r17,1
10006aa0:	80c00115 	stw	r3,4(r16)
10006aa4:	8463883a 	add	r17,r16,r17
10006aa8:	10800054 	ori	r2,r2,1
10006aac:	9c400215 	stw	r17,8(r19)
10006ab0:	88800115 	stw	r2,4(r17)
10006ab4:	9009883a 	mov	r4,r18
10006ab8:	000ef740 	call	1000ef74 <__malloc_unlock>
10006abc:	80800204 	addi	r2,r16,8
10006ac0:	003f7106 	br	10006888 <__alt_data_end+0xf8006888>
10006ac4:	00c00504 	movi	r3,20
10006ac8:	18804a2e 	bgeu	r3,r2,10006bf4 <_malloc_r+0x610>
10006acc:	00c01504 	movi	r3,84
10006ad0:	18806e36 	bltu	r3,r2,10006c8c <_malloc_r+0x6a8>
10006ad4:	8804d33a 	srli	r2,r17,12
10006ad8:	12001bc4 	addi	r8,r2,111
10006adc:	11c01b84 	addi	r7,r2,110
10006ae0:	4209883a 	add	r4,r8,r8
10006ae4:	003edd06 	br	1000665c <__alt_data_end+0xf800665c>
10006ae8:	3804d27a 	srli	r2,r7,9
10006aec:	00c00104 	movi	r3,4
10006af0:	1880442e 	bgeu	r3,r2,10006c04 <_malloc_r+0x620>
10006af4:	00c00504 	movi	r3,20
10006af8:	18808136 	bltu	r3,r2,10006d00 <_malloc_r+0x71c>
10006afc:	11401704 	addi	r5,r2,92
10006b00:	10c016c4 	addi	r3,r2,91
10006b04:	294b883a 	add	r5,r5,r5
10006b08:	294b883a 	add	r5,r5,r5
10006b0c:	294b883a 	add	r5,r5,r5
10006b10:	994b883a 	add	r5,r19,r5
10006b14:	28800017 	ldw	r2,0(r5)
10006b18:	01840074 	movhi	r6,4097
10006b1c:	297ffe04 	addi	r5,r5,-8
10006b20:	31888104 	addi	r6,r6,8708
10006b24:	28806526 	beq	r5,r2,10006cbc <_malloc_r+0x6d8>
10006b28:	01bfff04 	movi	r6,-4
10006b2c:	10c00117 	ldw	r3,4(r2)
10006b30:	1986703a 	and	r3,r3,r6
10006b34:	38c0022e 	bgeu	r7,r3,10006b40 <_malloc_r+0x55c>
10006b38:	10800217 	ldw	r2,8(r2)
10006b3c:	28bffb1e 	bne	r5,r2,10006b2c <__alt_data_end+0xf8006b2c>
10006b40:	11400317 	ldw	r5,12(r2)
10006b44:	98c00117 	ldw	r3,4(r19)
10006b48:	81400315 	stw	r5,12(r16)
10006b4c:	80800215 	stw	r2,8(r16)
10006b50:	2c000215 	stw	r16,8(r5)
10006b54:	14000315 	stw	r16,12(r2)
10006b58:	003ef806 	br	1000673c <__alt_data_end+0xf800673c>
10006b5c:	88c00054 	ori	r3,r17,1
10006b60:	80c00115 	stw	r3,4(r16)
10006b64:	8463883a 	add	r17,r16,r17
10006b68:	34400515 	stw	r17,20(r6)
10006b6c:	34400415 	stw	r17,16(r6)
10006b70:	10c00054 	ori	r3,r2,1
10006b74:	8a000315 	stw	r8,12(r17)
10006b78:	8a000215 	stw	r8,8(r17)
10006b7c:	88c00115 	stw	r3,4(r17)
10006b80:	88a3883a 	add	r17,r17,r2
10006b84:	88800015 	stw	r2,0(r17)
10006b88:	9009883a 	mov	r4,r18
10006b8c:	000ef740 	call	1000ef74 <__malloc_unlock>
10006b90:	80800204 	addi	r2,r16,8
10006b94:	003f3c06 	br	10006888 <__alt_data_end+0xf8006888>
10006b98:	30c00117 	ldw	r3,4(r6)
10006b9c:	003ee706 	br	1000673c <__alt_data_end+0xf800673c>
10006ba0:	5ac00044 	addi	r11,r11,1
10006ba4:	588000cc 	andi	r2,r11,3
10006ba8:	31800204 	addi	r6,r6,8
10006bac:	103efd1e 	bne	r2,zero,100067a4 <__alt_data_end+0xf80067a4>
10006bb0:	00002406 	br	10006c44 <_malloc_r+0x660>
10006bb4:	14000317 	ldw	r16,12(r2)
10006bb8:	143f251e 	bne	r2,r16,10006850 <__alt_data_end+0xf8006850>
10006bbc:	21000084 	addi	r4,r4,2
10006bc0:	003ebc06 	br	100066b4 <__alt_data_end+0xf80066b4>
10006bc4:	8085883a 	add	r2,r16,r2
10006bc8:	10c00117 	ldw	r3,4(r2)
10006bcc:	81000317 	ldw	r4,12(r16)
10006bd0:	81400217 	ldw	r5,8(r16)
10006bd4:	18c00054 	ori	r3,r3,1
10006bd8:	10c00115 	stw	r3,4(r2)
10006bdc:	29000315 	stw	r4,12(r5)
10006be0:	21400215 	stw	r5,8(r4)
10006be4:	9009883a 	mov	r4,r18
10006be8:	000ef740 	call	1000ef74 <__malloc_unlock>
10006bec:	80800204 	addi	r2,r16,8
10006bf0:	003f2506 	br	10006888 <__alt_data_end+0xf8006888>
10006bf4:	12001704 	addi	r8,r2,92
10006bf8:	11c016c4 	addi	r7,r2,91
10006bfc:	4209883a 	add	r4,r8,r8
10006c00:	003e9606 	br	1000665c <__alt_data_end+0xf800665c>
10006c04:	3804d1ba 	srli	r2,r7,6
10006c08:	11400e44 	addi	r5,r2,57
10006c0c:	10c00e04 	addi	r3,r2,56
10006c10:	294b883a 	add	r5,r5,r5
10006c14:	003fbc06 	br	10006b08 <__alt_data_end+0xf8006b08>
10006c18:	84ff5926 	beq	r16,r19,10006980 <__alt_data_end+0xf8006980>
10006c1c:	00840074 	movhi	r2,4097
10006c20:	10888104 	addi	r2,r2,8708
10006c24:	14000217 	ldw	r16,8(r2)
10006c28:	00bfff04 	movi	r2,-4
10006c2c:	80c00117 	ldw	r3,4(r16)
10006c30:	1886703a 	and	r3,r3,r2
10006c34:	003f9106 	br	10006a7c <__alt_data_end+0xf8006a7c>
10006c38:	60800217 	ldw	r2,8(r12)
10006c3c:	213fffc4 	addi	r4,r4,-1
10006c40:	1300651e 	bne	r2,r12,10006dd8 <_malloc_r+0x7f4>
10006c44:	208000cc 	andi	r2,r4,3
10006c48:	633ffe04 	addi	r12,r12,-8
10006c4c:	103ffa1e 	bne	r2,zero,10006c38 <__alt_data_end+0xf8006c38>
10006c50:	98800117 	ldw	r2,4(r19)
10006c54:	0146303a 	nor	r3,zero,r5
10006c58:	1884703a 	and	r2,r3,r2
10006c5c:	98800115 	stw	r2,4(r19)
10006c60:	294b883a 	add	r5,r5,r5
10006c64:	117f2836 	bltu	r2,r5,10006908 <__alt_data_end+0xf8006908>
10006c68:	283f2726 	beq	r5,zero,10006908 <__alt_data_end+0xf8006908>
10006c6c:	2886703a 	and	r3,r5,r2
10006c70:	5809883a 	mov	r4,r11
10006c74:	183ec31e 	bne	r3,zero,10006784 <__alt_data_end+0xf8006784>
10006c78:	294b883a 	add	r5,r5,r5
10006c7c:	2886703a 	and	r3,r5,r2
10006c80:	21000104 	addi	r4,r4,4
10006c84:	183ffc26 	beq	r3,zero,10006c78 <__alt_data_end+0xf8006c78>
10006c88:	003ebe06 	br	10006784 <__alt_data_end+0xf8006784>
10006c8c:	00c05504 	movi	r3,340
10006c90:	18801236 	bltu	r3,r2,10006cdc <_malloc_r+0x6f8>
10006c94:	8804d3fa 	srli	r2,r17,15
10006c98:	12001e04 	addi	r8,r2,120
10006c9c:	11c01dc4 	addi	r7,r2,119
10006ca0:	4209883a 	add	r4,r8,r8
10006ca4:	003e6d06 	br	1000665c <__alt_data_end+0xf800665c>
10006ca8:	00c40004 	movi	r3,4096
10006cac:	003f4606 	br	100069c8 <__alt_data_end+0xf80069c8>
10006cb0:	00800044 	movi	r2,1
10006cb4:	a0800115 	stw	r2,4(r20)
10006cb8:	003f7406 	br	10006a8c <__alt_data_end+0xf8006a8c>
10006cbc:	1805d0ba 	srai	r2,r3,2
10006cc0:	01c00044 	movi	r7,1
10006cc4:	30c00117 	ldw	r3,4(r6)
10006cc8:	388e983a 	sll	r7,r7,r2
10006ccc:	2805883a 	mov	r2,r5
10006cd0:	38c6b03a 	or	r3,r7,r3
10006cd4:	30c00115 	stw	r3,4(r6)
10006cd8:	003f9b06 	br	10006b48 <__alt_data_end+0xf8006b48>
10006cdc:	00c15504 	movi	r3,1364
10006ce0:	18801a36 	bltu	r3,r2,10006d4c <_malloc_r+0x768>
10006ce4:	8804d4ba 	srli	r2,r17,18
10006ce8:	12001f44 	addi	r8,r2,125
10006cec:	11c01f04 	addi	r7,r2,124
10006cf0:	4209883a 	add	r4,r8,r8
10006cf4:	003e5906 	br	1000665c <__alt_data_end+0xf800665c>
10006cf8:	ad400404 	addi	r21,r21,16
10006cfc:	003f1706 	br	1000695c <__alt_data_end+0xf800695c>
10006d00:	00c01504 	movi	r3,84
10006d04:	18802336 	bltu	r3,r2,10006d94 <_malloc_r+0x7b0>
10006d08:	3804d33a 	srli	r2,r7,12
10006d0c:	11401bc4 	addi	r5,r2,111
10006d10:	10c01b84 	addi	r3,r2,110
10006d14:	294b883a 	add	r5,r5,r5
10006d18:	003f7b06 	br	10006b08 <__alt_data_end+0xf8006b08>
10006d1c:	9c000217 	ldw	r16,8(r19)
10006d20:	00bfff04 	movi	r2,-4
10006d24:	80c00117 	ldw	r3,4(r16)
10006d28:	1886703a 	and	r3,r3,r2
10006d2c:	003f5306 	br	10006a7c <__alt_data_end+0xf8006a7c>
10006d30:	3083ffcc 	andi	r2,r6,4095
10006d34:	103f181e 	bne	r2,zero,10006998 <__alt_data_end+0xf8006998>
10006d38:	99000217 	ldw	r4,8(r19)
10006d3c:	b545883a 	add	r2,r22,r21
10006d40:	10800054 	ori	r2,r2,1
10006d44:	20800115 	stw	r2,4(r4)
10006d48:	003f3e06 	br	10006a44 <__alt_data_end+0xf8006a44>
10006d4c:	01003f84 	movi	r4,254
10006d50:	02001fc4 	movi	r8,127
10006d54:	01c01f84 	movi	r7,126
10006d58:	003e4006 	br	1000665c <__alt_data_end+0xf800665c>
10006d5c:	00840074 	movhi	r2,4097
10006d60:	108e0804 	addi	r2,r2,14368
10006d64:	15000015 	stw	r20,0(r2)
10006d68:	003f1106 	br	100069b0 <__alt_data_end+0xf80069b0>
10006d6c:	00800044 	movi	r2,1
10006d70:	002b883a 	mov	r21,zero
10006d74:	003f1f06 	br	100069f4 <__alt_data_end+0xf80069f4>
10006d78:	81400204 	addi	r5,r16,8
10006d7c:	9009883a 	mov	r4,r18
10006d80:	0005eb40 	call	10005eb4 <_free_r>
10006d84:	00840074 	movhi	r2,4097
10006d88:	10951e04 	addi	r2,r2,21624
10006d8c:	10c00017 	ldw	r3,0(r2)
10006d90:	003f2c06 	br	10006a44 <__alt_data_end+0xf8006a44>
10006d94:	00c05504 	movi	r3,340
10006d98:	18800536 	bltu	r3,r2,10006db0 <_malloc_r+0x7cc>
10006d9c:	3804d3fa 	srli	r2,r7,15
10006da0:	11401e04 	addi	r5,r2,120
10006da4:	10c01dc4 	addi	r3,r2,119
10006da8:	294b883a 	add	r5,r5,r5
10006dac:	003f5606 	br	10006b08 <__alt_data_end+0xf8006b08>
10006db0:	00c15504 	movi	r3,1364
10006db4:	18800536 	bltu	r3,r2,10006dcc <_malloc_r+0x7e8>
10006db8:	3804d4ba 	srli	r2,r7,18
10006dbc:	11401f44 	addi	r5,r2,125
10006dc0:	10c01f04 	addi	r3,r2,124
10006dc4:	294b883a 	add	r5,r5,r5
10006dc8:	003f4f06 	br	10006b08 <__alt_data_end+0xf8006b08>
10006dcc:	01403f84 	movi	r5,254
10006dd0:	00c01f84 	movi	r3,126
10006dd4:	003f4c06 	br	10006b08 <__alt_data_end+0xf8006b08>
10006dd8:	98800117 	ldw	r2,4(r19)
10006ddc:	003fa006 	br	10006c60 <__alt_data_end+0xf8006c60>
10006de0:	8808d0fa 	srli	r4,r17,3
10006de4:	20800044 	addi	r2,r4,1
10006de8:	1085883a 	add	r2,r2,r2
10006dec:	003e9006 	br	10006830 <__alt_data_end+0xf8006830>

10006df0 <memchr>:
10006df0:	208000cc 	andi	r2,r4,3
10006df4:	280f883a 	mov	r7,r5
10006df8:	10003426 	beq	r2,zero,10006ecc <memchr+0xdc>
10006dfc:	30bfffc4 	addi	r2,r6,-1
10006e00:	30001a26 	beq	r6,zero,10006e6c <memchr+0x7c>
10006e04:	20c00003 	ldbu	r3,0(r4)
10006e08:	29803fcc 	andi	r6,r5,255
10006e0c:	30c0051e 	bne	r6,r3,10006e24 <memchr+0x34>
10006e10:	00001806 	br	10006e74 <memchr+0x84>
10006e14:	10001526 	beq	r2,zero,10006e6c <memchr+0x7c>
10006e18:	20c00003 	ldbu	r3,0(r4)
10006e1c:	10bfffc4 	addi	r2,r2,-1
10006e20:	30c01426 	beq	r6,r3,10006e74 <memchr+0x84>
10006e24:	21000044 	addi	r4,r4,1
10006e28:	20c000cc 	andi	r3,r4,3
10006e2c:	183ff91e 	bne	r3,zero,10006e14 <__alt_data_end+0xf8006e14>
10006e30:	020000c4 	movi	r8,3
10006e34:	40801136 	bltu	r8,r2,10006e7c <memchr+0x8c>
10006e38:	10000c26 	beq	r2,zero,10006e6c <memchr+0x7c>
10006e3c:	20c00003 	ldbu	r3,0(r4)
10006e40:	29403fcc 	andi	r5,r5,255
10006e44:	28c00b26 	beq	r5,r3,10006e74 <memchr+0x84>
10006e48:	20c00044 	addi	r3,r4,1
10006e4c:	39803fcc 	andi	r6,r7,255
10006e50:	2089883a 	add	r4,r4,r2
10006e54:	00000306 	br	10006e64 <memchr+0x74>
10006e58:	18c00044 	addi	r3,r3,1
10006e5c:	197fffc3 	ldbu	r5,-1(r3)
10006e60:	31400526 	beq	r6,r5,10006e78 <memchr+0x88>
10006e64:	1805883a 	mov	r2,r3
10006e68:	20fffb1e 	bne	r4,r3,10006e58 <__alt_data_end+0xf8006e58>
10006e6c:	0005883a 	mov	r2,zero
10006e70:	f800283a 	ret
10006e74:	2005883a 	mov	r2,r4
10006e78:	f800283a 	ret
10006e7c:	28c03fcc 	andi	r3,r5,255
10006e80:	1812923a 	slli	r9,r3,8
10006e84:	02ffbff4 	movhi	r11,65279
10006e88:	02a02074 	movhi	r10,32897
10006e8c:	48d2b03a 	or	r9,r9,r3
10006e90:	4806943a 	slli	r3,r9,16
10006e94:	5affbfc4 	addi	r11,r11,-257
10006e98:	52a02004 	addi	r10,r10,-32640
10006e9c:	48d2b03a 	or	r9,r9,r3
10006ea0:	20c00017 	ldw	r3,0(r4)
10006ea4:	48c6f03a 	xor	r3,r9,r3
10006ea8:	1acd883a 	add	r6,r3,r11
10006eac:	00c6303a 	nor	r3,zero,r3
10006eb0:	30c6703a 	and	r3,r6,r3
10006eb4:	1a86703a 	and	r3,r3,r10
10006eb8:	183fe01e 	bne	r3,zero,10006e3c <__alt_data_end+0xf8006e3c>
10006ebc:	10bfff04 	addi	r2,r2,-4
10006ec0:	21000104 	addi	r4,r4,4
10006ec4:	40bff636 	bltu	r8,r2,10006ea0 <__alt_data_end+0xf8006ea0>
10006ec8:	003fdb06 	br	10006e38 <__alt_data_end+0xf8006e38>
10006ecc:	3005883a 	mov	r2,r6
10006ed0:	003fd706 	br	10006e30 <__alt_data_end+0xf8006e30>

10006ed4 <memset>:
10006ed4:	20c000cc 	andi	r3,r4,3
10006ed8:	2005883a 	mov	r2,r4
10006edc:	18004426 	beq	r3,zero,10006ff0 <memset+0x11c>
10006ee0:	31ffffc4 	addi	r7,r6,-1
10006ee4:	30004026 	beq	r6,zero,10006fe8 <memset+0x114>
10006ee8:	2813883a 	mov	r9,r5
10006eec:	200d883a 	mov	r6,r4
10006ef0:	2007883a 	mov	r3,r4
10006ef4:	00000406 	br	10006f08 <memset+0x34>
10006ef8:	3a3fffc4 	addi	r8,r7,-1
10006efc:	31800044 	addi	r6,r6,1
10006f00:	38003926 	beq	r7,zero,10006fe8 <memset+0x114>
10006f04:	400f883a 	mov	r7,r8
10006f08:	18c00044 	addi	r3,r3,1
10006f0c:	32400005 	stb	r9,0(r6)
10006f10:	1a0000cc 	andi	r8,r3,3
10006f14:	403ff81e 	bne	r8,zero,10006ef8 <__alt_data_end+0xf8006ef8>
10006f18:	010000c4 	movi	r4,3
10006f1c:	21c02d2e 	bgeu	r4,r7,10006fd4 <memset+0x100>
10006f20:	29003fcc 	andi	r4,r5,255
10006f24:	200c923a 	slli	r6,r4,8
10006f28:	3108b03a 	or	r4,r6,r4
10006f2c:	200c943a 	slli	r6,r4,16
10006f30:	218cb03a 	or	r6,r4,r6
10006f34:	010003c4 	movi	r4,15
10006f38:	21c0182e 	bgeu	r4,r7,10006f9c <memset+0xc8>
10006f3c:	3b3ffc04 	addi	r12,r7,-16
10006f40:	6018d13a 	srli	r12,r12,4
10006f44:	1a000104 	addi	r8,r3,4
10006f48:	1ac00204 	addi	r11,r3,8
10006f4c:	6008913a 	slli	r4,r12,4
10006f50:	1a800304 	addi	r10,r3,12
10006f54:	1813883a 	mov	r9,r3
10006f58:	21000504 	addi	r4,r4,20
10006f5c:	1909883a 	add	r4,r3,r4
10006f60:	49800015 	stw	r6,0(r9)
10006f64:	41800015 	stw	r6,0(r8)
10006f68:	59800015 	stw	r6,0(r11)
10006f6c:	51800015 	stw	r6,0(r10)
10006f70:	42000404 	addi	r8,r8,16
10006f74:	4a400404 	addi	r9,r9,16
10006f78:	5ac00404 	addi	r11,r11,16
10006f7c:	52800404 	addi	r10,r10,16
10006f80:	413ff71e 	bne	r8,r4,10006f60 <__alt_data_end+0xf8006f60>
10006f84:	63000044 	addi	r12,r12,1
10006f88:	6018913a 	slli	r12,r12,4
10006f8c:	39c003cc 	andi	r7,r7,15
10006f90:	010000c4 	movi	r4,3
10006f94:	1b07883a 	add	r3,r3,r12
10006f98:	21c00e2e 	bgeu	r4,r7,10006fd4 <memset+0x100>
10006f9c:	1813883a 	mov	r9,r3
10006fa0:	3811883a 	mov	r8,r7
10006fa4:	010000c4 	movi	r4,3
10006fa8:	49800015 	stw	r6,0(r9)
10006fac:	423fff04 	addi	r8,r8,-4
10006fb0:	4a400104 	addi	r9,r9,4
10006fb4:	223ffc36 	bltu	r4,r8,10006fa8 <__alt_data_end+0xf8006fa8>
10006fb8:	393fff04 	addi	r4,r7,-4
10006fbc:	2008d0ba 	srli	r4,r4,2
10006fc0:	39c000cc 	andi	r7,r7,3
10006fc4:	21000044 	addi	r4,r4,1
10006fc8:	2109883a 	add	r4,r4,r4
10006fcc:	2109883a 	add	r4,r4,r4
10006fd0:	1907883a 	add	r3,r3,r4
10006fd4:	38000526 	beq	r7,zero,10006fec <memset+0x118>
10006fd8:	19cf883a 	add	r7,r3,r7
10006fdc:	19400005 	stb	r5,0(r3)
10006fe0:	18c00044 	addi	r3,r3,1
10006fe4:	38fffd1e 	bne	r7,r3,10006fdc <__alt_data_end+0xf8006fdc>
10006fe8:	f800283a 	ret
10006fec:	f800283a 	ret
10006ff0:	2007883a 	mov	r3,r4
10006ff4:	300f883a 	mov	r7,r6
10006ff8:	003fc706 	br	10006f18 <__alt_data_end+0xf8006f18>

10006ffc <_Balloc>:
10006ffc:	20801317 	ldw	r2,76(r4)
10007000:	defffc04 	addi	sp,sp,-16
10007004:	dc400115 	stw	r17,4(sp)
10007008:	dc000015 	stw	r16,0(sp)
1000700c:	dfc00315 	stw	ra,12(sp)
10007010:	dc800215 	stw	r18,8(sp)
10007014:	2023883a 	mov	r17,r4
10007018:	2821883a 	mov	r16,r5
1000701c:	10000f26 	beq	r2,zero,1000705c <_Balloc+0x60>
10007020:	8407883a 	add	r3,r16,r16
10007024:	18c7883a 	add	r3,r3,r3
10007028:	10c7883a 	add	r3,r2,r3
1000702c:	18800017 	ldw	r2,0(r3)
10007030:	10001126 	beq	r2,zero,10007078 <_Balloc+0x7c>
10007034:	11000017 	ldw	r4,0(r2)
10007038:	19000015 	stw	r4,0(r3)
1000703c:	10000415 	stw	zero,16(r2)
10007040:	10000315 	stw	zero,12(r2)
10007044:	dfc00317 	ldw	ra,12(sp)
10007048:	dc800217 	ldw	r18,8(sp)
1000704c:	dc400117 	ldw	r17,4(sp)
10007050:	dc000017 	ldw	r16,0(sp)
10007054:	dec00404 	addi	sp,sp,16
10007058:	f800283a 	ret
1000705c:	01800844 	movi	r6,33
10007060:	01400104 	movi	r5,4
10007064:	000a0880 	call	1000a088 <_calloc_r>
10007068:	88801315 	stw	r2,76(r17)
1000706c:	103fec1e 	bne	r2,zero,10007020 <__alt_data_end+0xf8007020>
10007070:	0005883a 	mov	r2,zero
10007074:	003ff306 	br	10007044 <__alt_data_end+0xf8007044>
10007078:	01400044 	movi	r5,1
1000707c:	2c24983a 	sll	r18,r5,r16
10007080:	8809883a 	mov	r4,r17
10007084:	91800144 	addi	r6,r18,5
10007088:	318d883a 	add	r6,r6,r6
1000708c:	318d883a 	add	r6,r6,r6
10007090:	000a0880 	call	1000a088 <_calloc_r>
10007094:	103ff626 	beq	r2,zero,10007070 <__alt_data_end+0xf8007070>
10007098:	14000115 	stw	r16,4(r2)
1000709c:	14800215 	stw	r18,8(r2)
100070a0:	003fe606 	br	1000703c <__alt_data_end+0xf800703c>

100070a4 <_Bfree>:
100070a4:	28000826 	beq	r5,zero,100070c8 <_Bfree+0x24>
100070a8:	28c00117 	ldw	r3,4(r5)
100070ac:	20801317 	ldw	r2,76(r4)
100070b0:	18c7883a 	add	r3,r3,r3
100070b4:	18c7883a 	add	r3,r3,r3
100070b8:	10c5883a 	add	r2,r2,r3
100070bc:	10c00017 	ldw	r3,0(r2)
100070c0:	28c00015 	stw	r3,0(r5)
100070c4:	11400015 	stw	r5,0(r2)
100070c8:	f800283a 	ret

100070cc <__multadd>:
100070cc:	defff704 	addi	sp,sp,-36
100070d0:	dc800215 	stw	r18,8(sp)
100070d4:	2c800417 	ldw	r18,16(r5)
100070d8:	dd800615 	stw	r22,24(sp)
100070dc:	dd400515 	stw	r21,20(sp)
100070e0:	dd000415 	stw	r20,16(sp)
100070e4:	dcc00315 	stw	r19,12(sp)
100070e8:	dc400115 	stw	r17,4(sp)
100070ec:	dc000015 	stw	r16,0(sp)
100070f0:	dfc00815 	stw	ra,32(sp)
100070f4:	ddc00715 	stw	r23,28(sp)
100070f8:	2827883a 	mov	r19,r5
100070fc:	2029883a 	mov	r20,r4
10007100:	3023883a 	mov	r17,r6
10007104:	3821883a 	mov	r16,r7
10007108:	2d400504 	addi	r21,r5,20
1000710c:	002d883a 	mov	r22,zero
10007110:	adc00017 	ldw	r23,0(r21)
10007114:	880b883a 	mov	r5,r17
10007118:	ad400104 	addi	r21,r21,4
1000711c:	b93fffcc 	andi	r4,r23,65535
10007120:	00016040 	call	10001604 <__mulsi3>
10007124:	b808d43a 	srli	r4,r23,16
10007128:	880b883a 	mov	r5,r17
1000712c:	1421883a 	add	r16,r2,r16
10007130:	00016040 	call	10001604 <__mulsi3>
10007134:	800ed43a 	srli	r7,r16,16
10007138:	80ffffcc 	andi	r3,r16,65535
1000713c:	b5800044 	addi	r22,r22,1
10007140:	11c5883a 	add	r2,r2,r7
10007144:	100e943a 	slli	r7,r2,16
10007148:	1020d43a 	srli	r16,r2,16
1000714c:	38c7883a 	add	r3,r7,r3
10007150:	a8ffff15 	stw	r3,-4(r21)
10007154:	b4bfee16 	blt	r22,r18,10007110 <__alt_data_end+0xf8007110>
10007158:	80000926 	beq	r16,zero,10007180 <__multadd+0xb4>
1000715c:	98800217 	ldw	r2,8(r19)
10007160:	9080130e 	bge	r18,r2,100071b0 <__multadd+0xe4>
10007164:	90800144 	addi	r2,r18,5
10007168:	1085883a 	add	r2,r2,r2
1000716c:	1085883a 	add	r2,r2,r2
10007170:	9885883a 	add	r2,r19,r2
10007174:	14000015 	stw	r16,0(r2)
10007178:	94800044 	addi	r18,r18,1
1000717c:	9c800415 	stw	r18,16(r19)
10007180:	9805883a 	mov	r2,r19
10007184:	dfc00817 	ldw	ra,32(sp)
10007188:	ddc00717 	ldw	r23,28(sp)
1000718c:	dd800617 	ldw	r22,24(sp)
10007190:	dd400517 	ldw	r21,20(sp)
10007194:	dd000417 	ldw	r20,16(sp)
10007198:	dcc00317 	ldw	r19,12(sp)
1000719c:	dc800217 	ldw	r18,8(sp)
100071a0:	dc400117 	ldw	r17,4(sp)
100071a4:	dc000017 	ldw	r16,0(sp)
100071a8:	dec00904 	addi	sp,sp,36
100071ac:	f800283a 	ret
100071b0:	99400117 	ldw	r5,4(r19)
100071b4:	a009883a 	mov	r4,r20
100071b8:	29400044 	addi	r5,r5,1
100071bc:	0006ffc0 	call	10006ffc <_Balloc>
100071c0:	99800417 	ldw	r6,16(r19)
100071c4:	99400304 	addi	r5,r19,12
100071c8:	11000304 	addi	r4,r2,12
100071cc:	31800084 	addi	r6,r6,2
100071d0:	318d883a 	add	r6,r6,r6
100071d4:	318d883a 	add	r6,r6,r6
100071d8:	1023883a 	mov	r17,r2
100071dc:	00017240 	call	10001724 <memcpy>
100071e0:	98000a26 	beq	r19,zero,1000720c <__multadd+0x140>
100071e4:	98c00117 	ldw	r3,4(r19)
100071e8:	a0801317 	ldw	r2,76(r20)
100071ec:	18c7883a 	add	r3,r3,r3
100071f0:	18c7883a 	add	r3,r3,r3
100071f4:	10c5883a 	add	r2,r2,r3
100071f8:	10c00017 	ldw	r3,0(r2)
100071fc:	98c00015 	stw	r3,0(r19)
10007200:	14c00015 	stw	r19,0(r2)
10007204:	8827883a 	mov	r19,r17
10007208:	003fd606 	br	10007164 <__alt_data_end+0xf8007164>
1000720c:	8827883a 	mov	r19,r17
10007210:	003fd406 	br	10007164 <__alt_data_end+0xf8007164>

10007214 <__s2b>:
10007214:	defff904 	addi	sp,sp,-28
10007218:	dc400115 	stw	r17,4(sp)
1000721c:	dc000015 	stw	r16,0(sp)
10007220:	2023883a 	mov	r17,r4
10007224:	2821883a 	mov	r16,r5
10007228:	39000204 	addi	r4,r7,8
1000722c:	01400244 	movi	r5,9
10007230:	dcc00315 	stw	r19,12(sp)
10007234:	dc800215 	stw	r18,8(sp)
10007238:	dfc00615 	stw	ra,24(sp)
1000723c:	dd400515 	stw	r21,20(sp)
10007240:	dd000415 	stw	r20,16(sp)
10007244:	3825883a 	mov	r18,r7
10007248:	3027883a 	mov	r19,r6
1000724c:	000bf100 	call	1000bf10 <__divsi3>
10007250:	00c00044 	movi	r3,1
10007254:	000b883a 	mov	r5,zero
10007258:	1880030e 	bge	r3,r2,10007268 <__s2b+0x54>
1000725c:	18c7883a 	add	r3,r3,r3
10007260:	29400044 	addi	r5,r5,1
10007264:	18bffd16 	blt	r3,r2,1000725c <__alt_data_end+0xf800725c>
10007268:	8809883a 	mov	r4,r17
1000726c:	0006ffc0 	call	10006ffc <_Balloc>
10007270:	d8c00717 	ldw	r3,28(sp)
10007274:	10c00515 	stw	r3,20(r2)
10007278:	00c00044 	movi	r3,1
1000727c:	10c00415 	stw	r3,16(r2)
10007280:	00c00244 	movi	r3,9
10007284:	1cc0210e 	bge	r3,r19,1000730c <__s2b+0xf8>
10007288:	80eb883a 	add	r21,r16,r3
1000728c:	a829883a 	mov	r20,r21
10007290:	84e1883a 	add	r16,r16,r19
10007294:	a1c00007 	ldb	r7,0(r20)
10007298:	01800284 	movi	r6,10
1000729c:	a5000044 	addi	r20,r20,1
100072a0:	100b883a 	mov	r5,r2
100072a4:	39fff404 	addi	r7,r7,-48
100072a8:	8809883a 	mov	r4,r17
100072ac:	00070cc0 	call	100070cc <__multadd>
100072b0:	a43ff81e 	bne	r20,r16,10007294 <__alt_data_end+0xf8007294>
100072b4:	ace1883a 	add	r16,r21,r19
100072b8:	843ffe04 	addi	r16,r16,-8
100072bc:	9c800a0e 	bge	r19,r18,100072e8 <__s2b+0xd4>
100072c0:	94e5c83a 	sub	r18,r18,r19
100072c4:	84a5883a 	add	r18,r16,r18
100072c8:	81c00007 	ldb	r7,0(r16)
100072cc:	01800284 	movi	r6,10
100072d0:	84000044 	addi	r16,r16,1
100072d4:	100b883a 	mov	r5,r2
100072d8:	39fff404 	addi	r7,r7,-48
100072dc:	8809883a 	mov	r4,r17
100072e0:	00070cc0 	call	100070cc <__multadd>
100072e4:	84bff81e 	bne	r16,r18,100072c8 <__alt_data_end+0xf80072c8>
100072e8:	dfc00617 	ldw	ra,24(sp)
100072ec:	dd400517 	ldw	r21,20(sp)
100072f0:	dd000417 	ldw	r20,16(sp)
100072f4:	dcc00317 	ldw	r19,12(sp)
100072f8:	dc800217 	ldw	r18,8(sp)
100072fc:	dc400117 	ldw	r17,4(sp)
10007300:	dc000017 	ldw	r16,0(sp)
10007304:	dec00704 	addi	sp,sp,28
10007308:	f800283a 	ret
1000730c:	84000284 	addi	r16,r16,10
10007310:	1827883a 	mov	r19,r3
10007314:	003fe906 	br	100072bc <__alt_data_end+0xf80072bc>

10007318 <__hi0bits>:
10007318:	20bfffec 	andhi	r2,r4,65535
1000731c:	1000141e 	bne	r2,zero,10007370 <__hi0bits+0x58>
10007320:	2008943a 	slli	r4,r4,16
10007324:	00800404 	movi	r2,16
10007328:	20ffc02c 	andhi	r3,r4,65280
1000732c:	1800021e 	bne	r3,zero,10007338 <__hi0bits+0x20>
10007330:	2008923a 	slli	r4,r4,8
10007334:	10800204 	addi	r2,r2,8
10007338:	20fc002c 	andhi	r3,r4,61440
1000733c:	1800021e 	bne	r3,zero,10007348 <__hi0bits+0x30>
10007340:	2008913a 	slli	r4,r4,4
10007344:	10800104 	addi	r2,r2,4
10007348:	20f0002c 	andhi	r3,r4,49152
1000734c:	1800031e 	bne	r3,zero,1000735c <__hi0bits+0x44>
10007350:	2109883a 	add	r4,r4,r4
10007354:	10800084 	addi	r2,r2,2
10007358:	2109883a 	add	r4,r4,r4
1000735c:	20000316 	blt	r4,zero,1000736c <__hi0bits+0x54>
10007360:	2110002c 	andhi	r4,r4,16384
10007364:	2000041e 	bne	r4,zero,10007378 <__hi0bits+0x60>
10007368:	00800804 	movi	r2,32
1000736c:	f800283a 	ret
10007370:	0005883a 	mov	r2,zero
10007374:	003fec06 	br	10007328 <__alt_data_end+0xf8007328>
10007378:	10800044 	addi	r2,r2,1
1000737c:	f800283a 	ret

10007380 <__lo0bits>:
10007380:	20c00017 	ldw	r3,0(r4)
10007384:	188001cc 	andi	r2,r3,7
10007388:	10000826 	beq	r2,zero,100073ac <__lo0bits+0x2c>
1000738c:	1880004c 	andi	r2,r3,1
10007390:	1000211e 	bne	r2,zero,10007418 <__lo0bits+0x98>
10007394:	1880008c 	andi	r2,r3,2
10007398:	1000211e 	bne	r2,zero,10007420 <__lo0bits+0xa0>
1000739c:	1806d0ba 	srli	r3,r3,2
100073a0:	00800084 	movi	r2,2
100073a4:	20c00015 	stw	r3,0(r4)
100073a8:	f800283a 	ret
100073ac:	18bfffcc 	andi	r2,r3,65535
100073b0:	10001326 	beq	r2,zero,10007400 <__lo0bits+0x80>
100073b4:	0005883a 	mov	r2,zero
100073b8:	19403fcc 	andi	r5,r3,255
100073bc:	2800021e 	bne	r5,zero,100073c8 <__lo0bits+0x48>
100073c0:	1806d23a 	srli	r3,r3,8
100073c4:	10800204 	addi	r2,r2,8
100073c8:	194003cc 	andi	r5,r3,15
100073cc:	2800021e 	bne	r5,zero,100073d8 <__lo0bits+0x58>
100073d0:	1806d13a 	srli	r3,r3,4
100073d4:	10800104 	addi	r2,r2,4
100073d8:	194000cc 	andi	r5,r3,3
100073dc:	2800021e 	bne	r5,zero,100073e8 <__lo0bits+0x68>
100073e0:	1806d0ba 	srli	r3,r3,2
100073e4:	10800084 	addi	r2,r2,2
100073e8:	1940004c 	andi	r5,r3,1
100073ec:	2800081e 	bne	r5,zero,10007410 <__lo0bits+0x90>
100073f0:	1806d07a 	srli	r3,r3,1
100073f4:	1800051e 	bne	r3,zero,1000740c <__lo0bits+0x8c>
100073f8:	00800804 	movi	r2,32
100073fc:	f800283a 	ret
10007400:	1806d43a 	srli	r3,r3,16
10007404:	00800404 	movi	r2,16
10007408:	003feb06 	br	100073b8 <__alt_data_end+0xf80073b8>
1000740c:	10800044 	addi	r2,r2,1
10007410:	20c00015 	stw	r3,0(r4)
10007414:	f800283a 	ret
10007418:	0005883a 	mov	r2,zero
1000741c:	f800283a 	ret
10007420:	1806d07a 	srli	r3,r3,1
10007424:	00800044 	movi	r2,1
10007428:	20c00015 	stw	r3,0(r4)
1000742c:	f800283a 	ret

10007430 <__i2b>:
10007430:	defffd04 	addi	sp,sp,-12
10007434:	dc000015 	stw	r16,0(sp)
10007438:	04000044 	movi	r16,1
1000743c:	dc400115 	stw	r17,4(sp)
10007440:	2823883a 	mov	r17,r5
10007444:	800b883a 	mov	r5,r16
10007448:	dfc00215 	stw	ra,8(sp)
1000744c:	0006ffc0 	call	10006ffc <_Balloc>
10007450:	14400515 	stw	r17,20(r2)
10007454:	14000415 	stw	r16,16(r2)
10007458:	dfc00217 	ldw	ra,8(sp)
1000745c:	dc400117 	ldw	r17,4(sp)
10007460:	dc000017 	ldw	r16,0(sp)
10007464:	dec00304 	addi	sp,sp,12
10007468:	f800283a 	ret

1000746c <__multiply>:
1000746c:	deffef04 	addi	sp,sp,-68
10007470:	dc400815 	stw	r17,32(sp)
10007474:	dc000715 	stw	r16,28(sp)
10007478:	34400417 	ldw	r17,16(r6)
1000747c:	2c000417 	ldw	r16,16(r5)
10007480:	dd800d15 	stw	r22,52(sp)
10007484:	dc800915 	stw	r18,36(sp)
10007488:	dfc01015 	stw	ra,64(sp)
1000748c:	df000f15 	stw	fp,60(sp)
10007490:	ddc00e15 	stw	r23,56(sp)
10007494:	dd400c15 	stw	r21,48(sp)
10007498:	dd000b15 	stw	r20,44(sp)
1000749c:	dcc00a15 	stw	r19,40(sp)
100074a0:	2825883a 	mov	r18,r5
100074a4:	302d883a 	mov	r22,r6
100074a8:	8440050e 	bge	r16,r17,100074c0 <__multiply+0x54>
100074ac:	8007883a 	mov	r3,r16
100074b0:	3025883a 	mov	r18,r6
100074b4:	8821883a 	mov	r16,r17
100074b8:	282d883a 	mov	r22,r5
100074bc:	1823883a 	mov	r17,r3
100074c0:	90800217 	ldw	r2,8(r18)
100074c4:	8447883a 	add	r3,r16,r17
100074c8:	d8c00215 	stw	r3,8(sp)
100074cc:	91400117 	ldw	r5,4(r18)
100074d0:	10c0010e 	bge	r2,r3,100074d8 <__multiply+0x6c>
100074d4:	29400044 	addi	r5,r5,1
100074d8:	0006ffc0 	call	10006ffc <_Balloc>
100074dc:	d8c00217 	ldw	r3,8(sp)
100074e0:	d8800615 	stw	r2,24(sp)
100074e4:	18eb883a 	add	r21,r3,r3
100074e8:	ad6b883a 	add	r21,r21,r21
100074ec:	10c00504 	addi	r3,r2,20
100074f0:	1d6b883a 	add	r21,r3,r21
100074f4:	d8c00115 	stw	r3,4(sp)
100074f8:	dd400315 	stw	r21,12(sp)
100074fc:	1805883a 	mov	r2,r3
10007500:	1d40042e 	bgeu	r3,r21,10007514 <__multiply+0xa8>
10007504:	d8c00317 	ldw	r3,12(sp)
10007508:	10000015 	stw	zero,0(r2)
1000750c:	10800104 	addi	r2,r2,4
10007510:	10fffc36 	bltu	r2,r3,10007504 <__alt_data_end+0xf8007504>
10007514:	8c63883a 	add	r17,r17,r17
10007518:	b5800504 	addi	r22,r22,20
1000751c:	8c63883a 	add	r17,r17,r17
10007520:	94800504 	addi	r18,r18,20
10007524:	8421883a 	add	r16,r16,r16
10007528:	b463883a 	add	r17,r22,r17
1000752c:	8421883a 	add	r16,r16,r16
10007530:	dd800015 	stw	r22,0(sp)
10007534:	dc800415 	stw	r18,16(sp)
10007538:	dc400515 	stw	r17,20(sp)
1000753c:	9429883a 	add	r20,r18,r16
10007540:	b4404f2e 	bgeu	r22,r17,10007680 <__multiply+0x214>
10007544:	d8c00017 	ldw	r3,0(sp)
10007548:	1c800017 	ldw	r18,0(r3)
1000754c:	947fffcc 	andi	r17,r18,65535
10007550:	88001e26 	beq	r17,zero,100075cc <__multiply+0x160>
10007554:	dd800117 	ldw	r22,4(sp)
10007558:	dd400417 	ldw	r21,16(sp)
1000755c:	0027883a 	mov	r19,zero
10007560:	ac800017 	ldw	r18,0(r21)
10007564:	b4000017 	ldw	r16,0(r22)
10007568:	880b883a 	mov	r5,r17
1000756c:	913fffcc 	andi	r4,r18,65535
10007570:	00016040 	call	10001604 <__mulsi3>
10007574:	9008d43a 	srli	r4,r18,16
10007578:	84bfffcc 	andi	r18,r16,65535
1000757c:	1485883a 	add	r2,r2,r18
10007580:	14e5883a 	add	r18,r2,r19
10007584:	8020d43a 	srli	r16,r16,16
10007588:	9026d43a 	srli	r19,r18,16
1000758c:	880b883a 	mov	r5,r17
10007590:	00016040 	call	10001604 <__mulsi3>
10007594:	1405883a 	add	r2,r2,r16
10007598:	14e1883a 	add	r16,r2,r19
1000759c:	90ffffcc 	andi	r3,r18,65535
100075a0:	8024943a 	slli	r18,r16,16
100075a4:	ad400104 	addi	r21,r21,4
100075a8:	b005883a 	mov	r2,r22
100075ac:	90c6b03a 	or	r3,r18,r3
100075b0:	b0c00015 	stw	r3,0(r22)
100075b4:	8026d43a 	srli	r19,r16,16
100075b8:	b5800104 	addi	r22,r22,4
100075bc:	ad3fe836 	bltu	r21,r20,10007560 <__alt_data_end+0xf8007560>
100075c0:	d8c00017 	ldw	r3,0(sp)
100075c4:	14c00115 	stw	r19,4(r2)
100075c8:	1c800017 	ldw	r18,0(r3)
100075cc:	9024d43a 	srli	r18,r18,16
100075d0:	90002226 	beq	r18,zero,1000765c <__multiply+0x1f0>
100075d4:	d8c00117 	ldw	r3,4(sp)
100075d8:	dd800417 	ldw	r22,16(sp)
100075dc:	002f883a 	mov	r23,zero
100075e0:	1f000017 	ldw	fp,0(r3)
100075e4:	1823883a 	mov	r17,r3
100075e8:	182b883a 	mov	r21,r3
100075ec:	e021883a 	mov	r16,fp
100075f0:	00000106 	br	100075f8 <__multiply+0x18c>
100075f4:	982b883a 	mov	r21,r19
100075f8:	b100000b 	ldhu	r4,0(r22)
100075fc:	8020d43a 	srli	r16,r16,16
10007600:	900b883a 	mov	r5,r18
10007604:	00016040 	call	10001604 <__mulsi3>
10007608:	1405883a 	add	r2,r2,r16
1000760c:	15ef883a 	add	r23,r2,r23
10007610:	b804943a 	slli	r2,r23,16
10007614:	e0ffffcc 	andi	r3,fp,65535
10007618:	8c400104 	addi	r17,r17,4
1000761c:	10c6b03a 	or	r3,r2,r3
10007620:	88ffff15 	stw	r3,-4(r17)
10007624:	b5800104 	addi	r22,r22,4
10007628:	b13fff17 	ldw	r4,-4(r22)
1000762c:	acc00104 	addi	r19,r21,4
10007630:	900b883a 	mov	r5,r18
10007634:	2008d43a 	srli	r4,r4,16
10007638:	9c000017 	ldw	r16,0(r19)
1000763c:	00016040 	call	10001604 <__mulsi3>
10007640:	b806d43a 	srli	r3,r23,16
10007644:	813fffcc 	andi	r4,r16,65535
10007648:	1105883a 	add	r2,r2,r4
1000764c:	10f9883a 	add	fp,r2,r3
10007650:	e02ed43a 	srli	r23,fp,16
10007654:	b53fe736 	bltu	r22,r20,100075f4 <__alt_data_end+0xf80075f4>
10007658:	af000115 	stw	fp,4(r21)
1000765c:	d8c00017 	ldw	r3,0(sp)
10007660:	d9000517 	ldw	r4,20(sp)
10007664:	18c00104 	addi	r3,r3,4
10007668:	d8c00015 	stw	r3,0(sp)
1000766c:	d8c00117 	ldw	r3,4(sp)
10007670:	18c00104 	addi	r3,r3,4
10007674:	d8c00115 	stw	r3,4(sp)
10007678:	d8c00017 	ldw	r3,0(sp)
1000767c:	193fb136 	bltu	r3,r4,10007544 <__alt_data_end+0xf8007544>
10007680:	d8c00217 	ldw	r3,8(sp)
10007684:	00c00c0e 	bge	zero,r3,100076b8 <__multiply+0x24c>
10007688:	d8c00317 	ldw	r3,12(sp)
1000768c:	18bfff17 	ldw	r2,-4(r3)
10007690:	1d7fff04 	addi	r21,r3,-4
10007694:	10000326 	beq	r2,zero,100076a4 <__multiply+0x238>
10007698:	00000706 	br	100076b8 <__multiply+0x24c>
1000769c:	a8800017 	ldw	r2,0(r21)
100076a0:	1000051e 	bne	r2,zero,100076b8 <__multiply+0x24c>
100076a4:	d8c00217 	ldw	r3,8(sp)
100076a8:	ad7fff04 	addi	r21,r21,-4
100076ac:	18ffffc4 	addi	r3,r3,-1
100076b0:	d8c00215 	stw	r3,8(sp)
100076b4:	183ff91e 	bne	r3,zero,1000769c <__alt_data_end+0xf800769c>
100076b8:	d8c00617 	ldw	r3,24(sp)
100076bc:	d9000217 	ldw	r4,8(sp)
100076c0:	1805883a 	mov	r2,r3
100076c4:	19000415 	stw	r4,16(r3)
100076c8:	dfc01017 	ldw	ra,64(sp)
100076cc:	df000f17 	ldw	fp,60(sp)
100076d0:	ddc00e17 	ldw	r23,56(sp)
100076d4:	dd800d17 	ldw	r22,52(sp)
100076d8:	dd400c17 	ldw	r21,48(sp)
100076dc:	dd000b17 	ldw	r20,44(sp)
100076e0:	dcc00a17 	ldw	r19,40(sp)
100076e4:	dc800917 	ldw	r18,36(sp)
100076e8:	dc400817 	ldw	r17,32(sp)
100076ec:	dc000717 	ldw	r16,28(sp)
100076f0:	dec01104 	addi	sp,sp,68
100076f4:	f800283a 	ret

100076f8 <__pow5mult>:
100076f8:	defffa04 	addi	sp,sp,-24
100076fc:	dcc00315 	stw	r19,12(sp)
10007700:	dc000015 	stw	r16,0(sp)
10007704:	dfc00515 	stw	ra,20(sp)
10007708:	dd000415 	stw	r20,16(sp)
1000770c:	dc800215 	stw	r18,8(sp)
10007710:	dc400115 	stw	r17,4(sp)
10007714:	308000cc 	andi	r2,r6,3
10007718:	3021883a 	mov	r16,r6
1000771c:	2027883a 	mov	r19,r4
10007720:	10002f1e 	bne	r2,zero,100077e0 <__pow5mult+0xe8>
10007724:	2825883a 	mov	r18,r5
10007728:	8021d0ba 	srai	r16,r16,2
1000772c:	80001a26 	beq	r16,zero,10007798 <__pow5mult+0xa0>
10007730:	9c401217 	ldw	r17,72(r19)
10007734:	8800061e 	bne	r17,zero,10007750 <__pow5mult+0x58>
10007738:	00003406 	br	1000780c <__pow5mult+0x114>
1000773c:	8021d07a 	srai	r16,r16,1
10007740:	80001526 	beq	r16,zero,10007798 <__pow5mult+0xa0>
10007744:	88800017 	ldw	r2,0(r17)
10007748:	10001c26 	beq	r2,zero,100077bc <__pow5mult+0xc4>
1000774c:	1023883a 	mov	r17,r2
10007750:	8080004c 	andi	r2,r16,1
10007754:	103ff926 	beq	r2,zero,1000773c <__alt_data_end+0xf800773c>
10007758:	880d883a 	mov	r6,r17
1000775c:	900b883a 	mov	r5,r18
10007760:	9809883a 	mov	r4,r19
10007764:	000746c0 	call	1000746c <__multiply>
10007768:	90001b26 	beq	r18,zero,100077d8 <__pow5mult+0xe0>
1000776c:	91000117 	ldw	r4,4(r18)
10007770:	98c01317 	ldw	r3,76(r19)
10007774:	8021d07a 	srai	r16,r16,1
10007778:	2109883a 	add	r4,r4,r4
1000777c:	2109883a 	add	r4,r4,r4
10007780:	1907883a 	add	r3,r3,r4
10007784:	19000017 	ldw	r4,0(r3)
10007788:	91000015 	stw	r4,0(r18)
1000778c:	1c800015 	stw	r18,0(r3)
10007790:	1025883a 	mov	r18,r2
10007794:	803feb1e 	bne	r16,zero,10007744 <__alt_data_end+0xf8007744>
10007798:	9005883a 	mov	r2,r18
1000779c:	dfc00517 	ldw	ra,20(sp)
100077a0:	dd000417 	ldw	r20,16(sp)
100077a4:	dcc00317 	ldw	r19,12(sp)
100077a8:	dc800217 	ldw	r18,8(sp)
100077ac:	dc400117 	ldw	r17,4(sp)
100077b0:	dc000017 	ldw	r16,0(sp)
100077b4:	dec00604 	addi	sp,sp,24
100077b8:	f800283a 	ret
100077bc:	880d883a 	mov	r6,r17
100077c0:	880b883a 	mov	r5,r17
100077c4:	9809883a 	mov	r4,r19
100077c8:	000746c0 	call	1000746c <__multiply>
100077cc:	88800015 	stw	r2,0(r17)
100077d0:	10000015 	stw	zero,0(r2)
100077d4:	003fdd06 	br	1000774c <__alt_data_end+0xf800774c>
100077d8:	1025883a 	mov	r18,r2
100077dc:	003fd706 	br	1000773c <__alt_data_end+0xf800773c>
100077e0:	10bfffc4 	addi	r2,r2,-1
100077e4:	1085883a 	add	r2,r2,r2
100077e8:	00c40074 	movhi	r3,4097
100077ec:	18c67c04 	addi	r3,r3,6640
100077f0:	1085883a 	add	r2,r2,r2
100077f4:	1885883a 	add	r2,r3,r2
100077f8:	11800017 	ldw	r6,0(r2)
100077fc:	000f883a 	mov	r7,zero
10007800:	00070cc0 	call	100070cc <__multadd>
10007804:	1025883a 	mov	r18,r2
10007808:	003fc706 	br	10007728 <__alt_data_end+0xf8007728>
1000780c:	05000044 	movi	r20,1
10007810:	a00b883a 	mov	r5,r20
10007814:	9809883a 	mov	r4,r19
10007818:	0006ffc0 	call	10006ffc <_Balloc>
1000781c:	1023883a 	mov	r17,r2
10007820:	00809c44 	movi	r2,625
10007824:	88800515 	stw	r2,20(r17)
10007828:	8d000415 	stw	r20,16(r17)
1000782c:	9c401215 	stw	r17,72(r19)
10007830:	88000015 	stw	zero,0(r17)
10007834:	003fc606 	br	10007750 <__alt_data_end+0xf8007750>

10007838 <__lshift>:
10007838:	defff904 	addi	sp,sp,-28
1000783c:	dd400515 	stw	r21,20(sp)
10007840:	dcc00315 	stw	r19,12(sp)
10007844:	302bd17a 	srai	r21,r6,5
10007848:	2cc00417 	ldw	r19,16(r5)
1000784c:	28800217 	ldw	r2,8(r5)
10007850:	dd000415 	stw	r20,16(sp)
10007854:	ace7883a 	add	r19,r21,r19
10007858:	dc800215 	stw	r18,8(sp)
1000785c:	dc400115 	stw	r17,4(sp)
10007860:	dc000015 	stw	r16,0(sp)
10007864:	dfc00615 	stw	ra,24(sp)
10007868:	9c000044 	addi	r16,r19,1
1000786c:	2823883a 	mov	r17,r5
10007870:	3029883a 	mov	r20,r6
10007874:	2025883a 	mov	r18,r4
10007878:	29400117 	ldw	r5,4(r5)
1000787c:	1400030e 	bge	r2,r16,1000788c <__lshift+0x54>
10007880:	1085883a 	add	r2,r2,r2
10007884:	29400044 	addi	r5,r5,1
10007888:	143ffd16 	blt	r2,r16,10007880 <__alt_data_end+0xf8007880>
1000788c:	9009883a 	mov	r4,r18
10007890:	0006ffc0 	call	10006ffc <_Balloc>
10007894:	10c00504 	addi	r3,r2,20
10007898:	0540070e 	bge	zero,r21,100078b8 <__lshift+0x80>
1000789c:	ad6b883a 	add	r21,r21,r21
100078a0:	ad6b883a 	add	r21,r21,r21
100078a4:	1809883a 	mov	r4,r3
100078a8:	1d47883a 	add	r3,r3,r21
100078ac:	20000015 	stw	zero,0(r4)
100078b0:	21000104 	addi	r4,r4,4
100078b4:	193ffd1e 	bne	r3,r4,100078ac <__alt_data_end+0xf80078ac>
100078b8:	8a000417 	ldw	r8,16(r17)
100078bc:	89000504 	addi	r4,r17,20
100078c0:	a18007cc 	andi	r6,r20,31
100078c4:	4211883a 	add	r8,r8,r8
100078c8:	4211883a 	add	r8,r8,r8
100078cc:	2211883a 	add	r8,r4,r8
100078d0:	30002326 	beq	r6,zero,10007960 <__lshift+0x128>
100078d4:	02400804 	movi	r9,32
100078d8:	4993c83a 	sub	r9,r9,r6
100078dc:	000b883a 	mov	r5,zero
100078e0:	21c00017 	ldw	r7,0(r4)
100078e4:	1815883a 	mov	r10,r3
100078e8:	18c00104 	addi	r3,r3,4
100078ec:	398e983a 	sll	r7,r7,r6
100078f0:	21000104 	addi	r4,r4,4
100078f4:	394ab03a 	or	r5,r7,r5
100078f8:	197fff15 	stw	r5,-4(r3)
100078fc:	217fff17 	ldw	r5,-4(r4)
10007900:	2a4ad83a 	srl	r5,r5,r9
10007904:	223ff636 	bltu	r4,r8,100078e0 <__alt_data_end+0xf80078e0>
10007908:	51400115 	stw	r5,4(r10)
1000790c:	28001a1e 	bne	r5,zero,10007978 <__lshift+0x140>
10007910:	843fffc4 	addi	r16,r16,-1
10007914:	14000415 	stw	r16,16(r2)
10007918:	88000826 	beq	r17,zero,1000793c <__lshift+0x104>
1000791c:	89000117 	ldw	r4,4(r17)
10007920:	90c01317 	ldw	r3,76(r18)
10007924:	2109883a 	add	r4,r4,r4
10007928:	2109883a 	add	r4,r4,r4
1000792c:	1907883a 	add	r3,r3,r4
10007930:	19000017 	ldw	r4,0(r3)
10007934:	89000015 	stw	r4,0(r17)
10007938:	1c400015 	stw	r17,0(r3)
1000793c:	dfc00617 	ldw	ra,24(sp)
10007940:	dd400517 	ldw	r21,20(sp)
10007944:	dd000417 	ldw	r20,16(sp)
10007948:	dcc00317 	ldw	r19,12(sp)
1000794c:	dc800217 	ldw	r18,8(sp)
10007950:	dc400117 	ldw	r17,4(sp)
10007954:	dc000017 	ldw	r16,0(sp)
10007958:	dec00704 	addi	sp,sp,28
1000795c:	f800283a 	ret
10007960:	21400017 	ldw	r5,0(r4)
10007964:	18c00104 	addi	r3,r3,4
10007968:	21000104 	addi	r4,r4,4
1000796c:	197fff15 	stw	r5,-4(r3)
10007970:	223ffb36 	bltu	r4,r8,10007960 <__alt_data_end+0xf8007960>
10007974:	003fe606 	br	10007910 <__alt_data_end+0xf8007910>
10007978:	9c000084 	addi	r16,r19,2
1000797c:	003fe406 	br	10007910 <__alt_data_end+0xf8007910>

10007980 <__mcmp>:
10007980:	20800417 	ldw	r2,16(r4)
10007984:	28c00417 	ldw	r3,16(r5)
10007988:	10c5c83a 	sub	r2,r2,r3
1000798c:	1000111e 	bne	r2,zero,100079d4 <__mcmp+0x54>
10007990:	18c7883a 	add	r3,r3,r3
10007994:	18c7883a 	add	r3,r3,r3
10007998:	21000504 	addi	r4,r4,20
1000799c:	29400504 	addi	r5,r5,20
100079a0:	20c5883a 	add	r2,r4,r3
100079a4:	28cb883a 	add	r5,r5,r3
100079a8:	00000106 	br	100079b0 <__mcmp+0x30>
100079ac:	20800a2e 	bgeu	r4,r2,100079d8 <__mcmp+0x58>
100079b0:	10bfff04 	addi	r2,r2,-4
100079b4:	297fff04 	addi	r5,r5,-4
100079b8:	11800017 	ldw	r6,0(r2)
100079bc:	28c00017 	ldw	r3,0(r5)
100079c0:	30fffa26 	beq	r6,r3,100079ac <__alt_data_end+0xf80079ac>
100079c4:	30c00236 	bltu	r6,r3,100079d0 <__mcmp+0x50>
100079c8:	00800044 	movi	r2,1
100079cc:	f800283a 	ret
100079d0:	00bfffc4 	movi	r2,-1
100079d4:	f800283a 	ret
100079d8:	0005883a 	mov	r2,zero
100079dc:	f800283a 	ret

100079e0 <__mdiff>:
100079e0:	28c00417 	ldw	r3,16(r5)
100079e4:	30800417 	ldw	r2,16(r6)
100079e8:	defffa04 	addi	sp,sp,-24
100079ec:	dcc00315 	stw	r19,12(sp)
100079f0:	dc800215 	stw	r18,8(sp)
100079f4:	dfc00515 	stw	ra,20(sp)
100079f8:	dd000415 	stw	r20,16(sp)
100079fc:	dc400115 	stw	r17,4(sp)
10007a00:	dc000015 	stw	r16,0(sp)
10007a04:	1887c83a 	sub	r3,r3,r2
10007a08:	2825883a 	mov	r18,r5
10007a0c:	3027883a 	mov	r19,r6
10007a10:	1800141e 	bne	r3,zero,10007a64 <__mdiff+0x84>
10007a14:	1085883a 	add	r2,r2,r2
10007a18:	1085883a 	add	r2,r2,r2
10007a1c:	2a000504 	addi	r8,r5,20
10007a20:	34000504 	addi	r16,r6,20
10007a24:	4087883a 	add	r3,r8,r2
10007a28:	8085883a 	add	r2,r16,r2
10007a2c:	00000106 	br	10007a34 <__mdiff+0x54>
10007a30:	40c0592e 	bgeu	r8,r3,10007b98 <__mdiff+0x1b8>
10007a34:	18ffff04 	addi	r3,r3,-4
10007a38:	10bfff04 	addi	r2,r2,-4
10007a3c:	19c00017 	ldw	r7,0(r3)
10007a40:	11400017 	ldw	r5,0(r2)
10007a44:	397ffa26 	beq	r7,r5,10007a30 <__alt_data_end+0xf8007a30>
10007a48:	3940592e 	bgeu	r7,r5,10007bb0 <__mdiff+0x1d0>
10007a4c:	9005883a 	mov	r2,r18
10007a50:	4023883a 	mov	r17,r8
10007a54:	9825883a 	mov	r18,r19
10007a58:	05000044 	movi	r20,1
10007a5c:	1027883a 	mov	r19,r2
10007a60:	00000406 	br	10007a74 <__mdiff+0x94>
10007a64:	18005616 	blt	r3,zero,10007bc0 <__mdiff+0x1e0>
10007a68:	34400504 	addi	r17,r6,20
10007a6c:	2c000504 	addi	r16,r5,20
10007a70:	0029883a 	mov	r20,zero
10007a74:	91400117 	ldw	r5,4(r18)
10007a78:	0006ffc0 	call	10006ffc <_Balloc>
10007a7c:	92400417 	ldw	r9,16(r18)
10007a80:	9b000417 	ldw	r12,16(r19)
10007a84:	12c00504 	addi	r11,r2,20
10007a88:	4a51883a 	add	r8,r9,r9
10007a8c:	6319883a 	add	r12,r12,r12
10007a90:	4211883a 	add	r8,r8,r8
10007a94:	6319883a 	add	r12,r12,r12
10007a98:	15000315 	stw	r20,12(r2)
10007a9c:	8211883a 	add	r8,r16,r8
10007aa0:	8b19883a 	add	r12,r17,r12
10007aa4:	0007883a 	mov	r3,zero
10007aa8:	81400017 	ldw	r5,0(r16)
10007aac:	89c00017 	ldw	r7,0(r17)
10007ab0:	59800104 	addi	r6,r11,4
10007ab4:	293fffcc 	andi	r4,r5,65535
10007ab8:	20c7883a 	add	r3,r4,r3
10007abc:	393fffcc 	andi	r4,r7,65535
10007ac0:	1909c83a 	sub	r4,r3,r4
10007ac4:	280ad43a 	srli	r5,r5,16
10007ac8:	380ed43a 	srli	r7,r7,16
10007acc:	2007d43a 	srai	r3,r4,16
10007ad0:	213fffcc 	andi	r4,r4,65535
10007ad4:	29cbc83a 	sub	r5,r5,r7
10007ad8:	28c7883a 	add	r3,r5,r3
10007adc:	180a943a 	slli	r5,r3,16
10007ae0:	8c400104 	addi	r17,r17,4
10007ae4:	84000104 	addi	r16,r16,4
10007ae8:	2908b03a 	or	r4,r5,r4
10007aec:	59000015 	stw	r4,0(r11)
10007af0:	1807d43a 	srai	r3,r3,16
10007af4:	3015883a 	mov	r10,r6
10007af8:	3017883a 	mov	r11,r6
10007afc:	8b3fea36 	bltu	r17,r12,10007aa8 <__alt_data_end+0xf8007aa8>
10007b00:	8200162e 	bgeu	r16,r8,10007b5c <__mdiff+0x17c>
10007b04:	8017883a 	mov	r11,r16
10007b08:	59400017 	ldw	r5,0(r11)
10007b0c:	31800104 	addi	r6,r6,4
10007b10:	5ac00104 	addi	r11,r11,4
10007b14:	293fffcc 	andi	r4,r5,65535
10007b18:	20c7883a 	add	r3,r4,r3
10007b1c:	280ed43a 	srli	r7,r5,16
10007b20:	180bd43a 	srai	r5,r3,16
10007b24:	193fffcc 	andi	r4,r3,65535
10007b28:	3947883a 	add	r3,r7,r5
10007b2c:	180a943a 	slli	r5,r3,16
10007b30:	1807d43a 	srai	r3,r3,16
10007b34:	2908b03a 	or	r4,r5,r4
10007b38:	313fff15 	stw	r4,-4(r6)
10007b3c:	5a3ff236 	bltu	r11,r8,10007b08 <__alt_data_end+0xf8007b08>
10007b40:	0406303a 	nor	r3,zero,r16
10007b44:	1a07883a 	add	r3,r3,r8
10007b48:	1806d0ba 	srli	r3,r3,2
10007b4c:	18c00044 	addi	r3,r3,1
10007b50:	18c7883a 	add	r3,r3,r3
10007b54:	18c7883a 	add	r3,r3,r3
10007b58:	50d5883a 	add	r10,r10,r3
10007b5c:	50ffff04 	addi	r3,r10,-4
10007b60:	2000041e 	bne	r4,zero,10007b74 <__mdiff+0x194>
10007b64:	18ffff04 	addi	r3,r3,-4
10007b68:	19000017 	ldw	r4,0(r3)
10007b6c:	4a7fffc4 	addi	r9,r9,-1
10007b70:	203ffc26 	beq	r4,zero,10007b64 <__alt_data_end+0xf8007b64>
10007b74:	12400415 	stw	r9,16(r2)
10007b78:	dfc00517 	ldw	ra,20(sp)
10007b7c:	dd000417 	ldw	r20,16(sp)
10007b80:	dcc00317 	ldw	r19,12(sp)
10007b84:	dc800217 	ldw	r18,8(sp)
10007b88:	dc400117 	ldw	r17,4(sp)
10007b8c:	dc000017 	ldw	r16,0(sp)
10007b90:	dec00604 	addi	sp,sp,24
10007b94:	f800283a 	ret
10007b98:	000b883a 	mov	r5,zero
10007b9c:	0006ffc0 	call	10006ffc <_Balloc>
10007ba0:	00c00044 	movi	r3,1
10007ba4:	10c00415 	stw	r3,16(r2)
10007ba8:	10000515 	stw	zero,20(r2)
10007bac:	003ff206 	br	10007b78 <__alt_data_end+0xf8007b78>
10007bb0:	8023883a 	mov	r17,r16
10007bb4:	0029883a 	mov	r20,zero
10007bb8:	4021883a 	mov	r16,r8
10007bbc:	003fad06 	br	10007a74 <__alt_data_end+0xf8007a74>
10007bc0:	9005883a 	mov	r2,r18
10007bc4:	94400504 	addi	r17,r18,20
10007bc8:	9c000504 	addi	r16,r19,20
10007bcc:	9825883a 	mov	r18,r19
10007bd0:	05000044 	movi	r20,1
10007bd4:	1027883a 	mov	r19,r2
10007bd8:	003fa606 	br	10007a74 <__alt_data_end+0xf8007a74>

10007bdc <__ulp>:
10007bdc:	295ffc2c 	andhi	r5,r5,32752
10007be0:	00bf3034 	movhi	r2,64704
10007be4:	2887883a 	add	r3,r5,r2
10007be8:	00c0020e 	bge	zero,r3,10007bf4 <__ulp+0x18>
10007bec:	0005883a 	mov	r2,zero
10007bf0:	f800283a 	ret
10007bf4:	00c7c83a 	sub	r3,zero,r3
10007bf8:	1807d53a 	srai	r3,r3,20
10007bfc:	008004c4 	movi	r2,19
10007c00:	10c00b0e 	bge	r2,r3,10007c30 <__ulp+0x54>
10007c04:	18bffb04 	addi	r2,r3,-20
10007c08:	01000784 	movi	r4,30
10007c0c:	0007883a 	mov	r3,zero
10007c10:	20800516 	blt	r4,r2,10007c28 <__ulp+0x4c>
10007c14:	010007c4 	movi	r4,31
10007c18:	2089c83a 	sub	r4,r4,r2
10007c1c:	00800044 	movi	r2,1
10007c20:	1104983a 	sll	r2,r2,r4
10007c24:	f800283a 	ret
10007c28:	00800044 	movi	r2,1
10007c2c:	f800283a 	ret
10007c30:	01400234 	movhi	r5,8
10007c34:	28c7d83a 	sra	r3,r5,r3
10007c38:	0005883a 	mov	r2,zero
10007c3c:	f800283a 	ret

10007c40 <__b2d>:
10007c40:	defffa04 	addi	sp,sp,-24
10007c44:	dc000015 	stw	r16,0(sp)
10007c48:	24000417 	ldw	r16,16(r4)
10007c4c:	dc400115 	stw	r17,4(sp)
10007c50:	24400504 	addi	r17,r4,20
10007c54:	8421883a 	add	r16,r16,r16
10007c58:	8421883a 	add	r16,r16,r16
10007c5c:	8c21883a 	add	r16,r17,r16
10007c60:	dc800215 	stw	r18,8(sp)
10007c64:	84bfff17 	ldw	r18,-4(r16)
10007c68:	dd000415 	stw	r20,16(sp)
10007c6c:	dcc00315 	stw	r19,12(sp)
10007c70:	9009883a 	mov	r4,r18
10007c74:	2829883a 	mov	r20,r5
10007c78:	dfc00515 	stw	ra,20(sp)
10007c7c:	00073180 	call	10007318 <__hi0bits>
10007c80:	00c00804 	movi	r3,32
10007c84:	1889c83a 	sub	r4,r3,r2
10007c88:	a1000015 	stw	r4,0(r20)
10007c8c:	01000284 	movi	r4,10
10007c90:	84ffff04 	addi	r19,r16,-4
10007c94:	20801216 	blt	r4,r2,10007ce0 <__b2d+0xa0>
10007c98:	018002c4 	movi	r6,11
10007c9c:	308dc83a 	sub	r6,r6,r2
10007ca0:	9186d83a 	srl	r3,r18,r6
10007ca4:	18cffc34 	orhi	r3,r3,16368
10007ca8:	8cc0212e 	bgeu	r17,r19,10007d30 <__b2d+0xf0>
10007cac:	813ffe17 	ldw	r4,-8(r16)
10007cb0:	218cd83a 	srl	r6,r4,r6
10007cb4:	10800544 	addi	r2,r2,21
10007cb8:	9084983a 	sll	r2,r18,r2
10007cbc:	1184b03a 	or	r2,r2,r6
10007cc0:	dfc00517 	ldw	ra,20(sp)
10007cc4:	dd000417 	ldw	r20,16(sp)
10007cc8:	dcc00317 	ldw	r19,12(sp)
10007ccc:	dc800217 	ldw	r18,8(sp)
10007cd0:	dc400117 	ldw	r17,4(sp)
10007cd4:	dc000017 	ldw	r16,0(sp)
10007cd8:	dec00604 	addi	sp,sp,24
10007cdc:	f800283a 	ret
10007ce0:	8cc00f2e 	bgeu	r17,r19,10007d20 <__b2d+0xe0>
10007ce4:	117ffd44 	addi	r5,r2,-11
10007ce8:	80bffe17 	ldw	r2,-8(r16)
10007cec:	28000e26 	beq	r5,zero,10007d28 <__b2d+0xe8>
10007cf0:	1949c83a 	sub	r4,r3,r5
10007cf4:	9164983a 	sll	r18,r18,r5
10007cf8:	1106d83a 	srl	r3,r2,r4
10007cfc:	81bffe04 	addi	r6,r16,-8
10007d00:	948ffc34 	orhi	r18,r18,16368
10007d04:	90c6b03a 	or	r3,r18,r3
10007d08:	89800e2e 	bgeu	r17,r6,10007d44 <__b2d+0x104>
10007d0c:	81bffd17 	ldw	r6,-12(r16)
10007d10:	1144983a 	sll	r2,r2,r5
10007d14:	310ad83a 	srl	r5,r6,r4
10007d18:	2884b03a 	or	r2,r5,r2
10007d1c:	003fe806 	br	10007cc0 <__alt_data_end+0xf8007cc0>
10007d20:	10bffd44 	addi	r2,r2,-11
10007d24:	1000041e 	bne	r2,zero,10007d38 <__b2d+0xf8>
10007d28:	90cffc34 	orhi	r3,r18,16368
10007d2c:	003fe406 	br	10007cc0 <__alt_data_end+0xf8007cc0>
10007d30:	000d883a 	mov	r6,zero
10007d34:	003fdf06 	br	10007cb4 <__alt_data_end+0xf8007cb4>
10007d38:	90a4983a 	sll	r18,r18,r2
10007d3c:	0005883a 	mov	r2,zero
10007d40:	003ff906 	br	10007d28 <__alt_data_end+0xf8007d28>
10007d44:	1144983a 	sll	r2,r2,r5
10007d48:	003fdd06 	br	10007cc0 <__alt_data_end+0xf8007cc0>

10007d4c <__d2b>:
10007d4c:	defff804 	addi	sp,sp,-32
10007d50:	dc000215 	stw	r16,8(sp)
10007d54:	3021883a 	mov	r16,r6
10007d58:	dc400315 	stw	r17,12(sp)
10007d5c:	8022907a 	slli	r17,r16,1
10007d60:	dd000615 	stw	r20,24(sp)
10007d64:	2829883a 	mov	r20,r5
10007d68:	01400044 	movi	r5,1
10007d6c:	dcc00515 	stw	r19,20(sp)
10007d70:	dc800415 	stw	r18,16(sp)
10007d74:	dfc00715 	stw	ra,28(sp)
10007d78:	3825883a 	mov	r18,r7
10007d7c:	8822d57a 	srli	r17,r17,21
10007d80:	0006ffc0 	call	10006ffc <_Balloc>
10007d84:	1027883a 	mov	r19,r2
10007d88:	00800434 	movhi	r2,16
10007d8c:	10bfffc4 	addi	r2,r2,-1
10007d90:	808c703a 	and	r6,r16,r2
10007d94:	88000126 	beq	r17,zero,10007d9c <__d2b+0x50>
10007d98:	31800434 	orhi	r6,r6,16
10007d9c:	d9800015 	stw	r6,0(sp)
10007da0:	a0002426 	beq	r20,zero,10007e34 <__d2b+0xe8>
10007da4:	d9000104 	addi	r4,sp,4
10007da8:	dd000115 	stw	r20,4(sp)
10007dac:	00073800 	call	10007380 <__lo0bits>
10007db0:	d8c00017 	ldw	r3,0(sp)
10007db4:	10002f1e 	bne	r2,zero,10007e74 <__d2b+0x128>
10007db8:	d9000117 	ldw	r4,4(sp)
10007dbc:	99000515 	stw	r4,20(r19)
10007dc0:	1821003a 	cmpeq	r16,r3,zero
10007dc4:	01000084 	movi	r4,2
10007dc8:	2421c83a 	sub	r16,r4,r16
10007dcc:	98c00615 	stw	r3,24(r19)
10007dd0:	9c000415 	stw	r16,16(r19)
10007dd4:	88001f1e 	bne	r17,zero,10007e54 <__d2b+0x108>
10007dd8:	10bef384 	addi	r2,r2,-1074
10007ddc:	90800015 	stw	r2,0(r18)
10007de0:	00900034 	movhi	r2,16384
10007de4:	10bfffc4 	addi	r2,r2,-1
10007de8:	8085883a 	add	r2,r16,r2
10007dec:	1085883a 	add	r2,r2,r2
10007df0:	1085883a 	add	r2,r2,r2
10007df4:	9885883a 	add	r2,r19,r2
10007df8:	11000517 	ldw	r4,20(r2)
10007dfc:	8020917a 	slli	r16,r16,5
10007e00:	00073180 	call	10007318 <__hi0bits>
10007e04:	d8c00817 	ldw	r3,32(sp)
10007e08:	8085c83a 	sub	r2,r16,r2
10007e0c:	18800015 	stw	r2,0(r3)
10007e10:	9805883a 	mov	r2,r19
10007e14:	dfc00717 	ldw	ra,28(sp)
10007e18:	dd000617 	ldw	r20,24(sp)
10007e1c:	dcc00517 	ldw	r19,20(sp)
10007e20:	dc800417 	ldw	r18,16(sp)
10007e24:	dc400317 	ldw	r17,12(sp)
10007e28:	dc000217 	ldw	r16,8(sp)
10007e2c:	dec00804 	addi	sp,sp,32
10007e30:	f800283a 	ret
10007e34:	d809883a 	mov	r4,sp
10007e38:	00073800 	call	10007380 <__lo0bits>
10007e3c:	d8c00017 	ldw	r3,0(sp)
10007e40:	04000044 	movi	r16,1
10007e44:	9c000415 	stw	r16,16(r19)
10007e48:	98c00515 	stw	r3,20(r19)
10007e4c:	10800804 	addi	r2,r2,32
10007e50:	883fe126 	beq	r17,zero,10007dd8 <__alt_data_end+0xf8007dd8>
10007e54:	00c00d44 	movi	r3,53
10007e58:	8c7ef344 	addi	r17,r17,-1075
10007e5c:	88a3883a 	add	r17,r17,r2
10007e60:	1885c83a 	sub	r2,r3,r2
10007e64:	d8c00817 	ldw	r3,32(sp)
10007e68:	94400015 	stw	r17,0(r18)
10007e6c:	18800015 	stw	r2,0(r3)
10007e70:	003fe706 	br	10007e10 <__alt_data_end+0xf8007e10>
10007e74:	01000804 	movi	r4,32
10007e78:	2089c83a 	sub	r4,r4,r2
10007e7c:	1908983a 	sll	r4,r3,r4
10007e80:	d9400117 	ldw	r5,4(sp)
10007e84:	1886d83a 	srl	r3,r3,r2
10007e88:	2148b03a 	or	r4,r4,r5
10007e8c:	99000515 	stw	r4,20(r19)
10007e90:	d8c00015 	stw	r3,0(sp)
10007e94:	003fca06 	br	10007dc0 <__alt_data_end+0xf8007dc0>

10007e98 <__ratio>:
10007e98:	defff904 	addi	sp,sp,-28
10007e9c:	dc400315 	stw	r17,12(sp)
10007ea0:	2823883a 	mov	r17,r5
10007ea4:	d9400104 	addi	r5,sp,4
10007ea8:	dfc00615 	stw	ra,24(sp)
10007eac:	dcc00515 	stw	r19,20(sp)
10007eb0:	dc800415 	stw	r18,16(sp)
10007eb4:	2027883a 	mov	r19,r4
10007eb8:	dc000215 	stw	r16,8(sp)
10007ebc:	0007c400 	call	10007c40 <__b2d>
10007ec0:	d80b883a 	mov	r5,sp
10007ec4:	8809883a 	mov	r4,r17
10007ec8:	1025883a 	mov	r18,r2
10007ecc:	1821883a 	mov	r16,r3
10007ed0:	0007c400 	call	10007c40 <__b2d>
10007ed4:	8a000417 	ldw	r8,16(r17)
10007ed8:	99000417 	ldw	r4,16(r19)
10007edc:	d9400117 	ldw	r5,4(sp)
10007ee0:	2209c83a 	sub	r4,r4,r8
10007ee4:	2010917a 	slli	r8,r4,5
10007ee8:	d9000017 	ldw	r4,0(sp)
10007eec:	2909c83a 	sub	r4,r5,r4
10007ef0:	4109883a 	add	r4,r8,r4
10007ef4:	01000e0e 	bge	zero,r4,10007f30 <__ratio+0x98>
10007ef8:	2008953a 	slli	r4,r4,20
10007efc:	2421883a 	add	r16,r4,r16
10007f00:	100d883a 	mov	r6,r2
10007f04:	180f883a 	mov	r7,r3
10007f08:	9009883a 	mov	r4,r18
10007f0c:	800b883a 	mov	r5,r16
10007f10:	000c9700 	call	1000c970 <__divdf3>
10007f14:	dfc00617 	ldw	ra,24(sp)
10007f18:	dcc00517 	ldw	r19,20(sp)
10007f1c:	dc800417 	ldw	r18,16(sp)
10007f20:	dc400317 	ldw	r17,12(sp)
10007f24:	dc000217 	ldw	r16,8(sp)
10007f28:	dec00704 	addi	sp,sp,28
10007f2c:	f800283a 	ret
10007f30:	2008953a 	slli	r4,r4,20
10007f34:	1907c83a 	sub	r3,r3,r4
10007f38:	003ff106 	br	10007f00 <__alt_data_end+0xf8007f00>

10007f3c <_mprec_log10>:
10007f3c:	defffe04 	addi	sp,sp,-8
10007f40:	dc000015 	stw	r16,0(sp)
10007f44:	dfc00115 	stw	ra,4(sp)
10007f48:	008005c4 	movi	r2,23
10007f4c:	2021883a 	mov	r16,r4
10007f50:	11000d0e 	bge	r2,r4,10007f88 <_mprec_log10+0x4c>
10007f54:	0005883a 	mov	r2,zero
10007f58:	00cffc34 	movhi	r3,16368
10007f5c:	843fffc4 	addi	r16,r16,-1
10007f60:	000d883a 	mov	r6,zero
10007f64:	01d00934 	movhi	r7,16420
10007f68:	1009883a 	mov	r4,r2
10007f6c:	180b883a 	mov	r5,r3
10007f70:	000d5980 	call	1000d598 <__muldf3>
10007f74:	803ff91e 	bne	r16,zero,10007f5c <__alt_data_end+0xf8007f5c>
10007f78:	dfc00117 	ldw	ra,4(sp)
10007f7c:	dc000017 	ldw	r16,0(sp)
10007f80:	dec00204 	addi	sp,sp,8
10007f84:	f800283a 	ret
10007f88:	202090fa 	slli	r16,r4,3
10007f8c:	00840074 	movhi	r2,4097
10007f90:	10869304 	addi	r2,r2,6732
10007f94:	1421883a 	add	r16,r2,r16
10007f98:	80800017 	ldw	r2,0(r16)
10007f9c:	80c00117 	ldw	r3,4(r16)
10007fa0:	dfc00117 	ldw	ra,4(sp)
10007fa4:	dc000017 	ldw	r16,0(sp)
10007fa8:	dec00204 	addi	sp,sp,8
10007fac:	f800283a 	ret

10007fb0 <__copybits>:
10007fb0:	297fffc4 	addi	r5,r5,-1
10007fb4:	280fd17a 	srai	r7,r5,5
10007fb8:	30c00417 	ldw	r3,16(r6)
10007fbc:	30800504 	addi	r2,r6,20
10007fc0:	39c00044 	addi	r7,r7,1
10007fc4:	18c7883a 	add	r3,r3,r3
10007fc8:	39cf883a 	add	r7,r7,r7
10007fcc:	18c7883a 	add	r3,r3,r3
10007fd0:	39cf883a 	add	r7,r7,r7
10007fd4:	10c7883a 	add	r3,r2,r3
10007fd8:	21cf883a 	add	r7,r4,r7
10007fdc:	10c00d2e 	bgeu	r2,r3,10008014 <__copybits+0x64>
10007fe0:	200b883a 	mov	r5,r4
10007fe4:	12000017 	ldw	r8,0(r2)
10007fe8:	29400104 	addi	r5,r5,4
10007fec:	10800104 	addi	r2,r2,4
10007ff0:	2a3fff15 	stw	r8,-4(r5)
10007ff4:	10fffb36 	bltu	r2,r3,10007fe4 <__alt_data_end+0xf8007fe4>
10007ff8:	1985c83a 	sub	r2,r3,r6
10007ffc:	10bffac4 	addi	r2,r2,-21
10008000:	1004d0ba 	srli	r2,r2,2
10008004:	10800044 	addi	r2,r2,1
10008008:	1085883a 	add	r2,r2,r2
1000800c:	1085883a 	add	r2,r2,r2
10008010:	2089883a 	add	r4,r4,r2
10008014:	21c0032e 	bgeu	r4,r7,10008024 <__copybits+0x74>
10008018:	20000015 	stw	zero,0(r4)
1000801c:	21000104 	addi	r4,r4,4
10008020:	21fffd36 	bltu	r4,r7,10008018 <__alt_data_end+0xf8008018>
10008024:	f800283a 	ret

10008028 <__any_on>:
10008028:	20c00417 	ldw	r3,16(r4)
1000802c:	2805d17a 	srai	r2,r5,5
10008030:	21000504 	addi	r4,r4,20
10008034:	18800d0e 	bge	r3,r2,1000806c <__any_on+0x44>
10008038:	18c7883a 	add	r3,r3,r3
1000803c:	18c7883a 	add	r3,r3,r3
10008040:	20c7883a 	add	r3,r4,r3
10008044:	20c0192e 	bgeu	r4,r3,100080ac <__any_on+0x84>
10008048:	18bfff17 	ldw	r2,-4(r3)
1000804c:	18ffff04 	addi	r3,r3,-4
10008050:	1000041e 	bne	r2,zero,10008064 <__any_on+0x3c>
10008054:	20c0142e 	bgeu	r4,r3,100080a8 <__any_on+0x80>
10008058:	18ffff04 	addi	r3,r3,-4
1000805c:	19400017 	ldw	r5,0(r3)
10008060:	283ffc26 	beq	r5,zero,10008054 <__alt_data_end+0xf8008054>
10008064:	00800044 	movi	r2,1
10008068:	f800283a 	ret
1000806c:	10c00a0e 	bge	r2,r3,10008098 <__any_on+0x70>
10008070:	1085883a 	add	r2,r2,r2
10008074:	1085883a 	add	r2,r2,r2
10008078:	294007cc 	andi	r5,r5,31
1000807c:	2087883a 	add	r3,r4,r2
10008080:	283ff026 	beq	r5,zero,10008044 <__alt_data_end+0xf8008044>
10008084:	19800017 	ldw	r6,0(r3)
10008088:	3144d83a 	srl	r2,r6,r5
1000808c:	114a983a 	sll	r5,r2,r5
10008090:	317ff41e 	bne	r6,r5,10008064 <__alt_data_end+0xf8008064>
10008094:	003feb06 	br	10008044 <__alt_data_end+0xf8008044>
10008098:	1085883a 	add	r2,r2,r2
1000809c:	1085883a 	add	r2,r2,r2
100080a0:	2087883a 	add	r3,r4,r2
100080a4:	003fe706 	br	10008044 <__alt_data_end+0xf8008044>
100080a8:	f800283a 	ret
100080ac:	0005883a 	mov	r2,zero
100080b0:	f800283a 	ret

100080b4 <_putc_r>:
100080b4:	defffc04 	addi	sp,sp,-16
100080b8:	dc000215 	stw	r16,8(sp)
100080bc:	dfc00315 	stw	ra,12(sp)
100080c0:	2021883a 	mov	r16,r4
100080c4:	20000226 	beq	r4,zero,100080d0 <_putc_r+0x1c>
100080c8:	20800e17 	ldw	r2,56(r4)
100080cc:	10001b26 	beq	r2,zero,1000813c <_putc_r+0x88>
100080d0:	30800217 	ldw	r2,8(r6)
100080d4:	10bfffc4 	addi	r2,r2,-1
100080d8:	30800215 	stw	r2,8(r6)
100080dc:	10000a16 	blt	r2,zero,10008108 <_putc_r+0x54>
100080e0:	30800017 	ldw	r2,0(r6)
100080e4:	11400005 	stb	r5,0(r2)
100080e8:	30800017 	ldw	r2,0(r6)
100080ec:	10c00044 	addi	r3,r2,1
100080f0:	30c00015 	stw	r3,0(r6)
100080f4:	10800003 	ldbu	r2,0(r2)
100080f8:	dfc00317 	ldw	ra,12(sp)
100080fc:	dc000217 	ldw	r16,8(sp)
10008100:	dec00404 	addi	sp,sp,16
10008104:	f800283a 	ret
10008108:	30c00617 	ldw	r3,24(r6)
1000810c:	10c00616 	blt	r2,r3,10008128 <_putc_r+0x74>
10008110:	30800017 	ldw	r2,0(r6)
10008114:	00c00284 	movi	r3,10
10008118:	11400005 	stb	r5,0(r2)
1000811c:	30800017 	ldw	r2,0(r6)
10008120:	11400003 	ldbu	r5,0(r2)
10008124:	28fff11e 	bne	r5,r3,100080ec <__alt_data_end+0xf80080ec>
10008128:	8009883a 	mov	r4,r16
1000812c:	dfc00317 	ldw	ra,12(sp)
10008130:	dc000217 	ldw	r16,8(sp)
10008134:	dec00404 	addi	sp,sp,16
10008138:	0009e7c1 	jmpi	10009e7c <__swbuf_r>
1000813c:	d9400015 	stw	r5,0(sp)
10008140:	d9800115 	stw	r6,4(sp)
10008144:	0005d400 	call	10005d40 <__sinit>
10008148:	d9800117 	ldw	r6,4(sp)
1000814c:	d9400017 	ldw	r5,0(sp)
10008150:	003fdf06 	br	100080d0 <__alt_data_end+0xf80080d0>

10008154 <putc>:
10008154:	00840074 	movhi	r2,4097
10008158:	defffc04 	addi	sp,sp,-16
1000815c:	108e0604 	addi	r2,r2,14360
10008160:	dc000115 	stw	r16,4(sp)
10008164:	14000017 	ldw	r16,0(r2)
10008168:	dc400215 	stw	r17,8(sp)
1000816c:	dfc00315 	stw	ra,12(sp)
10008170:	2023883a 	mov	r17,r4
10008174:	80000226 	beq	r16,zero,10008180 <putc+0x2c>
10008178:	80800e17 	ldw	r2,56(r16)
1000817c:	10001a26 	beq	r2,zero,100081e8 <putc+0x94>
10008180:	28800217 	ldw	r2,8(r5)
10008184:	10bfffc4 	addi	r2,r2,-1
10008188:	28800215 	stw	r2,8(r5)
1000818c:	10000b16 	blt	r2,zero,100081bc <putc+0x68>
10008190:	28800017 	ldw	r2,0(r5)
10008194:	14400005 	stb	r17,0(r2)
10008198:	28800017 	ldw	r2,0(r5)
1000819c:	10c00044 	addi	r3,r2,1
100081a0:	28c00015 	stw	r3,0(r5)
100081a4:	10800003 	ldbu	r2,0(r2)
100081a8:	dfc00317 	ldw	ra,12(sp)
100081ac:	dc400217 	ldw	r17,8(sp)
100081b0:	dc000117 	ldw	r16,4(sp)
100081b4:	dec00404 	addi	sp,sp,16
100081b8:	f800283a 	ret
100081bc:	28c00617 	ldw	r3,24(r5)
100081c0:	10c00e16 	blt	r2,r3,100081fc <putc+0xa8>
100081c4:	28800017 	ldw	r2,0(r5)
100081c8:	01000284 	movi	r4,10
100081cc:	14400005 	stb	r17,0(r2)
100081d0:	28800017 	ldw	r2,0(r5)
100081d4:	10c00003 	ldbu	r3,0(r2)
100081d8:	193ff01e 	bne	r3,r4,1000819c <__alt_data_end+0xf800819c>
100081dc:	280d883a 	mov	r6,r5
100081e0:	180b883a 	mov	r5,r3
100081e4:	00000706 	br	10008204 <putc+0xb0>
100081e8:	8009883a 	mov	r4,r16
100081ec:	d9400015 	stw	r5,0(sp)
100081f0:	0005d400 	call	10005d40 <__sinit>
100081f4:	d9400017 	ldw	r5,0(sp)
100081f8:	003fe106 	br	10008180 <__alt_data_end+0xf8008180>
100081fc:	280d883a 	mov	r6,r5
10008200:	880b883a 	mov	r5,r17
10008204:	8009883a 	mov	r4,r16
10008208:	dfc00317 	ldw	ra,12(sp)
1000820c:	dc400217 	ldw	r17,8(sp)
10008210:	dc000117 	ldw	r16,4(sp)
10008214:	dec00404 	addi	sp,sp,16
10008218:	0009e7c1 	jmpi	10009e7c <__swbuf_r>

1000821c <lflush>:
1000821c:	2080030b 	ldhu	r2,12(r4)
10008220:	00c00244 	movi	r3,9
10008224:	1080024c 	andi	r2,r2,9
10008228:	10c00226 	beq	r2,r3,10008234 <lflush+0x18>
1000822c:	0005883a 	mov	r2,zero
10008230:	f800283a 	ret
10008234:	00059b01 	jmpi	100059b0 <fflush>

10008238 <__srefill_r>:
10008238:	defffc04 	addi	sp,sp,-16
1000823c:	dc400115 	stw	r17,4(sp)
10008240:	dc000015 	stw	r16,0(sp)
10008244:	dfc00315 	stw	ra,12(sp)
10008248:	dc800215 	stw	r18,8(sp)
1000824c:	2023883a 	mov	r17,r4
10008250:	2821883a 	mov	r16,r5
10008254:	20000226 	beq	r4,zero,10008260 <__srefill_r+0x28>
10008258:	20800e17 	ldw	r2,56(r4)
1000825c:	10003c26 	beq	r2,zero,10008350 <__srefill_r+0x118>
10008260:	80c0030b 	ldhu	r3,12(r16)
10008264:	1908000c 	andi	r4,r3,8192
10008268:	1805883a 	mov	r2,r3
1000826c:	2000071e 	bne	r4,zero,1000828c <__srefill_r+0x54>
10008270:	81001917 	ldw	r4,100(r16)
10008274:	18880014 	ori	r2,r3,8192
10008278:	00f7ffc4 	movi	r3,-8193
1000827c:	20c8703a 	and	r4,r4,r3
10008280:	8080030d 	sth	r2,12(r16)
10008284:	1007883a 	mov	r3,r2
10008288:	81001915 	stw	r4,100(r16)
1000828c:	80000115 	stw	zero,4(r16)
10008290:	1100080c 	andi	r4,r2,32
10008294:	2000571e 	bne	r4,zero,100083f4 <__srefill_r+0x1bc>
10008298:	1100010c 	andi	r4,r2,4
1000829c:	20001f26 	beq	r4,zero,1000831c <__srefill_r+0xe4>
100082a0:	81400c17 	ldw	r5,48(r16)
100082a4:	28000826 	beq	r5,zero,100082c8 <__srefill_r+0x90>
100082a8:	80801004 	addi	r2,r16,64
100082ac:	28800226 	beq	r5,r2,100082b8 <__srefill_r+0x80>
100082b0:	8809883a 	mov	r4,r17
100082b4:	0005eb40 	call	10005eb4 <_free_r>
100082b8:	80800f17 	ldw	r2,60(r16)
100082bc:	80000c15 	stw	zero,48(r16)
100082c0:	80800115 	stw	r2,4(r16)
100082c4:	1000391e 	bne	r2,zero,100083ac <__srefill_r+0x174>
100082c8:	80800417 	ldw	r2,16(r16)
100082cc:	10004b26 	beq	r2,zero,100083fc <__srefill_r+0x1c4>
100082d0:	8480030b 	ldhu	r18,12(r16)
100082d4:	908000cc 	andi	r2,r18,3
100082d8:	10001f1e 	bne	r2,zero,10008358 <__srefill_r+0x120>
100082dc:	81800417 	ldw	r6,16(r16)
100082e0:	80800817 	ldw	r2,32(r16)
100082e4:	81c00517 	ldw	r7,20(r16)
100082e8:	81400717 	ldw	r5,28(r16)
100082ec:	81800015 	stw	r6,0(r16)
100082f0:	8809883a 	mov	r4,r17
100082f4:	103ee83a 	callr	r2
100082f8:	80800115 	stw	r2,4(r16)
100082fc:	00800e0e 	bge	zero,r2,10008338 <__srefill_r+0x100>
10008300:	0005883a 	mov	r2,zero
10008304:	dfc00317 	ldw	ra,12(sp)
10008308:	dc800217 	ldw	r18,8(sp)
1000830c:	dc400117 	ldw	r17,4(sp)
10008310:	dc000017 	ldw	r16,0(sp)
10008314:	dec00404 	addi	sp,sp,16
10008318:	f800283a 	ret
1000831c:	1100040c 	andi	r4,r2,16
10008320:	20003026 	beq	r4,zero,100083e4 <__srefill_r+0x1ac>
10008324:	1080020c 	andi	r2,r2,8
10008328:	1000241e 	bne	r2,zero,100083bc <__srefill_r+0x184>
1000832c:	18c00114 	ori	r3,r3,4
10008330:	80c0030d 	sth	r3,12(r16)
10008334:	003fe406 	br	100082c8 <__alt_data_end+0xf80082c8>
10008338:	80c0030b 	ldhu	r3,12(r16)
1000833c:	1000161e 	bne	r2,zero,10008398 <__srefill_r+0x160>
10008340:	18c00814 	ori	r3,r3,32
10008344:	00bfffc4 	movi	r2,-1
10008348:	80c0030d 	sth	r3,12(r16)
1000834c:	003fed06 	br	10008304 <__alt_data_end+0xf8008304>
10008350:	0005d400 	call	10005d40 <__sinit>
10008354:	003fc206 	br	10008260 <__alt_data_end+0xf8008260>
10008358:	00840074 	movhi	r2,4097
1000835c:	108e0504 	addi	r2,r2,14356
10008360:	11000017 	ldw	r4,0(r2)
10008364:	01440074 	movhi	r5,4097
10008368:	00800044 	movi	r2,1
1000836c:	29608704 	addi	r5,r5,-32228
10008370:	8080030d 	sth	r2,12(r16)
10008374:	00061c40 	call	100061c4 <_fwalk>
10008378:	00800244 	movi	r2,9
1000837c:	8480030d 	sth	r18,12(r16)
10008380:	9480024c 	andi	r18,r18,9
10008384:	90bfd51e 	bne	r18,r2,100082dc <__alt_data_end+0xf80082dc>
10008388:	800b883a 	mov	r5,r16
1000838c:	8809883a 	mov	r4,r17
10008390:	00057380 	call	10005738 <__sflush_r>
10008394:	003fd106 	br	100082dc <__alt_data_end+0xf80082dc>
10008398:	18c01014 	ori	r3,r3,64
1000839c:	80000115 	stw	zero,4(r16)
100083a0:	00bfffc4 	movi	r2,-1
100083a4:	80c0030d 	sth	r3,12(r16)
100083a8:	003fd606 	br	10008304 <__alt_data_end+0xf8008304>
100083ac:	80c00e17 	ldw	r3,56(r16)
100083b0:	0005883a 	mov	r2,zero
100083b4:	80c00015 	stw	r3,0(r16)
100083b8:	003fd206 	br	10008304 <__alt_data_end+0xf8008304>
100083bc:	800b883a 	mov	r5,r16
100083c0:	8809883a 	mov	r4,r17
100083c4:	00059540 	call	10005954 <_fflush_r>
100083c8:	10000a1e 	bne	r2,zero,100083f4 <__srefill_r+0x1bc>
100083cc:	8080030b 	ldhu	r2,12(r16)
100083d0:	00fffdc4 	movi	r3,-9
100083d4:	80000215 	stw	zero,8(r16)
100083d8:	1886703a 	and	r3,r3,r2
100083dc:	80000615 	stw	zero,24(r16)
100083e0:	003fd206 	br	1000832c <__alt_data_end+0xf800832c>
100083e4:	00800244 	movi	r2,9
100083e8:	88800015 	stw	r2,0(r17)
100083ec:	18c01014 	ori	r3,r3,64
100083f0:	80c0030d 	sth	r3,12(r16)
100083f4:	00bfffc4 	movi	r2,-1
100083f8:	003fc206 	br	10008304 <__alt_data_end+0xf8008304>
100083fc:	800b883a 	mov	r5,r16
10008400:	8809883a 	mov	r4,r17
10008404:	00064280 	call	10006428 <__smakebuf_r>
10008408:	003fb106 	br	100082d0 <__alt_data_end+0xf80082d0>

1000840c <__fpclassifyd>:
1000840c:	00a00034 	movhi	r2,32768
10008410:	10bfffc4 	addi	r2,r2,-1
10008414:	2884703a 	and	r2,r5,r2
10008418:	10000726 	beq	r2,zero,10008438 <__fpclassifyd+0x2c>
1000841c:	00fffc34 	movhi	r3,65520
10008420:	019ff834 	movhi	r6,32736
10008424:	28c7883a 	add	r3,r5,r3
10008428:	31bfffc4 	addi	r6,r6,-1
1000842c:	30c00536 	bltu	r6,r3,10008444 <__fpclassifyd+0x38>
10008430:	00800104 	movi	r2,4
10008434:	f800283a 	ret
10008438:	2000021e 	bne	r4,zero,10008444 <__fpclassifyd+0x38>
1000843c:	00800084 	movi	r2,2
10008440:	f800283a 	ret
10008444:	00dffc34 	movhi	r3,32752
10008448:	019ff834 	movhi	r6,32736
1000844c:	28cb883a 	add	r5,r5,r3
10008450:	31bfffc4 	addi	r6,r6,-1
10008454:	317ff62e 	bgeu	r6,r5,10008430 <__alt_data_end+0xf8008430>
10008458:	01400434 	movhi	r5,16
1000845c:	297fffc4 	addi	r5,r5,-1
10008460:	28800236 	bltu	r5,r2,1000846c <__fpclassifyd+0x60>
10008464:	008000c4 	movi	r2,3
10008468:	f800283a 	ret
1000846c:	10c00226 	beq	r2,r3,10008478 <__fpclassifyd+0x6c>
10008470:	0005883a 	mov	r2,zero
10008474:	f800283a 	ret
10008478:	2005003a 	cmpeq	r2,r4,zero
1000847c:	f800283a 	ret

10008480 <_sbrk_r>:
10008480:	defffd04 	addi	sp,sp,-12
10008484:	dc000015 	stw	r16,0(sp)
10008488:	04040074 	movhi	r16,4097
1000848c:	dc400115 	stw	r17,4(sp)
10008490:	84151604 	addi	r16,r16,21592
10008494:	2023883a 	mov	r17,r4
10008498:	2809883a 	mov	r4,r5
1000849c:	dfc00215 	stw	ra,8(sp)
100084a0:	80000015 	stw	zero,0(r16)
100084a4:	000f1700 	call	1000f170 <sbrk>
100084a8:	00ffffc4 	movi	r3,-1
100084ac:	10c00526 	beq	r2,r3,100084c4 <_sbrk_r+0x44>
100084b0:	dfc00217 	ldw	ra,8(sp)
100084b4:	dc400117 	ldw	r17,4(sp)
100084b8:	dc000017 	ldw	r16,0(sp)
100084bc:	dec00304 	addi	sp,sp,12
100084c0:	f800283a 	ret
100084c4:	80c00017 	ldw	r3,0(r16)
100084c8:	183ff926 	beq	r3,zero,100084b0 <__alt_data_end+0xf80084b0>
100084cc:	88c00015 	stw	r3,0(r17)
100084d0:	003ff706 	br	100084b0 <__alt_data_end+0xf80084b0>

100084d4 <__sread>:
100084d4:	defffe04 	addi	sp,sp,-8
100084d8:	dc000015 	stw	r16,0(sp)
100084dc:	2821883a 	mov	r16,r5
100084e0:	2940038f 	ldh	r5,14(r5)
100084e4:	dfc00115 	stw	ra,4(sp)
100084e8:	000aba40 	call	1000aba4 <_read_r>
100084ec:	10000716 	blt	r2,zero,1000850c <__sread+0x38>
100084f0:	80c01417 	ldw	r3,80(r16)
100084f4:	1887883a 	add	r3,r3,r2
100084f8:	80c01415 	stw	r3,80(r16)
100084fc:	dfc00117 	ldw	ra,4(sp)
10008500:	dc000017 	ldw	r16,0(sp)
10008504:	dec00204 	addi	sp,sp,8
10008508:	f800283a 	ret
1000850c:	80c0030b 	ldhu	r3,12(r16)
10008510:	18fbffcc 	andi	r3,r3,61439
10008514:	80c0030d 	sth	r3,12(r16)
10008518:	dfc00117 	ldw	ra,4(sp)
1000851c:	dc000017 	ldw	r16,0(sp)
10008520:	dec00204 	addi	sp,sp,8
10008524:	f800283a 	ret

10008528 <__seofread>:
10008528:	0005883a 	mov	r2,zero
1000852c:	f800283a 	ret

10008530 <__swrite>:
10008530:	2880030b 	ldhu	r2,12(r5)
10008534:	defffb04 	addi	sp,sp,-20
10008538:	dcc00315 	stw	r19,12(sp)
1000853c:	dc800215 	stw	r18,8(sp)
10008540:	dc400115 	stw	r17,4(sp)
10008544:	dc000015 	stw	r16,0(sp)
10008548:	dfc00415 	stw	ra,16(sp)
1000854c:	10c0400c 	andi	r3,r2,256
10008550:	2821883a 	mov	r16,r5
10008554:	2023883a 	mov	r17,r4
10008558:	3025883a 	mov	r18,r6
1000855c:	3827883a 	mov	r19,r7
10008560:	18000526 	beq	r3,zero,10008578 <__swrite+0x48>
10008564:	2940038f 	ldh	r5,14(r5)
10008568:	01c00084 	movi	r7,2
1000856c:	000d883a 	mov	r6,zero
10008570:	000a9e80 	call	1000a9e8 <_lseek_r>
10008574:	8080030b 	ldhu	r2,12(r16)
10008578:	8140038f 	ldh	r5,14(r16)
1000857c:	10bbffcc 	andi	r2,r2,61439
10008580:	980f883a 	mov	r7,r19
10008584:	900d883a 	mov	r6,r18
10008588:	8809883a 	mov	r4,r17
1000858c:	8080030d 	sth	r2,12(r16)
10008590:	dfc00417 	ldw	ra,16(sp)
10008594:	dcc00317 	ldw	r19,12(sp)
10008598:	dc800217 	ldw	r18,8(sp)
1000859c:	dc400117 	ldw	r17,4(sp)
100085a0:	dc000017 	ldw	r16,0(sp)
100085a4:	dec00504 	addi	sp,sp,20
100085a8:	0009fd41 	jmpi	10009fd4 <_write_r>

100085ac <__sseek>:
100085ac:	defffe04 	addi	sp,sp,-8
100085b0:	dc000015 	stw	r16,0(sp)
100085b4:	2821883a 	mov	r16,r5
100085b8:	2940038f 	ldh	r5,14(r5)
100085bc:	dfc00115 	stw	ra,4(sp)
100085c0:	000a9e80 	call	1000a9e8 <_lseek_r>
100085c4:	00ffffc4 	movi	r3,-1
100085c8:	10c00826 	beq	r2,r3,100085ec <__sseek+0x40>
100085cc:	80c0030b 	ldhu	r3,12(r16)
100085d0:	80801415 	stw	r2,80(r16)
100085d4:	18c40014 	ori	r3,r3,4096
100085d8:	80c0030d 	sth	r3,12(r16)
100085dc:	dfc00117 	ldw	ra,4(sp)
100085e0:	dc000017 	ldw	r16,0(sp)
100085e4:	dec00204 	addi	sp,sp,8
100085e8:	f800283a 	ret
100085ec:	80c0030b 	ldhu	r3,12(r16)
100085f0:	18fbffcc 	andi	r3,r3,61439
100085f4:	80c0030d 	sth	r3,12(r16)
100085f8:	dfc00117 	ldw	ra,4(sp)
100085fc:	dc000017 	ldw	r16,0(sp)
10008600:	dec00204 	addi	sp,sp,8
10008604:	f800283a 	ret

10008608 <__sclose>:
10008608:	2940038f 	ldh	r5,14(r5)
1000860c:	000a0341 	jmpi	1000a034 <_close_r>

10008610 <strcmp>:
10008610:	2144b03a 	or	r2,r4,r5
10008614:	108000cc 	andi	r2,r2,3
10008618:	1000171e 	bne	r2,zero,10008678 <strcmp+0x68>
1000861c:	20800017 	ldw	r2,0(r4)
10008620:	28c00017 	ldw	r3,0(r5)
10008624:	10c0141e 	bne	r2,r3,10008678 <strcmp+0x68>
10008628:	027fbff4 	movhi	r9,65279
1000862c:	4a7fbfc4 	addi	r9,r9,-257
10008630:	0086303a 	nor	r3,zero,r2
10008634:	02202074 	movhi	r8,32897
10008638:	1245883a 	add	r2,r2,r9
1000863c:	42202004 	addi	r8,r8,-32640
10008640:	10c4703a 	and	r2,r2,r3
10008644:	1204703a 	and	r2,r2,r8
10008648:	10000226 	beq	r2,zero,10008654 <strcmp+0x44>
1000864c:	00002306 	br	100086dc <strcmp+0xcc>
10008650:	1000221e 	bne	r2,zero,100086dc <strcmp+0xcc>
10008654:	21000104 	addi	r4,r4,4
10008658:	20c00017 	ldw	r3,0(r4)
1000865c:	29400104 	addi	r5,r5,4
10008660:	29800017 	ldw	r6,0(r5)
10008664:	1a4f883a 	add	r7,r3,r9
10008668:	00c4303a 	nor	r2,zero,r3
1000866c:	3884703a 	and	r2,r7,r2
10008670:	1204703a 	and	r2,r2,r8
10008674:	19bff626 	beq	r3,r6,10008650 <__alt_data_end+0xf8008650>
10008678:	20800003 	ldbu	r2,0(r4)
1000867c:	10c03fcc 	andi	r3,r2,255
10008680:	18c0201c 	xori	r3,r3,128
10008684:	18ffe004 	addi	r3,r3,-128
10008688:	18000c26 	beq	r3,zero,100086bc <strcmp+0xac>
1000868c:	29800007 	ldb	r6,0(r5)
10008690:	19800326 	beq	r3,r6,100086a0 <strcmp+0x90>
10008694:	00001306 	br	100086e4 <strcmp+0xd4>
10008698:	29800007 	ldb	r6,0(r5)
1000869c:	11800b1e 	bne	r2,r6,100086cc <strcmp+0xbc>
100086a0:	21000044 	addi	r4,r4,1
100086a4:	20c00003 	ldbu	r3,0(r4)
100086a8:	29400044 	addi	r5,r5,1
100086ac:	18803fcc 	andi	r2,r3,255
100086b0:	1080201c 	xori	r2,r2,128
100086b4:	10bfe004 	addi	r2,r2,-128
100086b8:	103ff71e 	bne	r2,zero,10008698 <__alt_data_end+0xf8008698>
100086bc:	0007883a 	mov	r3,zero
100086c0:	28800003 	ldbu	r2,0(r5)
100086c4:	1885c83a 	sub	r2,r3,r2
100086c8:	f800283a 	ret
100086cc:	28800003 	ldbu	r2,0(r5)
100086d0:	18c03fcc 	andi	r3,r3,255
100086d4:	1885c83a 	sub	r2,r3,r2
100086d8:	f800283a 	ret
100086dc:	0005883a 	mov	r2,zero
100086e0:	f800283a 	ret
100086e4:	10c03fcc 	andi	r3,r2,255
100086e8:	003ff506 	br	100086c0 <__alt_data_end+0xf80086c0>

100086ec <strlen>:
100086ec:	208000cc 	andi	r2,r4,3
100086f0:	10002026 	beq	r2,zero,10008774 <strlen+0x88>
100086f4:	20800007 	ldb	r2,0(r4)
100086f8:	10002026 	beq	r2,zero,1000877c <strlen+0x90>
100086fc:	2005883a 	mov	r2,r4
10008700:	00000206 	br	1000870c <strlen+0x20>
10008704:	10c00007 	ldb	r3,0(r2)
10008708:	18001826 	beq	r3,zero,1000876c <strlen+0x80>
1000870c:	10800044 	addi	r2,r2,1
10008710:	10c000cc 	andi	r3,r2,3
10008714:	183ffb1e 	bne	r3,zero,10008704 <__alt_data_end+0xf8008704>
10008718:	10c00017 	ldw	r3,0(r2)
1000871c:	01ffbff4 	movhi	r7,65279
10008720:	39ffbfc4 	addi	r7,r7,-257
10008724:	00ca303a 	nor	r5,zero,r3
10008728:	01a02074 	movhi	r6,32897
1000872c:	19c7883a 	add	r3,r3,r7
10008730:	31a02004 	addi	r6,r6,-32640
10008734:	1946703a 	and	r3,r3,r5
10008738:	1986703a 	and	r3,r3,r6
1000873c:	1800091e 	bne	r3,zero,10008764 <strlen+0x78>
10008740:	10800104 	addi	r2,r2,4
10008744:	10c00017 	ldw	r3,0(r2)
10008748:	19cb883a 	add	r5,r3,r7
1000874c:	00c6303a 	nor	r3,zero,r3
10008750:	28c6703a 	and	r3,r5,r3
10008754:	1986703a 	and	r3,r3,r6
10008758:	183ff926 	beq	r3,zero,10008740 <__alt_data_end+0xf8008740>
1000875c:	00000106 	br	10008764 <strlen+0x78>
10008760:	10800044 	addi	r2,r2,1
10008764:	10c00007 	ldb	r3,0(r2)
10008768:	183ffd1e 	bne	r3,zero,10008760 <__alt_data_end+0xf8008760>
1000876c:	1105c83a 	sub	r2,r2,r4
10008770:	f800283a 	ret
10008774:	2005883a 	mov	r2,r4
10008778:	003fe706 	br	10008718 <__alt_data_end+0xf8008718>
1000877c:	0005883a 	mov	r2,zero
10008780:	f800283a 	ret

10008784 <__sprint_r.part.0>:
10008784:	28801917 	ldw	r2,100(r5)
10008788:	defff604 	addi	sp,sp,-40
1000878c:	dd400515 	stw	r21,20(sp)
10008790:	dfc00915 	stw	ra,36(sp)
10008794:	df000815 	stw	fp,32(sp)
10008798:	ddc00715 	stw	r23,28(sp)
1000879c:	dd800615 	stw	r22,24(sp)
100087a0:	dd000415 	stw	r20,16(sp)
100087a4:	dcc00315 	stw	r19,12(sp)
100087a8:	dc800215 	stw	r18,8(sp)
100087ac:	dc400115 	stw	r17,4(sp)
100087b0:	dc000015 	stw	r16,0(sp)
100087b4:	1088000c 	andi	r2,r2,8192
100087b8:	302b883a 	mov	r21,r6
100087bc:	10002e26 	beq	r2,zero,10008878 <__sprint_r.part.0+0xf4>
100087c0:	30800217 	ldw	r2,8(r6)
100087c4:	35800017 	ldw	r22,0(r6)
100087c8:	10002926 	beq	r2,zero,10008870 <__sprint_r.part.0+0xec>
100087cc:	2827883a 	mov	r19,r5
100087d0:	2029883a 	mov	r20,r4
100087d4:	b5c00104 	addi	r23,r22,4
100087d8:	04bfffc4 	movi	r18,-1
100087dc:	bc400017 	ldw	r17,0(r23)
100087e0:	b4000017 	ldw	r16,0(r22)
100087e4:	0039883a 	mov	fp,zero
100087e8:	8822d0ba 	srli	r17,r17,2
100087ec:	8800031e 	bne	r17,zero,100087fc <__sprint_r.part.0+0x78>
100087f0:	00001806 	br	10008854 <__sprint_r.part.0+0xd0>
100087f4:	84000104 	addi	r16,r16,4
100087f8:	8f001526 	beq	r17,fp,10008850 <__sprint_r.part.0+0xcc>
100087fc:	81400017 	ldw	r5,0(r16)
10008800:	980d883a 	mov	r6,r19
10008804:	a009883a 	mov	r4,r20
10008808:	000a3cc0 	call	1000a3cc <_fputwc_r>
1000880c:	e7000044 	addi	fp,fp,1
10008810:	14bff81e 	bne	r2,r18,100087f4 <__alt_data_end+0xf80087f4>
10008814:	9005883a 	mov	r2,r18
10008818:	a8000215 	stw	zero,8(r21)
1000881c:	a8000115 	stw	zero,4(r21)
10008820:	dfc00917 	ldw	ra,36(sp)
10008824:	df000817 	ldw	fp,32(sp)
10008828:	ddc00717 	ldw	r23,28(sp)
1000882c:	dd800617 	ldw	r22,24(sp)
10008830:	dd400517 	ldw	r21,20(sp)
10008834:	dd000417 	ldw	r20,16(sp)
10008838:	dcc00317 	ldw	r19,12(sp)
1000883c:	dc800217 	ldw	r18,8(sp)
10008840:	dc400117 	ldw	r17,4(sp)
10008844:	dc000017 	ldw	r16,0(sp)
10008848:	dec00a04 	addi	sp,sp,40
1000884c:	f800283a 	ret
10008850:	a8800217 	ldw	r2,8(r21)
10008854:	8c63883a 	add	r17,r17,r17
10008858:	8c63883a 	add	r17,r17,r17
1000885c:	1445c83a 	sub	r2,r2,r17
10008860:	a8800215 	stw	r2,8(r21)
10008864:	b5800204 	addi	r22,r22,8
10008868:	bdc00204 	addi	r23,r23,8
1000886c:	103fdb1e 	bne	r2,zero,100087dc <__alt_data_end+0xf80087dc>
10008870:	0005883a 	mov	r2,zero
10008874:	003fe806 	br	10008818 <__alt_data_end+0xf8008818>
10008878:	000a4cc0 	call	1000a4cc <__sfvwrite_r>
1000887c:	003fe606 	br	10008818 <__alt_data_end+0xf8008818>

10008880 <__sprint_r>:
10008880:	30c00217 	ldw	r3,8(r6)
10008884:	18000126 	beq	r3,zero,1000888c <__sprint_r+0xc>
10008888:	00087841 	jmpi	10008784 <__sprint_r.part.0>
1000888c:	30000115 	stw	zero,4(r6)
10008890:	0005883a 	mov	r2,zero
10008894:	f800283a 	ret

10008898 <___vfiprintf_internal_r>:
10008898:	deffca04 	addi	sp,sp,-216
1000889c:	dd403115 	stw	r21,196(sp)
100088a0:	dfc03515 	stw	ra,212(sp)
100088a4:	df003415 	stw	fp,208(sp)
100088a8:	ddc03315 	stw	r23,204(sp)
100088ac:	dd803215 	stw	r22,200(sp)
100088b0:	dd003015 	stw	r20,192(sp)
100088b4:	dcc02f15 	stw	r19,188(sp)
100088b8:	dc802e15 	stw	r18,184(sp)
100088bc:	dc402d15 	stw	r17,180(sp)
100088c0:	dc002c15 	stw	r16,176(sp)
100088c4:	d9002115 	stw	r4,132(sp)
100088c8:	d9402015 	stw	r5,128(sp)
100088cc:	d9c02215 	stw	r7,136(sp)
100088d0:	302b883a 	mov	r21,r6
100088d4:	20000226 	beq	r4,zero,100088e0 <___vfiprintf_internal_r+0x48>
100088d8:	20800e17 	ldw	r2,56(r4)
100088dc:	1000cf26 	beq	r2,zero,10008c1c <___vfiprintf_internal_r+0x384>
100088e0:	d8c02017 	ldw	r3,128(sp)
100088e4:	1880030b 	ldhu	r2,12(r3)
100088e8:	10c8000c 	andi	r3,r2,8192
100088ec:	1800071e 	bne	r3,zero,1000890c <___vfiprintf_internal_r+0x74>
100088f0:	d9402017 	ldw	r5,128(sp)
100088f4:	00f7ffc4 	movi	r3,-8193
100088f8:	10880014 	ori	r2,r2,8192
100088fc:	29001917 	ldw	r4,100(r5)
10008900:	2880030d 	sth	r2,12(r5)
10008904:	20c6703a 	and	r3,r4,r3
10008908:	28c01915 	stw	r3,100(r5)
1000890c:	10c0020c 	andi	r3,r2,8
10008910:	1800a526 	beq	r3,zero,10008ba8 <___vfiprintf_internal_r+0x310>
10008914:	d9002017 	ldw	r4,128(sp)
10008918:	20c00417 	ldw	r3,16(r4)
1000891c:	1800a226 	beq	r3,zero,10008ba8 <___vfiprintf_internal_r+0x310>
10008920:	1080068c 	andi	r2,r2,26
10008924:	00c00284 	movi	r3,10
10008928:	10c0a826 	beq	r2,r3,10008bcc <___vfiprintf_internal_r+0x334>
1000892c:	d9001a04 	addi	r4,sp,104
10008930:	d94019c4 	addi	r5,sp,103
10008934:	04840074 	movhi	r18,4097
10008938:	2145c83a 	sub	r2,r4,r5
1000893c:	9486c504 	addi	r18,r18,6932
10008940:	d9001e15 	stw	r4,120(sp)
10008944:	d9401f15 	stw	r5,124(sp)
10008948:	dec01a15 	stw	sp,104(sp)
1000894c:	d8001c15 	stw	zero,112(sp)
10008950:	d8001b15 	stw	zero,108(sp)
10008954:	d811883a 	mov	r8,sp
10008958:	d8002615 	stw	zero,152(sp)
1000895c:	d8002415 	stw	zero,144(sp)
10008960:	d8802815 	stw	r2,160(sp)
10008964:	a82d883a 	mov	r22,r21
10008968:	b0800007 	ldb	r2,0(r22)
1000896c:	10040d26 	beq	r2,zero,100099a4 <___vfiprintf_internal_r+0x110c>
10008970:	00c00944 	movi	r3,37
10008974:	b029883a 	mov	r20,r22
10008978:	10c0021e 	bne	r2,r3,10008984 <___vfiprintf_internal_r+0xec>
1000897c:	00001606 	br	100089d8 <___vfiprintf_internal_r+0x140>
10008980:	10c00326 	beq	r2,r3,10008990 <___vfiprintf_internal_r+0xf8>
10008984:	a5000044 	addi	r20,r20,1
10008988:	a0800007 	ldb	r2,0(r20)
1000898c:	103ffc1e 	bne	r2,zero,10008980 <__alt_data_end+0xf8008980>
10008990:	a5a1c83a 	sub	r16,r20,r22
10008994:	80001026 	beq	r16,zero,100089d8 <___vfiprintf_internal_r+0x140>
10008998:	d8c01c17 	ldw	r3,112(sp)
1000899c:	d8801b17 	ldw	r2,108(sp)
100089a0:	45800015 	stw	r22,0(r8)
100089a4:	80c7883a 	add	r3,r16,r3
100089a8:	10800044 	addi	r2,r2,1
100089ac:	44000115 	stw	r16,4(r8)
100089b0:	d8c01c15 	stw	r3,112(sp)
100089b4:	d8801b15 	stw	r2,108(sp)
100089b8:	010001c4 	movi	r4,7
100089bc:	2080750e 	bge	r4,r2,10008b94 <___vfiprintf_internal_r+0x2fc>
100089c0:	1803951e 	bne	r3,zero,10009818 <___vfiprintf_internal_r+0xf80>
100089c4:	d8c02417 	ldw	r3,144(sp)
100089c8:	d8001b15 	stw	zero,108(sp)
100089cc:	d811883a 	mov	r8,sp
100089d0:	1c07883a 	add	r3,r3,r16
100089d4:	d8c02415 	stw	r3,144(sp)
100089d8:	a0800007 	ldb	r2,0(r20)
100089dc:	1002e026 	beq	r2,zero,10009560 <___vfiprintf_internal_r+0xcc8>
100089e0:	a5800044 	addi	r22,r20,1
100089e4:	a0c00047 	ldb	r3,1(r20)
100089e8:	d8001d85 	stb	zero,118(sp)
100089ec:	0027883a 	mov	r19,zero
100089f0:	d8002305 	stb	zero,140(sp)
100089f4:	043fffc4 	movi	r16,-1
100089f8:	d8002515 	stw	zero,148(sp)
100089fc:	0023883a 	mov	r17,zero
10008a00:	05001604 	movi	r20,88
10008a04:	05400244 	movi	r21,9
10008a08:	402f883a 	mov	r23,r8
10008a0c:	b5800044 	addi	r22,r22,1
10008a10:	18bff804 	addi	r2,r3,-32
10008a14:	a0827736 	bltu	r20,r2,100093f4 <___vfiprintf_internal_r+0xb5c>
10008a18:	100490ba 	slli	r2,r2,2
10008a1c:	01040074 	movhi	r4,4097
10008a20:	21228c04 	addi	r4,r4,-30160
10008a24:	1105883a 	add	r2,r2,r4
10008a28:	10800017 	ldw	r2,0(r2)
10008a2c:	1000683a 	jmp	r2
10008a30:	100090f4 	orhi	zero,r2,579
10008a34:	100093f4 	orhi	zero,r2,591
10008a38:	100093f4 	orhi	zero,r2,591
10008a3c:	10009110 	cmplti	zero,r2,580
10008a40:	100093f4 	orhi	zero,r2,591
10008a44:	100093f4 	orhi	zero,r2,591
10008a48:	100093f4 	orhi	zero,r2,591
10008a4c:	100093f4 	orhi	zero,r2,591
10008a50:	100093f4 	orhi	zero,r2,591
10008a54:	100093f4 	orhi	zero,r2,591
10008a58:	10009318 	cmpnei	zero,r2,588
10008a5c:	1000933c 	xorhi	zero,r2,588
10008a60:	100093f4 	orhi	zero,r2,591
10008a64:	10008c34 	orhi	zero,r2,560
10008a68:	10009350 	cmplti	zero,r2,589
10008a6c:	100093f4 	orhi	zero,r2,591
10008a70:	1000911c 	xori	zero,r2,580
10008a74:	10009128 	cmpgeui	zero,r2,580
10008a78:	10009128 	cmpgeui	zero,r2,580
10008a7c:	10009128 	cmpgeui	zero,r2,580
10008a80:	10009128 	cmpgeui	zero,r2,580
10008a84:	10009128 	cmpgeui	zero,r2,580
10008a88:	10009128 	cmpgeui	zero,r2,580
10008a8c:	10009128 	cmpgeui	zero,r2,580
10008a90:	10009128 	cmpgeui	zero,r2,580
10008a94:	10009128 	cmpgeui	zero,r2,580
10008a98:	100093f4 	orhi	zero,r2,591
10008a9c:	100093f4 	orhi	zero,r2,591
10008aa0:	100093f4 	orhi	zero,r2,591
10008aa4:	100093f4 	orhi	zero,r2,591
10008aa8:	100093f4 	orhi	zero,r2,591
10008aac:	100093f4 	orhi	zero,r2,591
10008ab0:	100093f4 	orhi	zero,r2,591
10008ab4:	100093f4 	orhi	zero,r2,591
10008ab8:	100093f4 	orhi	zero,r2,591
10008abc:	100093f4 	orhi	zero,r2,591
10008ac0:	10009168 	cmpgeui	zero,r2,581
10008ac4:	100093f4 	orhi	zero,r2,591
10008ac8:	100093f4 	orhi	zero,r2,591
10008acc:	100093f4 	orhi	zero,r2,591
10008ad0:	100093f4 	orhi	zero,r2,591
10008ad4:	100093f4 	orhi	zero,r2,591
10008ad8:	100093f4 	orhi	zero,r2,591
10008adc:	100093f4 	orhi	zero,r2,591
10008ae0:	100093f4 	orhi	zero,r2,591
10008ae4:	100093f4 	orhi	zero,r2,591
10008ae8:	100093f4 	orhi	zero,r2,591
10008aec:	100091a4 	muli	zero,r2,582
10008af0:	100093f4 	orhi	zero,r2,591
10008af4:	100093f4 	orhi	zero,r2,591
10008af8:	100093f4 	orhi	zero,r2,591
10008afc:	100093f4 	orhi	zero,r2,591
10008b00:	100093f4 	orhi	zero,r2,591
10008b04:	10009200 	call	11000920 <_gp+0xfe510c>
10008b08:	100093f4 	orhi	zero,r2,591
10008b0c:	100093f4 	orhi	zero,r2,591
10008b10:	10009274 	orhi	zero,r2,585
10008b14:	100093f4 	orhi	zero,r2,591
10008b18:	100093f4 	orhi	zero,r2,591
10008b1c:	100093f4 	orhi	zero,r2,591
10008b20:	100093f4 	orhi	zero,r2,591
10008b24:	100093f4 	orhi	zero,r2,591
10008b28:	100093f4 	orhi	zero,r2,591
10008b2c:	100093f4 	orhi	zero,r2,591
10008b30:	100093f4 	orhi	zero,r2,591
10008b34:	100093f4 	orhi	zero,r2,591
10008b38:	100093f4 	orhi	zero,r2,591
10008b3c:	1000901c 	xori	zero,r2,576
10008b40:	1000904c 	andi	zero,r2,577
10008b44:	100093f4 	orhi	zero,r2,591
10008b48:	100093f4 	orhi	zero,r2,591
10008b4c:	100093f4 	orhi	zero,r2,591
10008b50:	1000939c 	xori	zero,r2,590
10008b54:	1000904c 	andi	zero,r2,577
10008b58:	100093f4 	orhi	zero,r2,591
10008b5c:	100093f4 	orhi	zero,r2,591
10008b60:	10008ef4 	orhi	zero,r2,571
10008b64:	100093f4 	orhi	zero,r2,591
10008b68:	10008f08 	cmpgei	zero,r2,572
10008b6c:	10008f40 	call	110008f4 <_gp+0xfe50e0>
10008b70:	10008c40 	call	110008c4 <_gp+0xfe50b0>
10008b74:	10008ee8 	cmpgeui	zero,r2,571
10008b78:	100093f4 	orhi	zero,r2,591
10008b7c:	100092b4 	orhi	zero,r2,586
10008b80:	100093f4 	orhi	zero,r2,591
10008b84:	10009300 	call	11000930 <_gp+0xfe511c>
10008b88:	100093f4 	orhi	zero,r2,591
10008b8c:	100093f4 	orhi	zero,r2,591
10008b90:	10008fc4 	addi	zero,r2,575
10008b94:	42000204 	addi	r8,r8,8
10008b98:	d8c02417 	ldw	r3,144(sp)
10008b9c:	1c07883a 	add	r3,r3,r16
10008ba0:	d8c02415 	stw	r3,144(sp)
10008ba4:	003f8c06 	br	100089d8 <__alt_data_end+0xf80089d8>
10008ba8:	d9402017 	ldw	r5,128(sp)
10008bac:	d9002117 	ldw	r4,132(sp)
10008bb0:	0003d340 	call	10003d34 <__swsetup_r>
10008bb4:	1003c11e 	bne	r2,zero,10009abc <___vfiprintf_internal_r+0x1224>
10008bb8:	d9402017 	ldw	r5,128(sp)
10008bbc:	00c00284 	movi	r3,10
10008bc0:	2880030b 	ldhu	r2,12(r5)
10008bc4:	1080068c 	andi	r2,r2,26
10008bc8:	10ff581e 	bne	r2,r3,1000892c <__alt_data_end+0xf800892c>
10008bcc:	d8c02017 	ldw	r3,128(sp)
10008bd0:	1880038f 	ldh	r2,14(r3)
10008bd4:	103f5516 	blt	r2,zero,1000892c <__alt_data_end+0xf800892c>
10008bd8:	d9c02217 	ldw	r7,136(sp)
10008bdc:	d9002117 	ldw	r4,132(sp)
10008be0:	a80d883a 	mov	r6,r21
10008be4:	180b883a 	mov	r5,r3
10008be8:	0009dc00 	call	10009dc0 <__sbprintf>
10008bec:	dfc03517 	ldw	ra,212(sp)
10008bf0:	df003417 	ldw	fp,208(sp)
10008bf4:	ddc03317 	ldw	r23,204(sp)
10008bf8:	dd803217 	ldw	r22,200(sp)
10008bfc:	dd403117 	ldw	r21,196(sp)
10008c00:	dd003017 	ldw	r20,192(sp)
10008c04:	dcc02f17 	ldw	r19,188(sp)
10008c08:	dc802e17 	ldw	r18,184(sp)
10008c0c:	dc402d17 	ldw	r17,180(sp)
10008c10:	dc002c17 	ldw	r16,176(sp)
10008c14:	dec03604 	addi	sp,sp,216
10008c18:	f800283a 	ret
10008c1c:	0005d400 	call	10005d40 <__sinit>
10008c20:	003f2f06 	br	100088e0 <__alt_data_end+0xf80088e0>
10008c24:	d8c02517 	ldw	r3,148(sp)
10008c28:	d8802215 	stw	r2,136(sp)
10008c2c:	00c7c83a 	sub	r3,zero,r3
10008c30:	d8c02515 	stw	r3,148(sp)
10008c34:	8c400114 	ori	r17,r17,4
10008c38:	b0c00007 	ldb	r3,0(r22)
10008c3c:	003f7306 	br	10008a0c <__alt_data_end+0xf8008a0c>
10008c40:	00800c04 	movi	r2,48
10008c44:	d9402217 	ldw	r5,136(sp)
10008c48:	d8801d05 	stb	r2,116(sp)
10008c4c:	00801e04 	movi	r2,120
10008c50:	d8801d45 	stb	r2,117(sp)
10008c54:	d8001d85 	stb	zero,118(sp)
10008c58:	b811883a 	mov	r8,r23
10008c5c:	28c00104 	addi	r3,r5,4
10008c60:	2cc00017 	ldw	r19,0(r5)
10008c64:	0029883a 	mov	r20,zero
10008c68:	88800094 	ori	r2,r17,2
10008c6c:	80032516 	blt	r16,zero,10009904 <___vfiprintf_internal_r+0x106c>
10008c70:	00bfdfc4 	movi	r2,-129
10008c74:	88a2703a 	and	r17,r17,r2
10008c78:	d8c02215 	stw	r3,136(sp)
10008c7c:	8c400094 	ori	r17,r17,2
10008c80:	98032a1e 	bne	r19,zero,1000992c <___vfiprintf_internal_r+0x1094>
10008c84:	00840074 	movhi	r2,4097
10008c88:	10866504 	addi	r2,r2,6548
10008c8c:	d8802615 	stw	r2,152(sp)
10008c90:	002b883a 	mov	r21,zero
10008c94:	8001741e 	bne	r16,zero,10009268 <___vfiprintf_internal_r+0x9d0>
10008c98:	0021883a 	mov	r16,zero
10008c9c:	0029883a 	mov	r20,zero
10008ca0:	ddc01a04 	addi	r23,sp,104
10008ca4:	8027883a 	mov	r19,r16
10008ca8:	8500010e 	bge	r16,r20,10008cb0 <___vfiprintf_internal_r+0x418>
10008cac:	a027883a 	mov	r19,r20
10008cb0:	ad403fcc 	andi	r21,r21,255
10008cb4:	ad40201c 	xori	r21,r21,128
10008cb8:	ad7fe004 	addi	r21,r21,-128
10008cbc:	a8000126 	beq	r21,zero,10008cc4 <___vfiprintf_internal_r+0x42c>
10008cc0:	9cc00044 	addi	r19,r19,1
10008cc4:	89c0008c 	andi	r7,r17,2
10008cc8:	38000126 	beq	r7,zero,10008cd0 <___vfiprintf_internal_r+0x438>
10008ccc:	9cc00084 	addi	r19,r19,2
10008cd0:	88c0210c 	andi	r3,r17,132
10008cd4:	1801dd1e 	bne	r3,zero,1000944c <___vfiprintf_internal_r+0xbb4>
10008cd8:	d9402517 	ldw	r5,148(sp)
10008cdc:	2cebc83a 	sub	r21,r5,r19
10008ce0:	0541da0e 	bge	zero,r21,1000944c <___vfiprintf_internal_r+0xbb4>
10008ce4:	07000404 	movi	fp,16
10008ce8:	d8801c17 	ldw	r2,112(sp)
10008cec:	e543be0e 	bge	fp,r21,10009be8 <___vfiprintf_internal_r+0x1350>
10008cf0:	01440074 	movhi	r5,4097
10008cf4:	2946c904 	addi	r5,r5,6948
10008cf8:	dc002715 	stw	r16,156(sp)
10008cfc:	d9801b17 	ldw	r6,108(sp)
10008d00:	a821883a 	mov	r16,r21
10008d04:	d9402315 	stw	r5,140(sp)
10008d08:	028001c4 	movi	r10,7
10008d0c:	d9c02915 	stw	r7,164(sp)
10008d10:	182b883a 	mov	r21,r3
10008d14:	00000506 	br	10008d2c <___vfiprintf_internal_r+0x494>
10008d18:	31000084 	addi	r4,r6,2
10008d1c:	42000204 	addi	r8,r8,8
10008d20:	180d883a 	mov	r6,r3
10008d24:	843ffc04 	addi	r16,r16,-16
10008d28:	e4000f0e 	bge	fp,r16,10008d68 <___vfiprintf_internal_r+0x4d0>
10008d2c:	01040074 	movhi	r4,4097
10008d30:	10800404 	addi	r2,r2,16
10008d34:	30c00044 	addi	r3,r6,1
10008d38:	2106c904 	addi	r4,r4,6948
10008d3c:	41000015 	stw	r4,0(r8)
10008d40:	47000115 	stw	fp,4(r8)
10008d44:	d8801c15 	stw	r2,112(sp)
10008d48:	d8c01b15 	stw	r3,108(sp)
10008d4c:	50fff20e 	bge	r10,r3,10008d18 <__alt_data_end+0xf8008d18>
10008d50:	1001b21e 	bne	r2,zero,1000941c <___vfiprintf_internal_r+0xb84>
10008d54:	843ffc04 	addi	r16,r16,-16
10008d58:	000d883a 	mov	r6,zero
10008d5c:	01000044 	movi	r4,1
10008d60:	d811883a 	mov	r8,sp
10008d64:	e43ff116 	blt	fp,r16,10008d2c <__alt_data_end+0xf8008d2c>
10008d68:	a807883a 	mov	r3,r21
10008d6c:	d9c02917 	ldw	r7,164(sp)
10008d70:	802b883a 	mov	r21,r16
10008d74:	dc002717 	ldw	r16,156(sp)
10008d78:	d9402317 	ldw	r5,140(sp)
10008d7c:	a885883a 	add	r2,r21,r2
10008d80:	45400115 	stw	r21,4(r8)
10008d84:	41400015 	stw	r5,0(r8)
10008d88:	d8801c15 	stw	r2,112(sp)
10008d8c:	d9001b15 	stw	r4,108(sp)
10008d90:	014001c4 	movi	r5,7
10008d94:	29026216 	blt	r5,r4,10009720 <___vfiprintf_internal_r+0xe88>
10008d98:	d9801d87 	ldb	r6,118(sp)
10008d9c:	42000204 	addi	r8,r8,8
10008da0:	21400044 	addi	r5,r4,1
10008da4:	3001ae1e 	bne	r6,zero,10009460 <___vfiprintf_internal_r+0xbc8>
10008da8:	3801bb26 	beq	r7,zero,10009498 <___vfiprintf_internal_r+0xc00>
10008dac:	d9001d04 	addi	r4,sp,116
10008db0:	10800084 	addi	r2,r2,2
10008db4:	41000015 	stw	r4,0(r8)
10008db8:	01000084 	movi	r4,2
10008dbc:	41000115 	stw	r4,4(r8)
10008dc0:	d8801c15 	stw	r2,112(sp)
10008dc4:	d9401b15 	stw	r5,108(sp)
10008dc8:	010001c4 	movi	r4,7
10008dcc:	2142680e 	bge	r4,r5,10009770 <___vfiprintf_internal_r+0xed8>
10008dd0:	1002b11e 	bne	r2,zero,10009898 <___vfiprintf_internal_r+0x1000>
10008dd4:	01802004 	movi	r6,128
10008dd8:	01400044 	movi	r5,1
10008ddc:	0009883a 	mov	r4,zero
10008de0:	d811883a 	mov	r8,sp
10008de4:	1981ae1e 	bne	r3,r6,100094a0 <___vfiprintf_internal_r+0xc08>
10008de8:	d8c02517 	ldw	r3,148(sp)
10008dec:	1cf9c83a 	sub	fp,r3,r19
10008df0:	0701ab0e 	bge	zero,fp,100094a0 <___vfiprintf_internal_r+0xc08>
10008df4:	05400404 	movi	r21,16
10008df8:	af03a90e 	bge	r21,fp,10009ca0 <___vfiprintf_internal_r+0x1408>
10008dfc:	01440074 	movhi	r5,4097
10008e00:	2946c504 	addi	r5,r5,6932
10008e04:	d9402315 	stw	r5,140(sp)
10008e08:	01c001c4 	movi	r7,7
10008e0c:	00000506 	br	10008e24 <___vfiprintf_internal_r+0x58c>
10008e10:	21800084 	addi	r6,r4,2
10008e14:	42000204 	addi	r8,r8,8
10008e18:	1809883a 	mov	r4,r3
10008e1c:	e73ffc04 	addi	fp,fp,-16
10008e20:	af000d0e 	bge	r21,fp,10008e58 <___vfiprintf_internal_r+0x5c0>
10008e24:	10800404 	addi	r2,r2,16
10008e28:	20c00044 	addi	r3,r4,1
10008e2c:	44800015 	stw	r18,0(r8)
10008e30:	45400115 	stw	r21,4(r8)
10008e34:	d8801c15 	stw	r2,112(sp)
10008e38:	d8c01b15 	stw	r3,108(sp)
10008e3c:	38fff40e 	bge	r7,r3,10008e10 <__alt_data_end+0xf8008e10>
10008e40:	10022b1e 	bne	r2,zero,100096f0 <___vfiprintf_internal_r+0xe58>
10008e44:	e73ffc04 	addi	fp,fp,-16
10008e48:	01800044 	movi	r6,1
10008e4c:	0009883a 	mov	r4,zero
10008e50:	d811883a 	mov	r8,sp
10008e54:	af3ff316 	blt	r21,fp,10008e24 <__alt_data_end+0xf8008e24>
10008e58:	d8c02317 	ldw	r3,140(sp)
10008e5c:	1705883a 	add	r2,r2,fp
10008e60:	47000115 	stw	fp,4(r8)
10008e64:	40c00015 	stw	r3,0(r8)
10008e68:	d8801c15 	stw	r2,112(sp)
10008e6c:	d9801b15 	stw	r6,108(sp)
10008e70:	00c001c4 	movi	r3,7
10008e74:	19829416 	blt	r3,r6,100098c8 <___vfiprintf_internal_r+0x1030>
10008e78:	8521c83a 	sub	r16,r16,r20
10008e7c:	42000204 	addi	r8,r8,8
10008e80:	31400044 	addi	r5,r6,1
10008e84:	3009883a 	mov	r4,r6
10008e88:	04018716 	blt	zero,r16,100094a8 <___vfiprintf_internal_r+0xc10>
10008e8c:	a085883a 	add	r2,r20,r2
10008e90:	45c00015 	stw	r23,0(r8)
10008e94:	45000115 	stw	r20,4(r8)
10008e98:	d8801c15 	stw	r2,112(sp)
10008e9c:	d9401b15 	stw	r5,108(sp)
10008ea0:	00c001c4 	movi	r3,7
10008ea4:	1941c20e 	bge	r3,r5,100095b0 <___vfiprintf_internal_r+0xd18>
10008ea8:	1002531e 	bne	r2,zero,100097f8 <___vfiprintf_internal_r+0xf60>
10008eac:	d8001b15 	stw	zero,108(sp)
10008eb0:	8c40010c 	andi	r17,r17,4
10008eb4:	88023226 	beq	r17,zero,10009780 <___vfiprintf_internal_r+0xee8>
10008eb8:	d9002517 	ldw	r4,148(sp)
10008ebc:	24e3c83a 	sub	r17,r4,r19
10008ec0:	04432916 	blt	zero,r17,10009b68 <___vfiprintf_internal_r+0x12d0>
10008ec4:	d8802517 	ldw	r2,148(sp)
10008ec8:	14c0010e 	bge	r2,r19,10008ed0 <___vfiprintf_internal_r+0x638>
10008ecc:	9805883a 	mov	r2,r19
10008ed0:	d8c02417 	ldw	r3,144(sp)
10008ed4:	1887883a 	add	r3,r3,r2
10008ed8:	d8c02415 	stw	r3,144(sp)
10008edc:	d8001b15 	stw	zero,108(sp)
10008ee0:	d811883a 	mov	r8,sp
10008ee4:	003ea006 	br	10008968 <__alt_data_end+0xf8008968>
10008ee8:	8c400814 	ori	r17,r17,32
10008eec:	b0c00007 	ldb	r3,0(r22)
10008ef0:	003ec606 	br	10008a0c <__alt_data_end+0xf8008a0c>
10008ef4:	b0c00007 	ldb	r3,0(r22)
10008ef8:	00801b04 	movi	r2,108
10008efc:	18832026 	beq	r3,r2,10009b80 <___vfiprintf_internal_r+0x12e8>
10008f00:	8c400414 	ori	r17,r17,16
10008f04:	003ec106 	br	10008a0c <__alt_data_end+0xf8008a0c>
10008f08:	9cc03fcc 	andi	r19,r19,255
10008f0c:	b811883a 	mov	r8,r23
10008f10:	9803981e 	bne	r19,zero,10009d74 <___vfiprintf_internal_r+0x14dc>
10008f14:	8880080c 	andi	r2,r17,32
10008f18:	1002be26 	beq	r2,zero,10009a14 <___vfiprintf_internal_r+0x117c>
10008f1c:	d9002217 	ldw	r4,136(sp)
10008f20:	d9402417 	ldw	r5,144(sp)
10008f24:	20800017 	ldw	r2,0(r4)
10008f28:	2807d7fa 	srai	r3,r5,31
10008f2c:	21000104 	addi	r4,r4,4
10008f30:	d9002215 	stw	r4,136(sp)
10008f34:	11400015 	stw	r5,0(r2)
10008f38:	10c00115 	stw	r3,4(r2)
10008f3c:	003e8a06 	br	10008968 <__alt_data_end+0xf8008968>
10008f40:	9cc03fcc 	andi	r19,r19,255
10008f44:	b811883a 	mov	r8,r23
10008f48:	9803871e 	bne	r19,zero,10009d68 <___vfiprintf_internal_r+0x14d0>
10008f4c:	8880080c 	andi	r2,r17,32
10008f50:	10009a26 	beq	r2,zero,100091bc <___vfiprintf_internal_r+0x924>
10008f54:	d9002217 	ldw	r4,136(sp)
10008f58:	d8001d85 	stb	zero,118(sp)
10008f5c:	20800204 	addi	r2,r4,8
10008f60:	24c00017 	ldw	r19,0(r4)
10008f64:	25000117 	ldw	r20,4(r4)
10008f68:	8002a416 	blt	r16,zero,100099fc <___vfiprintf_internal_r+0x1164>
10008f6c:	013fdfc4 	movi	r4,-129
10008f70:	9d06b03a 	or	r3,r19,r20
10008f74:	d8802215 	stw	r2,136(sp)
10008f78:	8922703a 	and	r17,r17,r4
10008f7c:	18009b26 	beq	r3,zero,100091ec <___vfiprintf_internal_r+0x954>
10008f80:	002b883a 	mov	r21,zero
10008f84:	ddc01a04 	addi	r23,sp,104
10008f88:	9806d0fa 	srli	r3,r19,3
10008f8c:	a008977a 	slli	r4,r20,29
10008f90:	a028d0fa 	srli	r20,r20,3
10008f94:	9cc001cc 	andi	r19,r19,7
10008f98:	98800c04 	addi	r2,r19,48
10008f9c:	bdffffc4 	addi	r23,r23,-1
10008fa0:	20e6b03a 	or	r19,r4,r3
10008fa4:	b8800005 	stb	r2,0(r23)
10008fa8:	9d06b03a 	or	r3,r19,r20
10008fac:	183ff61e 	bne	r3,zero,10008f88 <__alt_data_end+0xf8008f88>
10008fb0:	88c0004c 	andi	r3,r17,1
10008fb4:	18021f1e 	bne	r3,zero,10009834 <___vfiprintf_internal_r+0xf9c>
10008fb8:	d9401e17 	ldw	r5,120(sp)
10008fbc:	2de9c83a 	sub	r20,r5,r23
10008fc0:	003f3806 	br	10008ca4 <__alt_data_end+0xf8008ca4>
10008fc4:	9cc03fcc 	andi	r19,r19,255
10008fc8:	b811883a 	mov	r8,r23
10008fcc:	98034f1e 	bne	r19,zero,10009d0c <___vfiprintf_internal_r+0x1474>
10008fd0:	00840074 	movhi	r2,4097
10008fd4:	10866504 	addi	r2,r2,6548
10008fd8:	d8802615 	stw	r2,152(sp)
10008fdc:	8880080c 	andi	r2,r17,32
10008fe0:	1000ac26 	beq	r2,zero,10009294 <___vfiprintf_internal_r+0x9fc>
10008fe4:	d9002217 	ldw	r4,136(sp)
10008fe8:	24c00017 	ldw	r19,0(r4)
10008fec:	25000117 	ldw	r20,4(r4)
10008ff0:	21000204 	addi	r4,r4,8
10008ff4:	d9002215 	stw	r4,136(sp)
10008ff8:	8880004c 	andi	r2,r17,1
10008ffc:	1001e726 	beq	r2,zero,1000979c <___vfiprintf_internal_r+0xf04>
10009000:	9d04b03a 	or	r2,r19,r20
10009004:	10025c1e 	bne	r2,zero,10009978 <___vfiprintf_internal_r+0x10e0>
10009008:	d8001d85 	stb	zero,118(sp)
1000900c:	80024416 	blt	r16,zero,10009920 <___vfiprintf_internal_r+0x1088>
10009010:	00bfdfc4 	movi	r2,-129
10009014:	88a2703a 	and	r17,r17,r2
10009018:	003f1d06 	br	10008c90 <__alt_data_end+0xf8008c90>
1000901c:	d8c02217 	ldw	r3,136(sp)
10009020:	04c00044 	movi	r19,1
10009024:	b811883a 	mov	r8,r23
10009028:	18800017 	ldw	r2,0(r3)
1000902c:	18c00104 	addi	r3,r3,4
10009030:	d8001d85 	stb	zero,118(sp)
10009034:	d8801005 	stb	r2,64(sp)
10009038:	d8c02215 	stw	r3,136(sp)
1000903c:	9829883a 	mov	r20,r19
10009040:	ddc01004 	addi	r23,sp,64
10009044:	0021883a 	mov	r16,zero
10009048:	003f1e06 	br	10008cc4 <__alt_data_end+0xf8008cc4>
1000904c:	9cc03fcc 	andi	r19,r19,255
10009050:	b811883a 	mov	r8,r23
10009054:	9803331e 	bne	r19,zero,10009d24 <___vfiprintf_internal_r+0x148c>
10009058:	8880080c 	andi	r2,r17,32
1000905c:	10004826 	beq	r2,zero,10009180 <___vfiprintf_internal_r+0x8e8>
10009060:	d9002217 	ldw	r4,136(sp)
10009064:	20800117 	ldw	r2,4(r4)
10009068:	24c00017 	ldw	r19,0(r4)
1000906c:	21000204 	addi	r4,r4,8
10009070:	d9002215 	stw	r4,136(sp)
10009074:	1029883a 	mov	r20,r2
10009078:	10024c16 	blt	r2,zero,100099ac <___vfiprintf_internal_r+0x1114>
1000907c:	dd401d83 	ldbu	r21,118(sp)
10009080:	80007116 	blt	r16,zero,10009248 <___vfiprintf_internal_r+0x9b0>
10009084:	00ffdfc4 	movi	r3,-129
10009088:	9d04b03a 	or	r2,r19,r20
1000908c:	88e2703a 	and	r17,r17,r3
10009090:	1000d126 	beq	r2,zero,100093d8 <___vfiprintf_internal_r+0xb40>
10009094:	a0023526 	beq	r20,zero,1000996c <___vfiprintf_internal_r+0x10d4>
10009098:	ddc01a04 	addi	r23,sp,104
1000909c:	4039883a 	mov	fp,r8
100090a0:	9809883a 	mov	r4,r19
100090a4:	a00b883a 	mov	r5,r20
100090a8:	01800284 	movi	r6,10
100090ac:	000f883a 	mov	r7,zero
100090b0:	000b94c0 	call	1000b94c <__umoddi3>
100090b4:	10800c04 	addi	r2,r2,48
100090b8:	bdffffc4 	addi	r23,r23,-1
100090bc:	9809883a 	mov	r4,r19
100090c0:	a00b883a 	mov	r5,r20
100090c4:	b8800005 	stb	r2,0(r23)
100090c8:	01800284 	movi	r6,10
100090cc:	000f883a 	mov	r7,zero
100090d0:	000b3500 	call	1000b350 <__udivdi3>
100090d4:	1027883a 	mov	r19,r2
100090d8:	10c4b03a 	or	r2,r2,r3
100090dc:	1829883a 	mov	r20,r3
100090e0:	103fef1e 	bne	r2,zero,100090a0 <__alt_data_end+0xf80090a0>
100090e4:	d9001e17 	ldw	r4,120(sp)
100090e8:	e011883a 	mov	r8,fp
100090ec:	25e9c83a 	sub	r20,r4,r23
100090f0:	003eec06 	br	10008ca4 <__alt_data_end+0xf8008ca4>
100090f4:	d8802307 	ldb	r2,140(sp)
100090f8:	1002361e 	bne	r2,zero,100099d4 <___vfiprintf_internal_r+0x113c>
100090fc:	00c00804 	movi	r3,32
10009100:	d8c02305 	stb	r3,140(sp)
10009104:	04c00044 	movi	r19,1
10009108:	b0c00007 	ldb	r3,0(r22)
1000910c:	003e3f06 	br	10008a0c <__alt_data_end+0xf8008a0c>
10009110:	8c400054 	ori	r17,r17,1
10009114:	b0c00007 	ldb	r3,0(r22)
10009118:	003e3c06 	br	10008a0c <__alt_data_end+0xf8008a0c>
1000911c:	8c402014 	ori	r17,r17,128
10009120:	b0c00007 	ldb	r3,0(r22)
10009124:	003e3906 	br	10008a0c <__alt_data_end+0xf8008a0c>
10009128:	dc002715 	stw	r16,156(sp)
1000912c:	d8002515 	stw	zero,148(sp)
10009130:	1f3ff404 	addi	fp,r3,-48
10009134:	0009883a 	mov	r4,zero
10009138:	b021883a 	mov	r16,r22
1000913c:	01400284 	movi	r5,10
10009140:	00016040 	call	10001604 <__mulsi3>
10009144:	80c00007 	ldb	r3,0(r16)
10009148:	e089883a 	add	r4,fp,r2
1000914c:	b5800044 	addi	r22,r22,1
10009150:	1f3ff404 	addi	fp,r3,-48
10009154:	b021883a 	mov	r16,r22
10009158:	af3ff82e 	bgeu	r21,fp,1000913c <__alt_data_end+0xf800913c>
1000915c:	d9002515 	stw	r4,148(sp)
10009160:	dc002717 	ldw	r16,156(sp)
10009164:	003e2a06 	br	10008a10 <__alt_data_end+0xf8008a10>
10009168:	9cc03fcc 	andi	r19,r19,255
1000916c:	b811883a 	mov	r8,r23
10009170:	9802e91e 	bne	r19,zero,10009d18 <___vfiprintf_internal_r+0x1480>
10009174:	8c400414 	ori	r17,r17,16
10009178:	8880080c 	andi	r2,r17,32
1000917c:	103fb81e 	bne	r2,zero,10009060 <__alt_data_end+0xf8009060>
10009180:	8880040c 	andi	r2,r17,16
10009184:	10022e26 	beq	r2,zero,10009a40 <___vfiprintf_internal_r+0x11a8>
10009188:	d9402217 	ldw	r5,136(sp)
1000918c:	2cc00017 	ldw	r19,0(r5)
10009190:	29400104 	addi	r5,r5,4
10009194:	d9402215 	stw	r5,136(sp)
10009198:	9829d7fa 	srai	r20,r19,31
1000919c:	a005883a 	mov	r2,r20
100091a0:	003fb506 	br	10009078 <__alt_data_end+0xf8009078>
100091a4:	9cc03fcc 	andi	r19,r19,255
100091a8:	b811883a 	mov	r8,r23
100091ac:	9802fa1e 	bne	r19,zero,10009d98 <___vfiprintf_internal_r+0x1500>
100091b0:	8c400414 	ori	r17,r17,16
100091b4:	8880080c 	andi	r2,r17,32
100091b8:	103f661e 	bne	r2,zero,10008f54 <__alt_data_end+0xf8008f54>
100091bc:	8880040c 	andi	r2,r17,16
100091c0:	10020626 	beq	r2,zero,100099dc <___vfiprintf_internal_r+0x1144>
100091c4:	d9402217 	ldw	r5,136(sp)
100091c8:	d8001d85 	stb	zero,118(sp)
100091cc:	0029883a 	mov	r20,zero
100091d0:	28800104 	addi	r2,r5,4
100091d4:	2cc00017 	ldw	r19,0(r5)
100091d8:	80020816 	blt	r16,zero,100099fc <___vfiprintf_internal_r+0x1164>
100091dc:	00ffdfc4 	movi	r3,-129
100091e0:	d8802215 	stw	r2,136(sp)
100091e4:	88e2703a 	and	r17,r17,r3
100091e8:	983f651e 	bne	r19,zero,10008f80 <__alt_data_end+0xf8008f80>
100091ec:	002b883a 	mov	r21,zero
100091f0:	8002cf26 	beq	r16,zero,10009d30 <___vfiprintf_internal_r+0x1498>
100091f4:	0027883a 	mov	r19,zero
100091f8:	0029883a 	mov	r20,zero
100091fc:	003f6106 	br	10008f84 <__alt_data_end+0xf8008f84>
10009200:	9cc03fcc 	andi	r19,r19,255
10009204:	b811883a 	mov	r8,r23
10009208:	9802e01e 	bne	r19,zero,10009d8c <___vfiprintf_internal_r+0x14f4>
1000920c:	8c400414 	ori	r17,r17,16
10009210:	8880080c 	andi	r2,r17,32
10009214:	1000641e 	bne	r2,zero,100093a8 <___vfiprintf_internal_r+0xb10>
10009218:	8880040c 	andi	r2,r17,16
1000921c:	1001c81e 	bne	r2,zero,10009940 <___vfiprintf_internal_r+0x10a8>
10009220:	8880100c 	andi	r2,r17,64
10009224:	d8001d85 	stb	zero,118(sp)
10009228:	1002281e 	bne	r2,zero,10009acc <___vfiprintf_internal_r+0x1234>
1000922c:	d9002217 	ldw	r4,136(sp)
10009230:	0029883a 	mov	r20,zero
10009234:	20800104 	addi	r2,r4,4
10009238:	24c00017 	ldw	r19,0(r4)
1000923c:	8001c60e 	bge	r16,zero,10009958 <___vfiprintf_internal_r+0x10c0>
10009240:	d8802215 	stw	r2,136(sp)
10009244:	002b883a 	mov	r21,zero
10009248:	9d04b03a 	or	r2,r19,r20
1000924c:	103f911e 	bne	r2,zero,10009094 <__alt_data_end+0xf8009094>
10009250:	00800044 	movi	r2,1
10009254:	10803fcc 	andi	r2,r2,255
10009258:	00c00044 	movi	r3,1
1000925c:	10c05f26 	beq	r2,r3,100093dc <___vfiprintf_internal_r+0xb44>
10009260:	00c00084 	movi	r3,2
10009264:	10ffe31e 	bne	r2,r3,100091f4 <__alt_data_end+0xf80091f4>
10009268:	0027883a 	mov	r19,zero
1000926c:	0029883a 	mov	r20,zero
10009270:	00015106 	br	100097b8 <___vfiprintf_internal_r+0xf20>
10009274:	9cc03fcc 	andi	r19,r19,255
10009278:	b811883a 	mov	r8,r23
1000927c:	9802c01e 	bne	r19,zero,10009d80 <___vfiprintf_internal_r+0x14e8>
10009280:	01440074 	movhi	r5,4097
10009284:	29466004 	addi	r5,r5,6528
10009288:	d9402615 	stw	r5,152(sp)
1000928c:	8880080c 	andi	r2,r17,32
10009290:	103f541e 	bne	r2,zero,10008fe4 <__alt_data_end+0xf8008fe4>
10009294:	8880040c 	andi	r2,r17,16
10009298:	1001f226 	beq	r2,zero,10009a64 <___vfiprintf_internal_r+0x11cc>
1000929c:	d9402217 	ldw	r5,136(sp)
100092a0:	0029883a 	mov	r20,zero
100092a4:	2cc00017 	ldw	r19,0(r5)
100092a8:	29400104 	addi	r5,r5,4
100092ac:	d9402215 	stw	r5,136(sp)
100092b0:	003f5106 	br	10008ff8 <__alt_data_end+0xf8008ff8>
100092b4:	d8c02217 	ldw	r3,136(sp)
100092b8:	b811883a 	mov	r8,r23
100092bc:	d8001d85 	stb	zero,118(sp)
100092c0:	1dc00017 	ldw	r23,0(r3)
100092c4:	1f000104 	addi	fp,r3,4
100092c8:	b8025926 	beq	r23,zero,10009c30 <___vfiprintf_internal_r+0x1398>
100092cc:	80023316 	blt	r16,zero,10009b9c <___vfiprintf_internal_r+0x1304>
100092d0:	800d883a 	mov	r6,r16
100092d4:	000b883a 	mov	r5,zero
100092d8:	b809883a 	mov	r4,r23
100092dc:	da002a15 	stw	r8,168(sp)
100092e0:	0006df00 	call	10006df0 <memchr>
100092e4:	da002a17 	ldw	r8,168(sp)
100092e8:	10026826 	beq	r2,zero,10009c8c <___vfiprintf_internal_r+0x13f4>
100092ec:	15e9c83a 	sub	r20,r2,r23
100092f0:	dd401d83 	ldbu	r21,118(sp)
100092f4:	df002215 	stw	fp,136(sp)
100092f8:	0021883a 	mov	r16,zero
100092fc:	003e6906 	br	10008ca4 <__alt_data_end+0xf8008ca4>
10009300:	9cc03fcc 	andi	r19,r19,255
10009304:	b811883a 	mov	r8,r23
10009308:	983fc126 	beq	r19,zero,10009210 <__alt_data_end+0xf8009210>
1000930c:	d8c02303 	ldbu	r3,140(sp)
10009310:	d8c01d85 	stb	r3,118(sp)
10009314:	003fbe06 	br	10009210 <__alt_data_end+0xf8009210>
10009318:	d9002217 	ldw	r4,136(sp)
1000931c:	d9402217 	ldw	r5,136(sp)
10009320:	21000017 	ldw	r4,0(r4)
10009324:	28800104 	addi	r2,r5,4
10009328:	d9002515 	stw	r4,148(sp)
1000932c:	203e3d16 	blt	r4,zero,10008c24 <__alt_data_end+0xf8008c24>
10009330:	d8802215 	stw	r2,136(sp)
10009334:	b0c00007 	ldb	r3,0(r22)
10009338:	003db406 	br	10008a0c <__alt_data_end+0xf8008a0c>
1000933c:	00c00ac4 	movi	r3,43
10009340:	d8c02305 	stb	r3,140(sp)
10009344:	04c00044 	movi	r19,1
10009348:	b0c00007 	ldb	r3,0(r22)
1000934c:	003daf06 	br	10008a0c <__alt_data_end+0xf8008a0c>
10009350:	b0c00007 	ldb	r3,0(r22)
10009354:	01000a84 	movi	r4,42
10009358:	b4000044 	addi	r16,r22,1
1000935c:	19025e26 	beq	r3,r4,10009cd8 <___vfiprintf_internal_r+0x1440>
10009360:	1f3ff404 	addi	fp,r3,-48
10009364:	0009883a 	mov	r4,zero
10009368:	af025236 	bltu	r21,fp,10009cb4 <___vfiprintf_internal_r+0x141c>
1000936c:	01400284 	movi	r5,10
10009370:	00016040 	call	10001604 <__mulsi3>
10009374:	80c00007 	ldb	r3,0(r16)
10009378:	1709883a 	add	r4,r2,fp
1000937c:	85800044 	addi	r22,r16,1
10009380:	1f3ff404 	addi	fp,r3,-48
10009384:	b021883a 	mov	r16,r22
10009388:	af3ff82e 	bgeu	r21,fp,1000936c <__alt_data_end+0xf800936c>
1000938c:	2021883a 	mov	r16,r4
10009390:	203d9f0e 	bge	r4,zero,10008a10 <__alt_data_end+0xf8008a10>
10009394:	043fffc4 	movi	r16,-1
10009398:	003d9d06 	br	10008a10 <__alt_data_end+0xf8008a10>
1000939c:	8c401014 	ori	r17,r17,64
100093a0:	b0c00007 	ldb	r3,0(r22)
100093a4:	003d9906 	br	10008a0c <__alt_data_end+0xf8008a0c>
100093a8:	d9002217 	ldw	r4,136(sp)
100093ac:	d8001d85 	stb	zero,118(sp)
100093b0:	20c00204 	addi	r3,r4,8
100093b4:	24c00017 	ldw	r19,0(r4)
100093b8:	25000117 	ldw	r20,4(r4)
100093bc:	8001e716 	blt	r16,zero,10009b5c <___vfiprintf_internal_r+0x12c4>
100093c0:	013fdfc4 	movi	r4,-129
100093c4:	9d04b03a 	or	r2,r19,r20
100093c8:	d8c02215 	stw	r3,136(sp)
100093cc:	8922703a 	and	r17,r17,r4
100093d0:	002b883a 	mov	r21,zero
100093d4:	103f2f1e 	bne	r2,zero,10009094 <__alt_data_end+0xf8009094>
100093d8:	803e2f26 	beq	r16,zero,10008c98 <__alt_data_end+0xf8008c98>
100093dc:	0027883a 	mov	r19,zero
100093e0:	9cc00c04 	addi	r19,r19,48
100093e4:	dcc019c5 	stb	r19,103(sp)
100093e8:	dd002817 	ldw	r20,160(sp)
100093ec:	ddc019c4 	addi	r23,sp,103
100093f0:	003e2c06 	br	10008ca4 <__alt_data_end+0xf8008ca4>
100093f4:	9cc03fcc 	andi	r19,r19,255
100093f8:	b811883a 	mov	r8,r23
100093fc:	9802571e 	bne	r19,zero,10009d5c <___vfiprintf_internal_r+0x14c4>
10009400:	18005726 	beq	r3,zero,10009560 <___vfiprintf_internal_r+0xcc8>
10009404:	04c00044 	movi	r19,1
10009408:	d8c01005 	stb	r3,64(sp)
1000940c:	d8001d85 	stb	zero,118(sp)
10009410:	9829883a 	mov	r20,r19
10009414:	ddc01004 	addi	r23,sp,64
10009418:	003f0a06 	br	10009044 <__alt_data_end+0xf8009044>
1000941c:	d9402017 	ldw	r5,128(sp)
10009420:	d9002117 	ldw	r4,132(sp)
10009424:	d9801a04 	addi	r6,sp,104
10009428:	da802a15 	stw	r10,168(sp)
1000942c:	00087840 	call	10008784 <__sprint_r.part.0>
10009430:	da802a17 	ldw	r10,168(sp)
10009434:	1000501e 	bne	r2,zero,10009578 <___vfiprintf_internal_r+0xce0>
10009438:	d9801b17 	ldw	r6,108(sp)
1000943c:	d8801c17 	ldw	r2,112(sp)
10009440:	d811883a 	mov	r8,sp
10009444:	31000044 	addi	r4,r6,1
10009448:	003e3606 	br	10008d24 <__alt_data_end+0xf8008d24>
1000944c:	d9001b17 	ldw	r4,108(sp)
10009450:	d8801c17 	ldw	r2,112(sp)
10009454:	21400044 	addi	r5,r4,1
10009458:	d9801d87 	ldb	r6,118(sp)
1000945c:	303e5226 	beq	r6,zero,10008da8 <__alt_data_end+0xf8008da8>
10009460:	01800044 	movi	r6,1
10009464:	d9001d84 	addi	r4,sp,118
10009468:	1185883a 	add	r2,r2,r6
1000946c:	41000015 	stw	r4,0(r8)
10009470:	41800115 	stw	r6,4(r8)
10009474:	d8801c15 	stw	r2,112(sp)
10009478:	d9401b15 	stw	r5,108(sp)
1000947c:	010001c4 	movi	r4,7
10009480:	2140b00e 	bge	r4,r5,10009744 <___vfiprintf_internal_r+0xeac>
10009484:	1000f61e 	bne	r2,zero,10009860 <___vfiprintf_internal_r+0xfc8>
10009488:	3800b31e 	bne	r7,zero,10009758 <___vfiprintf_internal_r+0xec0>
1000948c:	0009883a 	mov	r4,zero
10009490:	300b883a 	mov	r5,r6
10009494:	d811883a 	mov	r8,sp
10009498:	01802004 	movi	r6,128
1000949c:	19be5226 	beq	r3,r6,10008de8 <__alt_data_end+0xf8008de8>
100094a0:	8521c83a 	sub	r16,r16,r20
100094a4:	043e790e 	bge	zero,r16,10008e8c <__alt_data_end+0xf8008e8c>
100094a8:	05400404 	movi	r21,16
100094ac:	ac01b00e 	bge	r21,r16,10009b70 <___vfiprintf_internal_r+0x12d8>
100094b0:	01440074 	movhi	r5,4097
100094b4:	2946c504 	addi	r5,r5,6932
100094b8:	d9402315 	stw	r5,140(sp)
100094bc:	070001c4 	movi	fp,7
100094c0:	00000506 	br	100094d8 <___vfiprintf_internal_r+0xc40>
100094c4:	21400084 	addi	r5,r4,2
100094c8:	42000204 	addi	r8,r8,8
100094cc:	1809883a 	mov	r4,r3
100094d0:	843ffc04 	addi	r16,r16,-16
100094d4:	ac000d0e 	bge	r21,r16,1000950c <___vfiprintf_internal_r+0xc74>
100094d8:	10800404 	addi	r2,r2,16
100094dc:	20c00044 	addi	r3,r4,1
100094e0:	44800015 	stw	r18,0(r8)
100094e4:	45400115 	stw	r21,4(r8)
100094e8:	d8801c15 	stw	r2,112(sp)
100094ec:	d8c01b15 	stw	r3,108(sp)
100094f0:	e0fff40e 	bge	fp,r3,100094c4 <__alt_data_end+0xf80094c4>
100094f4:	1000101e 	bne	r2,zero,10009538 <___vfiprintf_internal_r+0xca0>
100094f8:	843ffc04 	addi	r16,r16,-16
100094fc:	01400044 	movi	r5,1
10009500:	0009883a 	mov	r4,zero
10009504:	d811883a 	mov	r8,sp
10009508:	ac3ff316 	blt	r21,r16,100094d8 <__alt_data_end+0xf80094d8>
1000950c:	d8c02317 	ldw	r3,140(sp)
10009510:	1405883a 	add	r2,r2,r16
10009514:	44000115 	stw	r16,4(r8)
10009518:	40c00015 	stw	r3,0(r8)
1000951c:	d8801c15 	stw	r2,112(sp)
10009520:	d9401b15 	stw	r5,108(sp)
10009524:	00c001c4 	movi	r3,7
10009528:	19401916 	blt	r3,r5,10009590 <___vfiprintf_internal_r+0xcf8>
1000952c:	42000204 	addi	r8,r8,8
10009530:	29400044 	addi	r5,r5,1
10009534:	003e5506 	br	10008e8c <__alt_data_end+0xf8008e8c>
10009538:	d9402017 	ldw	r5,128(sp)
1000953c:	d9002117 	ldw	r4,132(sp)
10009540:	d9801a04 	addi	r6,sp,104
10009544:	00087840 	call	10008784 <__sprint_r.part.0>
10009548:	10000b1e 	bne	r2,zero,10009578 <___vfiprintf_internal_r+0xce0>
1000954c:	d9001b17 	ldw	r4,108(sp)
10009550:	d8801c17 	ldw	r2,112(sp)
10009554:	d811883a 	mov	r8,sp
10009558:	21400044 	addi	r5,r4,1
1000955c:	003fdc06 	br	100094d0 <__alt_data_end+0xf80094d0>
10009560:	d8801c17 	ldw	r2,112(sp)
10009564:	10000426 	beq	r2,zero,10009578 <___vfiprintf_internal_r+0xce0>
10009568:	d9402017 	ldw	r5,128(sp)
1000956c:	d9002117 	ldw	r4,132(sp)
10009570:	d9801a04 	addi	r6,sp,104
10009574:	00087840 	call	10008784 <__sprint_r.part.0>
10009578:	d9402017 	ldw	r5,128(sp)
1000957c:	2880030b 	ldhu	r2,12(r5)
10009580:	1080100c 	andi	r2,r2,64
10009584:	10014d1e 	bne	r2,zero,10009abc <___vfiprintf_internal_r+0x1224>
10009588:	d8802417 	ldw	r2,144(sp)
1000958c:	003d9706 	br	10008bec <__alt_data_end+0xf8008bec>
10009590:	1000d21e 	bne	r2,zero,100098dc <___vfiprintf_internal_r+0x1044>
10009594:	00c00044 	movi	r3,1
10009598:	a005883a 	mov	r2,r20
1000959c:	ddc00015 	stw	r23,0(sp)
100095a0:	dd000115 	stw	r20,4(sp)
100095a4:	dd001c15 	stw	r20,112(sp)
100095a8:	d8c01b15 	stw	r3,108(sp)
100095ac:	d811883a 	mov	r8,sp
100095b0:	42000204 	addi	r8,r8,8
100095b4:	8c40010c 	andi	r17,r17,4
100095b8:	88004026 	beq	r17,zero,100096bc <___vfiprintf_internal_r+0xe24>
100095bc:	d9002517 	ldw	r4,148(sp)
100095c0:	24e3c83a 	sub	r17,r4,r19
100095c4:	04403d0e 	bge	zero,r17,100096bc <___vfiprintf_internal_r+0xe24>
100095c8:	04000404 	movi	r16,16
100095cc:	8441a90e 	bge	r16,r17,10009c74 <___vfiprintf_internal_r+0x13dc>
100095d0:	00c40074 	movhi	r3,4097
100095d4:	18c6c904 	addi	r3,r3,6948
100095d8:	d9001b17 	ldw	r4,108(sp)
100095dc:	d8c02315 	stw	r3,140(sp)
100095e0:	050001c4 	movi	r20,7
100095e4:	dd402117 	ldw	r21,132(sp)
100095e8:	ddc02017 	ldw	r23,128(sp)
100095ec:	00000506 	br	10009604 <___vfiprintf_internal_r+0xd6c>
100095f0:	21400084 	addi	r5,r4,2
100095f4:	42000204 	addi	r8,r8,8
100095f8:	1809883a 	mov	r4,r3
100095fc:	8c7ffc04 	addi	r17,r17,-16
10009600:	84400f0e 	bge	r16,r17,10009640 <___vfiprintf_internal_r+0xda8>
10009604:	01440074 	movhi	r5,4097
10009608:	10800404 	addi	r2,r2,16
1000960c:	20c00044 	addi	r3,r4,1
10009610:	2946c904 	addi	r5,r5,6948
10009614:	41400015 	stw	r5,0(r8)
10009618:	44000115 	stw	r16,4(r8)
1000961c:	d8801c15 	stw	r2,112(sp)
10009620:	d8c01b15 	stw	r3,108(sp)
10009624:	a0fff20e 	bge	r20,r3,100095f0 <__alt_data_end+0xf80095f0>
10009628:	1000141e 	bne	r2,zero,1000967c <___vfiprintf_internal_r+0xde4>
1000962c:	8c7ffc04 	addi	r17,r17,-16
10009630:	01400044 	movi	r5,1
10009634:	0009883a 	mov	r4,zero
10009638:	d811883a 	mov	r8,sp
1000963c:	847ff116 	blt	r16,r17,10009604 <__alt_data_end+0xf8009604>
10009640:	d8c02317 	ldw	r3,140(sp)
10009644:	1445883a 	add	r2,r2,r17
10009648:	44400115 	stw	r17,4(r8)
1000964c:	40c00015 	stw	r3,0(r8)
10009650:	d8801c15 	stw	r2,112(sp)
10009654:	d9401b15 	stw	r5,108(sp)
10009658:	00c001c4 	movi	r3,7
1000965c:	1940170e 	bge	r3,r5,100096bc <___vfiprintf_internal_r+0xe24>
10009660:	1000101e 	bne	r2,zero,100096a4 <___vfiprintf_internal_r+0xe0c>
10009664:	d8802517 	ldw	r2,148(sp)
10009668:	14c11616 	blt	r2,r19,10009ac4 <___vfiprintf_internal_r+0x122c>
1000966c:	d9002417 	ldw	r4,144(sp)
10009670:	2089883a 	add	r4,r4,r2
10009674:	d9002415 	stw	r4,144(sp)
10009678:	003e1806 	br	10008edc <__alt_data_end+0xf8008edc>
1000967c:	d9801a04 	addi	r6,sp,104
10009680:	b80b883a 	mov	r5,r23
10009684:	a809883a 	mov	r4,r21
10009688:	00087840 	call	10008784 <__sprint_r.part.0>
1000968c:	103fba1e 	bne	r2,zero,10009578 <__alt_data_end+0xf8009578>
10009690:	d9001b17 	ldw	r4,108(sp)
10009694:	d8801c17 	ldw	r2,112(sp)
10009698:	d811883a 	mov	r8,sp
1000969c:	21400044 	addi	r5,r4,1
100096a0:	003fd606 	br	100095fc <__alt_data_end+0xf80095fc>
100096a4:	d9402017 	ldw	r5,128(sp)
100096a8:	d9002117 	ldw	r4,132(sp)
100096ac:	d9801a04 	addi	r6,sp,104
100096b0:	00087840 	call	10008784 <__sprint_r.part.0>
100096b4:	103fb01e 	bne	r2,zero,10009578 <__alt_data_end+0xf8009578>
100096b8:	d8801c17 	ldw	r2,112(sp)
100096bc:	d8c02517 	ldw	r3,148(sp)
100096c0:	1cc0010e 	bge	r3,r19,100096c8 <___vfiprintf_internal_r+0xe30>
100096c4:	9807883a 	mov	r3,r19
100096c8:	d9002417 	ldw	r4,144(sp)
100096cc:	20c9883a 	add	r4,r4,r3
100096d0:	d9002415 	stw	r4,144(sp)
100096d4:	103e0126 	beq	r2,zero,10008edc <__alt_data_end+0xf8008edc>
100096d8:	d9402017 	ldw	r5,128(sp)
100096dc:	d9002117 	ldw	r4,132(sp)
100096e0:	d9801a04 	addi	r6,sp,104
100096e4:	00087840 	call	10008784 <__sprint_r.part.0>
100096e8:	103dfc26 	beq	r2,zero,10008edc <__alt_data_end+0xf8008edc>
100096ec:	003fa206 	br	10009578 <__alt_data_end+0xf8009578>
100096f0:	d9402017 	ldw	r5,128(sp)
100096f4:	d9002117 	ldw	r4,132(sp)
100096f8:	d9801a04 	addi	r6,sp,104
100096fc:	d9c02b15 	stw	r7,172(sp)
10009700:	00087840 	call	10008784 <__sprint_r.part.0>
10009704:	d9c02b17 	ldw	r7,172(sp)
10009708:	103f9b1e 	bne	r2,zero,10009578 <__alt_data_end+0xf8009578>
1000970c:	d9001b17 	ldw	r4,108(sp)
10009710:	d8801c17 	ldw	r2,112(sp)
10009714:	d811883a 	mov	r8,sp
10009718:	21800044 	addi	r6,r4,1
1000971c:	003dbf06 	br	10008e1c <__alt_data_end+0xf8008e1c>
10009720:	1000d81e 	bne	r2,zero,10009a84 <___vfiprintf_internal_r+0x11ec>
10009724:	d9001d87 	ldb	r4,118(sp)
10009728:	20000a26 	beq	r4,zero,10009754 <___vfiprintf_internal_r+0xebc>
1000972c:	00800044 	movi	r2,1
10009730:	d9001d84 	addi	r4,sp,118
10009734:	100b883a 	mov	r5,r2
10009738:	d9000015 	stw	r4,0(sp)
1000973c:	d8800115 	stw	r2,4(sp)
10009740:	d811883a 	mov	r8,sp
10009744:	2809883a 	mov	r4,r5
10009748:	42000204 	addi	r8,r8,8
1000974c:	29400044 	addi	r5,r5,1
10009750:	003d9506 	br	10008da8 <__alt_data_end+0xf8008da8>
10009754:	3800fd26 	beq	r7,zero,10009b4c <___vfiprintf_internal_r+0x12b4>
10009758:	00800084 	movi	r2,2
1000975c:	d9001d04 	addi	r4,sp,116
10009760:	d9000015 	stw	r4,0(sp)
10009764:	d8800115 	stw	r2,4(sp)
10009768:	01400044 	movi	r5,1
1000976c:	d811883a 	mov	r8,sp
10009770:	2809883a 	mov	r4,r5
10009774:	42000204 	addi	r8,r8,8
10009778:	29400044 	addi	r5,r5,1
1000977c:	003f4606 	br	10009498 <__alt_data_end+0xf8009498>
10009780:	d8802517 	ldw	r2,148(sp)
10009784:	14c0010e 	bge	r2,r19,1000978c <___vfiprintf_internal_r+0xef4>
10009788:	9805883a 	mov	r2,r19
1000978c:	d9402417 	ldw	r5,144(sp)
10009790:	288b883a 	add	r5,r5,r2
10009794:	d9402415 	stw	r5,144(sp)
10009798:	003dd006 	br	10008edc <__alt_data_end+0xf8008edc>
1000979c:	d8001d85 	stb	zero,118(sp)
100097a0:	80005d16 	blt	r16,zero,10009918 <___vfiprintf_internal_r+0x1080>
100097a4:	00ffdfc4 	movi	r3,-129
100097a8:	9d04b03a 	or	r2,r19,r20
100097ac:	88e2703a 	and	r17,r17,r3
100097b0:	103d3726 	beq	r2,zero,10008c90 <__alt_data_end+0xf8008c90>
100097b4:	002b883a 	mov	r21,zero
100097b8:	d9002617 	ldw	r4,152(sp)
100097bc:	ddc01a04 	addi	r23,sp,104
100097c0:	988003cc 	andi	r2,r19,15
100097c4:	a006973a 	slli	r3,r20,28
100097c8:	2085883a 	add	r2,r4,r2
100097cc:	9826d13a 	srli	r19,r19,4
100097d0:	10800003 	ldbu	r2,0(r2)
100097d4:	a028d13a 	srli	r20,r20,4
100097d8:	bdffffc4 	addi	r23,r23,-1
100097dc:	1ce6b03a 	or	r19,r3,r19
100097e0:	b8800005 	stb	r2,0(r23)
100097e4:	9d04b03a 	or	r2,r19,r20
100097e8:	103ff51e 	bne	r2,zero,100097c0 <__alt_data_end+0xf80097c0>
100097ec:	d8801e17 	ldw	r2,120(sp)
100097f0:	15e9c83a 	sub	r20,r2,r23
100097f4:	003d2b06 	br	10008ca4 <__alt_data_end+0xf8008ca4>
100097f8:	d9402017 	ldw	r5,128(sp)
100097fc:	d9002117 	ldw	r4,132(sp)
10009800:	d9801a04 	addi	r6,sp,104
10009804:	00087840 	call	10008784 <__sprint_r.part.0>
10009808:	103f5b1e 	bne	r2,zero,10009578 <__alt_data_end+0xf8009578>
1000980c:	d8801c17 	ldw	r2,112(sp)
10009810:	d811883a 	mov	r8,sp
10009814:	003f6706 	br	100095b4 <__alt_data_end+0xf80095b4>
10009818:	d9402017 	ldw	r5,128(sp)
1000981c:	d9002117 	ldw	r4,132(sp)
10009820:	d9801a04 	addi	r6,sp,104
10009824:	00087840 	call	10008784 <__sprint_r.part.0>
10009828:	103f531e 	bne	r2,zero,10009578 <__alt_data_end+0xf8009578>
1000982c:	d811883a 	mov	r8,sp
10009830:	003cd906 	br	10008b98 <__alt_data_end+0xf8008b98>
10009834:	10803fcc 	andi	r2,r2,255
10009838:	1080201c 	xori	r2,r2,128
1000983c:	10bfe004 	addi	r2,r2,-128
10009840:	00c00c04 	movi	r3,48
10009844:	10ffe926 	beq	r2,r3,100097ec <__alt_data_end+0xf80097ec>
10009848:	b8ffffc5 	stb	r3,-1(r23)
1000984c:	d8c01e17 	ldw	r3,120(sp)
10009850:	b8bfffc4 	addi	r2,r23,-1
10009854:	102f883a 	mov	r23,r2
10009858:	18a9c83a 	sub	r20,r3,r2
1000985c:	003d1106 	br	10008ca4 <__alt_data_end+0xf8008ca4>
10009860:	d9402017 	ldw	r5,128(sp)
10009864:	d9002117 	ldw	r4,132(sp)
10009868:	d9801a04 	addi	r6,sp,104
1000986c:	d8c02a15 	stw	r3,168(sp)
10009870:	d9c02b15 	stw	r7,172(sp)
10009874:	00087840 	call	10008784 <__sprint_r.part.0>
10009878:	d8c02a17 	ldw	r3,168(sp)
1000987c:	d9c02b17 	ldw	r7,172(sp)
10009880:	103f3d1e 	bne	r2,zero,10009578 <__alt_data_end+0xf8009578>
10009884:	d9001b17 	ldw	r4,108(sp)
10009888:	d8801c17 	ldw	r2,112(sp)
1000988c:	d811883a 	mov	r8,sp
10009890:	21400044 	addi	r5,r4,1
10009894:	003d4406 	br	10008da8 <__alt_data_end+0xf8008da8>
10009898:	d9402017 	ldw	r5,128(sp)
1000989c:	d9002117 	ldw	r4,132(sp)
100098a0:	d9801a04 	addi	r6,sp,104
100098a4:	d8c02a15 	stw	r3,168(sp)
100098a8:	00087840 	call	10008784 <__sprint_r.part.0>
100098ac:	d8c02a17 	ldw	r3,168(sp)
100098b0:	103f311e 	bne	r2,zero,10009578 <__alt_data_end+0xf8009578>
100098b4:	d9001b17 	ldw	r4,108(sp)
100098b8:	d8801c17 	ldw	r2,112(sp)
100098bc:	d811883a 	mov	r8,sp
100098c0:	21400044 	addi	r5,r4,1
100098c4:	003ef406 	br	10009498 <__alt_data_end+0xf8009498>
100098c8:	1000bd1e 	bne	r2,zero,10009bc0 <___vfiprintf_internal_r+0x1328>
100098cc:	01400044 	movi	r5,1
100098d0:	0009883a 	mov	r4,zero
100098d4:	d811883a 	mov	r8,sp
100098d8:	003ef106 	br	100094a0 <__alt_data_end+0xf80094a0>
100098dc:	d9402017 	ldw	r5,128(sp)
100098e0:	d9002117 	ldw	r4,132(sp)
100098e4:	d9801a04 	addi	r6,sp,104
100098e8:	00087840 	call	10008784 <__sprint_r.part.0>
100098ec:	103f221e 	bne	r2,zero,10009578 <__alt_data_end+0xf8009578>
100098f0:	d9401b17 	ldw	r5,108(sp)
100098f4:	d8801c17 	ldw	r2,112(sp)
100098f8:	d811883a 	mov	r8,sp
100098fc:	29400044 	addi	r5,r5,1
10009900:	003d6206 	br	10008e8c <__alt_data_end+0xf8008e8c>
10009904:	01440074 	movhi	r5,4097
10009908:	29466504 	addi	r5,r5,6548
1000990c:	d9402615 	stw	r5,152(sp)
10009910:	d8c02215 	stw	r3,136(sp)
10009914:	1023883a 	mov	r17,r2
10009918:	9d04b03a 	or	r2,r19,r20
1000991c:	103fa51e 	bne	r2,zero,100097b4 <__alt_data_end+0xf80097b4>
10009920:	002b883a 	mov	r21,zero
10009924:	00800084 	movi	r2,2
10009928:	003e4a06 	br	10009254 <__alt_data_end+0xf8009254>
1000992c:	01440074 	movhi	r5,4097
10009930:	29466504 	addi	r5,r5,6548
10009934:	002b883a 	mov	r21,zero
10009938:	d9402615 	stw	r5,152(sp)
1000993c:	003f9e06 	br	100097b8 <__alt_data_end+0xf80097b8>
10009940:	d9402217 	ldw	r5,136(sp)
10009944:	d8001d85 	stb	zero,118(sp)
10009948:	0029883a 	mov	r20,zero
1000994c:	28800104 	addi	r2,r5,4
10009950:	2cc00017 	ldw	r19,0(r5)
10009954:	803e3a16 	blt	r16,zero,10009240 <__alt_data_end+0xf8009240>
10009958:	00ffdfc4 	movi	r3,-129
1000995c:	d8802215 	stw	r2,136(sp)
10009960:	88e2703a 	and	r17,r17,r3
10009964:	002b883a 	mov	r21,zero
10009968:	983e9b26 	beq	r19,zero,100093d8 <__alt_data_end+0xf80093d8>
1000996c:	00800244 	movi	r2,9
10009970:	14fdc936 	bltu	r2,r19,10009098 <__alt_data_end+0xf8009098>
10009974:	003e9a06 	br	100093e0 <__alt_data_end+0xf80093e0>
10009978:	00800c04 	movi	r2,48
1000997c:	d8c01d45 	stb	r3,117(sp)
10009980:	d8801d05 	stb	r2,116(sp)
10009984:	d8001d85 	stb	zero,118(sp)
10009988:	88c00094 	ori	r3,r17,2
1000998c:	80009c16 	blt	r16,zero,10009c00 <___vfiprintf_internal_r+0x1368>
10009990:	00bfdfc4 	movi	r2,-129
10009994:	88a2703a 	and	r17,r17,r2
10009998:	8c400094 	ori	r17,r17,2
1000999c:	002b883a 	mov	r21,zero
100099a0:	003f8506 	br	100097b8 <__alt_data_end+0xf80097b8>
100099a4:	b029883a 	mov	r20,r22
100099a8:	003c0b06 	br	100089d8 <__alt_data_end+0xf80089d8>
100099ac:	04e7c83a 	sub	r19,zero,r19
100099b0:	05400b44 	movi	r21,45
100099b4:	9804c03a 	cmpne	r2,r19,zero
100099b8:	0529c83a 	sub	r20,zero,r20
100099bc:	dd401d85 	stb	r21,118(sp)
100099c0:	a0a9c83a 	sub	r20,r20,r2
100099c4:	80009716 	blt	r16,zero,10009c24 <___vfiprintf_internal_r+0x138c>
100099c8:	00bfdfc4 	movi	r2,-129
100099cc:	88a2703a 	and	r17,r17,r2
100099d0:	003db006 	br	10009094 <__alt_data_end+0xf8009094>
100099d4:	b0c00007 	ldb	r3,0(r22)
100099d8:	003c0c06 	br	10008a0c <__alt_data_end+0xf8008a0c>
100099dc:	8880100c 	andi	r2,r17,64
100099e0:	d8001d85 	stb	zero,118(sp)
100099e4:	1000461e 	bne	r2,zero,10009b00 <___vfiprintf_internal_r+0x1268>
100099e8:	d9002217 	ldw	r4,136(sp)
100099ec:	0029883a 	mov	r20,zero
100099f0:	20800104 	addi	r2,r4,4
100099f4:	24c00017 	ldw	r19,0(r4)
100099f8:	803df80e 	bge	r16,zero,100091dc <__alt_data_end+0xf80091dc>
100099fc:	9d06b03a 	or	r3,r19,r20
10009a00:	d8802215 	stw	r2,136(sp)
10009a04:	183d5e1e 	bne	r3,zero,10008f80 <__alt_data_end+0xf8008f80>
10009a08:	002b883a 	mov	r21,zero
10009a0c:	0005883a 	mov	r2,zero
10009a10:	003e1006 	br	10009254 <__alt_data_end+0xf8009254>
10009a14:	8880040c 	andi	r2,r17,16
10009a18:	1000321e 	bne	r2,zero,10009ae4 <___vfiprintf_internal_r+0x124c>
10009a1c:	8c40100c 	andi	r17,r17,64
10009a20:	88008d26 	beq	r17,zero,10009c58 <___vfiprintf_internal_r+0x13c0>
10009a24:	d9402217 	ldw	r5,136(sp)
10009a28:	d8c02417 	ldw	r3,144(sp)
10009a2c:	28800017 	ldw	r2,0(r5)
10009a30:	29400104 	addi	r5,r5,4
10009a34:	d9402215 	stw	r5,136(sp)
10009a38:	10c0000d 	sth	r3,0(r2)
10009a3c:	003bca06 	br	10008968 <__alt_data_end+0xf8008968>
10009a40:	8880100c 	andi	r2,r17,64
10009a44:	10003a26 	beq	r2,zero,10009b30 <___vfiprintf_internal_r+0x1298>
10009a48:	d8802217 	ldw	r2,136(sp)
10009a4c:	14c0000f 	ldh	r19,0(r2)
10009a50:	10800104 	addi	r2,r2,4
10009a54:	d8802215 	stw	r2,136(sp)
10009a58:	9829d7fa 	srai	r20,r19,31
10009a5c:	a005883a 	mov	r2,r20
10009a60:	003d8506 	br	10009078 <__alt_data_end+0xf8009078>
10009a64:	8880100c 	andi	r2,r17,64
10009a68:	10002b26 	beq	r2,zero,10009b18 <___vfiprintf_internal_r+0x1280>
10009a6c:	d8802217 	ldw	r2,136(sp)
10009a70:	0029883a 	mov	r20,zero
10009a74:	14c0000b 	ldhu	r19,0(r2)
10009a78:	10800104 	addi	r2,r2,4
10009a7c:	d8802215 	stw	r2,136(sp)
10009a80:	003d5d06 	br	10008ff8 <__alt_data_end+0xf8008ff8>
10009a84:	d9402017 	ldw	r5,128(sp)
10009a88:	d9002117 	ldw	r4,132(sp)
10009a8c:	d9801a04 	addi	r6,sp,104
10009a90:	d8c02a15 	stw	r3,168(sp)
10009a94:	d9c02b15 	stw	r7,172(sp)
10009a98:	00087840 	call	10008784 <__sprint_r.part.0>
10009a9c:	d8c02a17 	ldw	r3,168(sp)
10009aa0:	d9c02b17 	ldw	r7,172(sp)
10009aa4:	103eb41e 	bne	r2,zero,10009578 <__alt_data_end+0xf8009578>
10009aa8:	d9001b17 	ldw	r4,108(sp)
10009aac:	d8801c17 	ldw	r2,112(sp)
10009ab0:	d811883a 	mov	r8,sp
10009ab4:	21400044 	addi	r5,r4,1
10009ab8:	003e6706 	br	10009458 <__alt_data_end+0xf8009458>
10009abc:	00bfffc4 	movi	r2,-1
10009ac0:	003c4a06 	br	10008bec <__alt_data_end+0xf8008bec>
10009ac4:	9805883a 	mov	r2,r19
10009ac8:	003ee806 	br	1000966c <__alt_data_end+0xf800966c>
10009acc:	d8c02217 	ldw	r3,136(sp)
10009ad0:	0029883a 	mov	r20,zero
10009ad4:	18800104 	addi	r2,r3,4
10009ad8:	1cc0000b 	ldhu	r19,0(r3)
10009adc:	803f9e0e 	bge	r16,zero,10009958 <__alt_data_end+0xf8009958>
10009ae0:	003dd706 	br	10009240 <__alt_data_end+0xf8009240>
10009ae4:	d8c02217 	ldw	r3,136(sp)
10009ae8:	d9002417 	ldw	r4,144(sp)
10009aec:	18800017 	ldw	r2,0(r3)
10009af0:	18c00104 	addi	r3,r3,4
10009af4:	d8c02215 	stw	r3,136(sp)
10009af8:	11000015 	stw	r4,0(r2)
10009afc:	003b9a06 	br	10008968 <__alt_data_end+0xf8008968>
10009b00:	d8c02217 	ldw	r3,136(sp)
10009b04:	0029883a 	mov	r20,zero
10009b08:	18800104 	addi	r2,r3,4
10009b0c:	1cc0000b 	ldhu	r19,0(r3)
10009b10:	803db20e 	bge	r16,zero,100091dc <__alt_data_end+0xf80091dc>
10009b14:	003fb906 	br	100099fc <__alt_data_end+0xf80099fc>
10009b18:	d9002217 	ldw	r4,136(sp)
10009b1c:	0029883a 	mov	r20,zero
10009b20:	24c00017 	ldw	r19,0(r4)
10009b24:	21000104 	addi	r4,r4,4
10009b28:	d9002215 	stw	r4,136(sp)
10009b2c:	003d3206 	br	10008ff8 <__alt_data_end+0xf8008ff8>
10009b30:	d8c02217 	ldw	r3,136(sp)
10009b34:	1cc00017 	ldw	r19,0(r3)
10009b38:	18c00104 	addi	r3,r3,4
10009b3c:	d8c02215 	stw	r3,136(sp)
10009b40:	9829d7fa 	srai	r20,r19,31
10009b44:	a005883a 	mov	r2,r20
10009b48:	003d4b06 	br	10009078 <__alt_data_end+0xf8009078>
10009b4c:	0009883a 	mov	r4,zero
10009b50:	01400044 	movi	r5,1
10009b54:	d811883a 	mov	r8,sp
10009b58:	003e4f06 	br	10009498 <__alt_data_end+0xf8009498>
10009b5c:	d8c02215 	stw	r3,136(sp)
10009b60:	002b883a 	mov	r21,zero
10009b64:	003db806 	br	10009248 <__alt_data_end+0xf8009248>
10009b68:	d811883a 	mov	r8,sp
10009b6c:	003e9606 	br	100095c8 <__alt_data_end+0xf80095c8>
10009b70:	01040074 	movhi	r4,4097
10009b74:	2106c504 	addi	r4,r4,6932
10009b78:	d9002315 	stw	r4,140(sp)
10009b7c:	003e6306 	br	1000950c <__alt_data_end+0xf800950c>
10009b80:	b0c00043 	ldbu	r3,1(r22)
10009b84:	8c400814 	ori	r17,r17,32
10009b88:	b5800044 	addi	r22,r22,1
10009b8c:	18c03fcc 	andi	r3,r3,255
10009b90:	18c0201c 	xori	r3,r3,128
10009b94:	18ffe004 	addi	r3,r3,-128
10009b98:	003b9c06 	br	10008a0c <__alt_data_end+0xf8008a0c>
10009b9c:	b809883a 	mov	r4,r23
10009ba0:	da002a15 	stw	r8,168(sp)
10009ba4:	00086ec0 	call	100086ec <strlen>
10009ba8:	1029883a 	mov	r20,r2
10009bac:	dd401d83 	ldbu	r21,118(sp)
10009bb0:	df002215 	stw	fp,136(sp)
10009bb4:	0021883a 	mov	r16,zero
10009bb8:	da002a17 	ldw	r8,168(sp)
10009bbc:	003c3906 	br	10008ca4 <__alt_data_end+0xf8008ca4>
10009bc0:	d9402017 	ldw	r5,128(sp)
10009bc4:	d9002117 	ldw	r4,132(sp)
10009bc8:	d9801a04 	addi	r6,sp,104
10009bcc:	00087840 	call	10008784 <__sprint_r.part.0>
10009bd0:	103e691e 	bne	r2,zero,10009578 <__alt_data_end+0xf8009578>
10009bd4:	d9001b17 	ldw	r4,108(sp)
10009bd8:	d8801c17 	ldw	r2,112(sp)
10009bdc:	d811883a 	mov	r8,sp
10009be0:	21400044 	addi	r5,r4,1
10009be4:	003e2e06 	br	100094a0 <__alt_data_end+0xf80094a0>
10009be8:	01040074 	movhi	r4,4097
10009bec:	2106c904 	addi	r4,r4,6948
10009bf0:	d9002315 	stw	r4,140(sp)
10009bf4:	d9001b17 	ldw	r4,108(sp)
10009bf8:	21000044 	addi	r4,r4,1
10009bfc:	003c5e06 	br	10008d78 <__alt_data_end+0xf8008d78>
10009c00:	002b883a 	mov	r21,zero
10009c04:	00800084 	movi	r2,2
10009c08:	10803fcc 	andi	r2,r2,255
10009c0c:	01000044 	movi	r4,1
10009c10:	11002b26 	beq	r2,r4,10009cc0 <___vfiprintf_internal_r+0x1428>
10009c14:	01000084 	movi	r4,2
10009c18:	11002b1e 	bne	r2,r4,10009cc8 <___vfiprintf_internal_r+0x1430>
10009c1c:	1823883a 	mov	r17,r3
10009c20:	003ee506 	br	100097b8 <__alt_data_end+0xf80097b8>
10009c24:	8807883a 	mov	r3,r17
10009c28:	00800044 	movi	r2,1
10009c2c:	003ff606 	br	10009c08 <__alt_data_end+0xf8009c08>
10009c30:	00800184 	movi	r2,6
10009c34:	1400012e 	bgeu	r2,r16,10009c3c <___vfiprintf_internal_r+0x13a4>
10009c38:	1021883a 	mov	r16,r2
10009c3c:	8029883a 	mov	r20,r16
10009c40:	8027883a 	mov	r19,r16
10009c44:	80002216 	blt	r16,zero,10009cd0 <___vfiprintf_internal_r+0x1438>
10009c48:	05c40074 	movhi	r23,4097
10009c4c:	df002215 	stw	fp,136(sp)
10009c50:	bdc66a04 	addi	r23,r23,6568
10009c54:	003cfb06 	br	10009044 <__alt_data_end+0xf8009044>
10009c58:	d9002217 	ldw	r4,136(sp)
10009c5c:	d9402417 	ldw	r5,144(sp)
10009c60:	20800017 	ldw	r2,0(r4)
10009c64:	21000104 	addi	r4,r4,4
10009c68:	d9002215 	stw	r4,136(sp)
10009c6c:	11400015 	stw	r5,0(r2)
10009c70:	003b3d06 	br	10008968 <__alt_data_end+0xf8008968>
10009c74:	01440074 	movhi	r5,4097
10009c78:	2946c904 	addi	r5,r5,6948
10009c7c:	d9402315 	stw	r5,140(sp)
10009c80:	d9401b17 	ldw	r5,108(sp)
10009c84:	29400044 	addi	r5,r5,1
10009c88:	003e6d06 	br	10009640 <__alt_data_end+0xf8009640>
10009c8c:	8029883a 	mov	r20,r16
10009c90:	dd401d83 	ldbu	r21,118(sp)
10009c94:	df002215 	stw	fp,136(sp)
10009c98:	0021883a 	mov	r16,zero
10009c9c:	003c0106 	br	10008ca4 <__alt_data_end+0xf8008ca4>
10009ca0:	00c40074 	movhi	r3,4097
10009ca4:	18c6c504 	addi	r3,r3,6932
10009ca8:	d8c02315 	stw	r3,140(sp)
10009cac:	280d883a 	mov	r6,r5
10009cb0:	003c6906 	br	10008e58 <__alt_data_end+0xf8008e58>
10009cb4:	802d883a 	mov	r22,r16
10009cb8:	0021883a 	mov	r16,zero
10009cbc:	003b5406 	br	10008a10 <__alt_data_end+0xf8008a10>
10009cc0:	1823883a 	mov	r17,r3
10009cc4:	003cf306 	br	10009094 <__alt_data_end+0xf8009094>
10009cc8:	1823883a 	mov	r17,r3
10009ccc:	003cad06 	br	10008f84 <__alt_data_end+0xf8008f84>
10009cd0:	0027883a 	mov	r19,zero
10009cd4:	003fdc06 	br	10009c48 <__alt_data_end+0xf8009c48>
10009cd8:	d9402217 	ldw	r5,136(sp)
10009cdc:	8005883a 	mov	r2,r16
10009ce0:	b0c00043 	ldbu	r3,1(r22)
10009ce4:	2c000017 	ldw	r16,0(r5)
10009ce8:	29000104 	addi	r4,r5,4
10009cec:	d9002215 	stw	r4,136(sp)
10009cf0:	102d883a 	mov	r22,r2
10009cf4:	803fa50e 	bge	r16,zero,10009b8c <__alt_data_end+0xf8009b8c>
10009cf8:	18c03fcc 	andi	r3,r3,255
10009cfc:	18c0201c 	xori	r3,r3,128
10009d00:	043fffc4 	movi	r16,-1
10009d04:	18ffe004 	addi	r3,r3,-128
10009d08:	003b4006 	br	10008a0c <__alt_data_end+0xf8008a0c>
10009d0c:	d9402303 	ldbu	r5,140(sp)
10009d10:	d9401d85 	stb	r5,118(sp)
10009d14:	003cae06 	br	10008fd0 <__alt_data_end+0xf8008fd0>
10009d18:	d8c02303 	ldbu	r3,140(sp)
10009d1c:	d8c01d85 	stb	r3,118(sp)
10009d20:	003d1406 	br	10009174 <__alt_data_end+0xf8009174>
10009d24:	d8c02303 	ldbu	r3,140(sp)
10009d28:	d8c01d85 	stb	r3,118(sp)
10009d2c:	003cca06 	br	10009058 <__alt_data_end+0xf8009058>
10009d30:	8880004c 	andi	r2,r17,1
10009d34:	002b883a 	mov	r21,zero
10009d38:	10000526 	beq	r2,zero,10009d50 <___vfiprintf_internal_r+0x14b8>
10009d3c:	00800c04 	movi	r2,48
10009d40:	d88019c5 	stb	r2,103(sp)
10009d44:	dd002817 	ldw	r20,160(sp)
10009d48:	ddc019c4 	addi	r23,sp,103
10009d4c:	003bd506 	br	10008ca4 <__alt_data_end+0xf8008ca4>
10009d50:	0029883a 	mov	r20,zero
10009d54:	ddc01a04 	addi	r23,sp,104
10009d58:	003bd206 	br	10008ca4 <__alt_data_end+0xf8008ca4>
10009d5c:	d9002303 	ldbu	r4,140(sp)
10009d60:	d9001d85 	stb	r4,118(sp)
10009d64:	003da606 	br	10009400 <__alt_data_end+0xf8009400>
10009d68:	d8c02303 	ldbu	r3,140(sp)
10009d6c:	d8c01d85 	stb	r3,118(sp)
10009d70:	003c7606 	br	10008f4c <__alt_data_end+0xf8008f4c>
10009d74:	d8c02303 	ldbu	r3,140(sp)
10009d78:	d8c01d85 	stb	r3,118(sp)
10009d7c:	003c6506 	br	10008f14 <__alt_data_end+0xf8008f14>
10009d80:	d9002303 	ldbu	r4,140(sp)
10009d84:	d9001d85 	stb	r4,118(sp)
10009d88:	003d3d06 	br	10009280 <__alt_data_end+0xf8009280>
10009d8c:	d8c02303 	ldbu	r3,140(sp)
10009d90:	d8c01d85 	stb	r3,118(sp)
10009d94:	003d1d06 	br	1000920c <__alt_data_end+0xf800920c>
10009d98:	d8c02303 	ldbu	r3,140(sp)
10009d9c:	d8c01d85 	stb	r3,118(sp)
10009da0:	003d0306 	br	100091b0 <__alt_data_end+0xf80091b0>

10009da4 <__vfiprintf_internal>:
10009da4:	00840074 	movhi	r2,4097
10009da8:	108e0604 	addi	r2,r2,14360
10009dac:	300f883a 	mov	r7,r6
10009db0:	280d883a 	mov	r6,r5
10009db4:	200b883a 	mov	r5,r4
10009db8:	11000017 	ldw	r4,0(r2)
10009dbc:	00088981 	jmpi	10008898 <___vfiprintf_internal_r>

10009dc0 <__sbprintf>:
10009dc0:	2880030b 	ldhu	r2,12(r5)
10009dc4:	2ac01917 	ldw	r11,100(r5)
10009dc8:	2a80038b 	ldhu	r10,14(r5)
10009dcc:	2a400717 	ldw	r9,28(r5)
10009dd0:	2a000917 	ldw	r8,36(r5)
10009dd4:	defee204 	addi	sp,sp,-1144
10009dd8:	00c10004 	movi	r3,1024
10009ddc:	dc011a15 	stw	r16,1128(sp)
10009de0:	10bfff4c 	andi	r2,r2,65533
10009de4:	2821883a 	mov	r16,r5
10009de8:	d8cb883a 	add	r5,sp,r3
10009dec:	dc811c15 	stw	r18,1136(sp)
10009df0:	dc411b15 	stw	r17,1132(sp)
10009df4:	dfc11d15 	stw	ra,1140(sp)
10009df8:	2025883a 	mov	r18,r4
10009dfc:	d881030d 	sth	r2,1036(sp)
10009e00:	dac11915 	stw	r11,1124(sp)
10009e04:	da81038d 	sth	r10,1038(sp)
10009e08:	da410715 	stw	r9,1052(sp)
10009e0c:	da010915 	stw	r8,1060(sp)
10009e10:	dec10015 	stw	sp,1024(sp)
10009e14:	dec10415 	stw	sp,1040(sp)
10009e18:	d8c10215 	stw	r3,1032(sp)
10009e1c:	d8c10515 	stw	r3,1044(sp)
10009e20:	d8010615 	stw	zero,1048(sp)
10009e24:	00088980 	call	10008898 <___vfiprintf_internal_r>
10009e28:	1023883a 	mov	r17,r2
10009e2c:	10000416 	blt	r2,zero,10009e40 <__sbprintf+0x80>
10009e30:	d9410004 	addi	r5,sp,1024
10009e34:	9009883a 	mov	r4,r18
10009e38:	00059540 	call	10005954 <_fflush_r>
10009e3c:	10000d1e 	bne	r2,zero,10009e74 <__sbprintf+0xb4>
10009e40:	d881030b 	ldhu	r2,1036(sp)
10009e44:	1080100c 	andi	r2,r2,64
10009e48:	10000326 	beq	r2,zero,10009e58 <__sbprintf+0x98>
10009e4c:	8080030b 	ldhu	r2,12(r16)
10009e50:	10801014 	ori	r2,r2,64
10009e54:	8080030d 	sth	r2,12(r16)
10009e58:	8805883a 	mov	r2,r17
10009e5c:	dfc11d17 	ldw	ra,1140(sp)
10009e60:	dc811c17 	ldw	r18,1136(sp)
10009e64:	dc411b17 	ldw	r17,1132(sp)
10009e68:	dc011a17 	ldw	r16,1128(sp)
10009e6c:	dec11e04 	addi	sp,sp,1144
10009e70:	f800283a 	ret
10009e74:	047fffc4 	movi	r17,-1
10009e78:	003ff106 	br	10009e40 <__alt_data_end+0xf8009e40>

10009e7c <__swbuf_r>:
10009e7c:	defffb04 	addi	sp,sp,-20
10009e80:	dcc00315 	stw	r19,12(sp)
10009e84:	dc800215 	stw	r18,8(sp)
10009e88:	dc000015 	stw	r16,0(sp)
10009e8c:	dfc00415 	stw	ra,16(sp)
10009e90:	dc400115 	stw	r17,4(sp)
10009e94:	2025883a 	mov	r18,r4
10009e98:	2827883a 	mov	r19,r5
10009e9c:	3021883a 	mov	r16,r6
10009ea0:	20000226 	beq	r4,zero,10009eac <__swbuf_r+0x30>
10009ea4:	20800e17 	ldw	r2,56(r4)
10009ea8:	10004226 	beq	r2,zero,10009fb4 <__swbuf_r+0x138>
10009eac:	80800617 	ldw	r2,24(r16)
10009eb0:	8100030b 	ldhu	r4,12(r16)
10009eb4:	80800215 	stw	r2,8(r16)
10009eb8:	2080020c 	andi	r2,r4,8
10009ebc:	10003626 	beq	r2,zero,10009f98 <__swbuf_r+0x11c>
10009ec0:	80c00417 	ldw	r3,16(r16)
10009ec4:	18003426 	beq	r3,zero,10009f98 <__swbuf_r+0x11c>
10009ec8:	2088000c 	andi	r2,r4,8192
10009ecc:	9c403fcc 	andi	r17,r19,255
10009ed0:	10001a26 	beq	r2,zero,10009f3c <__swbuf_r+0xc0>
10009ed4:	80800017 	ldw	r2,0(r16)
10009ed8:	81000517 	ldw	r4,20(r16)
10009edc:	10c7c83a 	sub	r3,r2,r3
10009ee0:	1900200e 	bge	r3,r4,10009f64 <__swbuf_r+0xe8>
10009ee4:	18c00044 	addi	r3,r3,1
10009ee8:	81000217 	ldw	r4,8(r16)
10009eec:	11400044 	addi	r5,r2,1
10009ef0:	81400015 	stw	r5,0(r16)
10009ef4:	213fffc4 	addi	r4,r4,-1
10009ef8:	81000215 	stw	r4,8(r16)
10009efc:	14c00005 	stb	r19,0(r2)
10009f00:	80800517 	ldw	r2,20(r16)
10009f04:	10c01e26 	beq	r2,r3,10009f80 <__swbuf_r+0x104>
10009f08:	8080030b 	ldhu	r2,12(r16)
10009f0c:	1080004c 	andi	r2,r2,1
10009f10:	10000226 	beq	r2,zero,10009f1c <__swbuf_r+0xa0>
10009f14:	00800284 	movi	r2,10
10009f18:	88801926 	beq	r17,r2,10009f80 <__swbuf_r+0x104>
10009f1c:	8805883a 	mov	r2,r17
10009f20:	dfc00417 	ldw	ra,16(sp)
10009f24:	dcc00317 	ldw	r19,12(sp)
10009f28:	dc800217 	ldw	r18,8(sp)
10009f2c:	dc400117 	ldw	r17,4(sp)
10009f30:	dc000017 	ldw	r16,0(sp)
10009f34:	dec00504 	addi	sp,sp,20
10009f38:	f800283a 	ret
10009f3c:	81401917 	ldw	r5,100(r16)
10009f40:	00b7ffc4 	movi	r2,-8193
10009f44:	21080014 	ori	r4,r4,8192
10009f48:	2884703a 	and	r2,r5,r2
10009f4c:	80801915 	stw	r2,100(r16)
10009f50:	80800017 	ldw	r2,0(r16)
10009f54:	8100030d 	sth	r4,12(r16)
10009f58:	81000517 	ldw	r4,20(r16)
10009f5c:	10c7c83a 	sub	r3,r2,r3
10009f60:	193fe016 	blt	r3,r4,10009ee4 <__alt_data_end+0xf8009ee4>
10009f64:	800b883a 	mov	r5,r16
10009f68:	9009883a 	mov	r4,r18
10009f6c:	00059540 	call	10005954 <_fflush_r>
10009f70:	1000071e 	bne	r2,zero,10009f90 <__swbuf_r+0x114>
10009f74:	80800017 	ldw	r2,0(r16)
10009f78:	00c00044 	movi	r3,1
10009f7c:	003fda06 	br	10009ee8 <__alt_data_end+0xf8009ee8>
10009f80:	800b883a 	mov	r5,r16
10009f84:	9009883a 	mov	r4,r18
10009f88:	00059540 	call	10005954 <_fflush_r>
10009f8c:	103fe326 	beq	r2,zero,10009f1c <__alt_data_end+0xf8009f1c>
10009f90:	00bfffc4 	movi	r2,-1
10009f94:	003fe206 	br	10009f20 <__alt_data_end+0xf8009f20>
10009f98:	800b883a 	mov	r5,r16
10009f9c:	9009883a 	mov	r4,r18
10009fa0:	0003d340 	call	10003d34 <__swsetup_r>
10009fa4:	103ffa1e 	bne	r2,zero,10009f90 <__alt_data_end+0xf8009f90>
10009fa8:	8100030b 	ldhu	r4,12(r16)
10009fac:	80c00417 	ldw	r3,16(r16)
10009fb0:	003fc506 	br	10009ec8 <__alt_data_end+0xf8009ec8>
10009fb4:	0005d400 	call	10005d40 <__sinit>
10009fb8:	003fbc06 	br	10009eac <__alt_data_end+0xf8009eac>

10009fbc <__swbuf>:
10009fbc:	00840074 	movhi	r2,4097
10009fc0:	108e0604 	addi	r2,r2,14360
10009fc4:	280d883a 	mov	r6,r5
10009fc8:	200b883a 	mov	r5,r4
10009fcc:	11000017 	ldw	r4,0(r2)
10009fd0:	0009e7c1 	jmpi	10009e7c <__swbuf_r>

10009fd4 <_write_r>:
10009fd4:	defffd04 	addi	sp,sp,-12
10009fd8:	2805883a 	mov	r2,r5
10009fdc:	dc000015 	stw	r16,0(sp)
10009fe0:	04040074 	movhi	r16,4097
10009fe4:	dc400115 	stw	r17,4(sp)
10009fe8:	300b883a 	mov	r5,r6
10009fec:	84151604 	addi	r16,r16,21592
10009ff0:	2023883a 	mov	r17,r4
10009ff4:	380d883a 	mov	r6,r7
10009ff8:	1009883a 	mov	r4,r2
10009ffc:	dfc00215 	stw	ra,8(sp)
1000a000:	80000015 	stw	zero,0(r16)
1000a004:	000f2700 	call	1000f270 <write>
1000a008:	00ffffc4 	movi	r3,-1
1000a00c:	10c00526 	beq	r2,r3,1000a024 <_write_r+0x50>
1000a010:	dfc00217 	ldw	ra,8(sp)
1000a014:	dc400117 	ldw	r17,4(sp)
1000a018:	dc000017 	ldw	r16,0(sp)
1000a01c:	dec00304 	addi	sp,sp,12
1000a020:	f800283a 	ret
1000a024:	80c00017 	ldw	r3,0(r16)
1000a028:	183ff926 	beq	r3,zero,1000a010 <__alt_data_end+0xf800a010>
1000a02c:	88c00015 	stw	r3,0(r17)
1000a030:	003ff706 	br	1000a010 <__alt_data_end+0xf800a010>

1000a034 <_close_r>:
1000a034:	defffd04 	addi	sp,sp,-12
1000a038:	dc000015 	stw	r16,0(sp)
1000a03c:	04040074 	movhi	r16,4097
1000a040:	dc400115 	stw	r17,4(sp)
1000a044:	84151604 	addi	r16,r16,21592
1000a048:	2023883a 	mov	r17,r4
1000a04c:	2809883a 	mov	r4,r5
1000a050:	dfc00215 	stw	ra,8(sp)
1000a054:	80000015 	stw	zero,0(r16)
1000a058:	000e9b40 	call	1000e9b4 <close>
1000a05c:	00ffffc4 	movi	r3,-1
1000a060:	10c00526 	beq	r2,r3,1000a078 <_close_r+0x44>
1000a064:	dfc00217 	ldw	ra,8(sp)
1000a068:	dc400117 	ldw	r17,4(sp)
1000a06c:	dc000017 	ldw	r16,0(sp)
1000a070:	dec00304 	addi	sp,sp,12
1000a074:	f800283a 	ret
1000a078:	80c00017 	ldw	r3,0(r16)
1000a07c:	183ff926 	beq	r3,zero,1000a064 <__alt_data_end+0xf800a064>
1000a080:	88c00015 	stw	r3,0(r17)
1000a084:	003ff706 	br	1000a064 <__alt_data_end+0xf800a064>

1000a088 <_calloc_r>:
1000a088:	defffe04 	addi	sp,sp,-8
1000a08c:	2805883a 	mov	r2,r5
1000a090:	dc000015 	stw	r16,0(sp)
1000a094:	300b883a 	mov	r5,r6
1000a098:	2021883a 	mov	r16,r4
1000a09c:	1009883a 	mov	r4,r2
1000a0a0:	dfc00115 	stw	ra,4(sp)
1000a0a4:	00016040 	call	10001604 <__mulsi3>
1000a0a8:	100b883a 	mov	r5,r2
1000a0ac:	8009883a 	mov	r4,r16
1000a0b0:	00065e40 	call	100065e4 <_malloc_r>
1000a0b4:	10002926 	beq	r2,zero,1000a15c <_calloc_r+0xd4>
1000a0b8:	11bfff17 	ldw	r6,-4(r2)
1000a0bc:	1021883a 	mov	r16,r2
1000a0c0:	00bfff04 	movi	r2,-4
1000a0c4:	308c703a 	and	r6,r6,r2
1000a0c8:	00c00904 	movi	r3,36
1000a0cc:	308d883a 	add	r6,r6,r2
1000a0d0:	19801636 	bltu	r3,r6,1000a12c <_calloc_r+0xa4>
1000a0d4:	008004c4 	movi	r2,19
1000a0d8:	11800b2e 	bgeu	r2,r6,1000a108 <_calloc_r+0x80>
1000a0dc:	80000015 	stw	zero,0(r16)
1000a0e0:	80000115 	stw	zero,4(r16)
1000a0e4:	008006c4 	movi	r2,27
1000a0e8:	11801a2e 	bgeu	r2,r6,1000a154 <_calloc_r+0xcc>
1000a0ec:	80000215 	stw	zero,8(r16)
1000a0f0:	80000315 	stw	zero,12(r16)
1000a0f4:	30c0151e 	bne	r6,r3,1000a14c <_calloc_r+0xc4>
1000a0f8:	80000415 	stw	zero,16(r16)
1000a0fc:	80800604 	addi	r2,r16,24
1000a100:	80000515 	stw	zero,20(r16)
1000a104:	00000106 	br	1000a10c <_calloc_r+0x84>
1000a108:	8005883a 	mov	r2,r16
1000a10c:	10000015 	stw	zero,0(r2)
1000a110:	10000115 	stw	zero,4(r2)
1000a114:	10000215 	stw	zero,8(r2)
1000a118:	8005883a 	mov	r2,r16
1000a11c:	dfc00117 	ldw	ra,4(sp)
1000a120:	dc000017 	ldw	r16,0(sp)
1000a124:	dec00204 	addi	sp,sp,8
1000a128:	f800283a 	ret
1000a12c:	000b883a 	mov	r5,zero
1000a130:	8009883a 	mov	r4,r16
1000a134:	0006ed40 	call	10006ed4 <memset>
1000a138:	8005883a 	mov	r2,r16
1000a13c:	dfc00117 	ldw	ra,4(sp)
1000a140:	dc000017 	ldw	r16,0(sp)
1000a144:	dec00204 	addi	sp,sp,8
1000a148:	f800283a 	ret
1000a14c:	80800404 	addi	r2,r16,16
1000a150:	003fee06 	br	1000a10c <__alt_data_end+0xf800a10c>
1000a154:	80800204 	addi	r2,r16,8
1000a158:	003fec06 	br	1000a10c <__alt_data_end+0xf800a10c>
1000a15c:	0005883a 	mov	r2,zero
1000a160:	003fee06 	br	1000a11c <__alt_data_end+0xf800a11c>

1000a164 <_fclose_r>:
1000a164:	28003926 	beq	r5,zero,1000a24c <_fclose_r+0xe8>
1000a168:	defffc04 	addi	sp,sp,-16
1000a16c:	dc400115 	stw	r17,4(sp)
1000a170:	dc000015 	stw	r16,0(sp)
1000a174:	dfc00315 	stw	ra,12(sp)
1000a178:	dc800215 	stw	r18,8(sp)
1000a17c:	2023883a 	mov	r17,r4
1000a180:	2821883a 	mov	r16,r5
1000a184:	20000226 	beq	r4,zero,1000a190 <_fclose_r+0x2c>
1000a188:	20800e17 	ldw	r2,56(r4)
1000a18c:	10002726 	beq	r2,zero,1000a22c <_fclose_r+0xc8>
1000a190:	8080030f 	ldh	r2,12(r16)
1000a194:	1000071e 	bne	r2,zero,1000a1b4 <_fclose_r+0x50>
1000a198:	0005883a 	mov	r2,zero
1000a19c:	dfc00317 	ldw	ra,12(sp)
1000a1a0:	dc800217 	ldw	r18,8(sp)
1000a1a4:	dc400117 	ldw	r17,4(sp)
1000a1a8:	dc000017 	ldw	r16,0(sp)
1000a1ac:	dec00404 	addi	sp,sp,16
1000a1b0:	f800283a 	ret
1000a1b4:	800b883a 	mov	r5,r16
1000a1b8:	8809883a 	mov	r4,r17
1000a1bc:	00057380 	call	10005738 <__sflush_r>
1000a1c0:	1025883a 	mov	r18,r2
1000a1c4:	80800b17 	ldw	r2,44(r16)
1000a1c8:	10000426 	beq	r2,zero,1000a1dc <_fclose_r+0x78>
1000a1cc:	81400717 	ldw	r5,28(r16)
1000a1d0:	8809883a 	mov	r4,r17
1000a1d4:	103ee83a 	callr	r2
1000a1d8:	10001616 	blt	r2,zero,1000a234 <_fclose_r+0xd0>
1000a1dc:	8080030b 	ldhu	r2,12(r16)
1000a1e0:	1080200c 	andi	r2,r2,128
1000a1e4:	1000151e 	bne	r2,zero,1000a23c <_fclose_r+0xd8>
1000a1e8:	81400c17 	ldw	r5,48(r16)
1000a1ec:	28000526 	beq	r5,zero,1000a204 <_fclose_r+0xa0>
1000a1f0:	80801004 	addi	r2,r16,64
1000a1f4:	28800226 	beq	r5,r2,1000a200 <_fclose_r+0x9c>
1000a1f8:	8809883a 	mov	r4,r17
1000a1fc:	0005eb40 	call	10005eb4 <_free_r>
1000a200:	80000c15 	stw	zero,48(r16)
1000a204:	81401117 	ldw	r5,68(r16)
1000a208:	28000326 	beq	r5,zero,1000a218 <_fclose_r+0xb4>
1000a20c:	8809883a 	mov	r4,r17
1000a210:	0005eb40 	call	10005eb4 <_free_r>
1000a214:	80001115 	stw	zero,68(r16)
1000a218:	0005d500 	call	10005d50 <__sfp_lock_acquire>
1000a21c:	8000030d 	sth	zero,12(r16)
1000a220:	0005d540 	call	10005d54 <__sfp_lock_release>
1000a224:	9005883a 	mov	r2,r18
1000a228:	003fdc06 	br	1000a19c <__alt_data_end+0xf800a19c>
1000a22c:	0005d400 	call	10005d40 <__sinit>
1000a230:	003fd706 	br	1000a190 <__alt_data_end+0xf800a190>
1000a234:	04bfffc4 	movi	r18,-1
1000a238:	003fe806 	br	1000a1dc <__alt_data_end+0xf800a1dc>
1000a23c:	81400417 	ldw	r5,16(r16)
1000a240:	8809883a 	mov	r4,r17
1000a244:	0005eb40 	call	10005eb4 <_free_r>
1000a248:	003fe706 	br	1000a1e8 <__alt_data_end+0xf800a1e8>
1000a24c:	0005883a 	mov	r2,zero
1000a250:	f800283a 	ret

1000a254 <fclose>:
1000a254:	00840074 	movhi	r2,4097
1000a258:	108e0604 	addi	r2,r2,14360
1000a25c:	200b883a 	mov	r5,r4
1000a260:	11000017 	ldw	r4,0(r2)
1000a264:	000a1641 	jmpi	1000a164 <_fclose_r>

1000a268 <__fputwc>:
1000a268:	defff804 	addi	sp,sp,-32
1000a26c:	dcc00415 	stw	r19,16(sp)
1000a270:	dc800315 	stw	r18,12(sp)
1000a274:	dc000115 	stw	r16,4(sp)
1000a278:	dfc00715 	stw	ra,28(sp)
1000a27c:	dd400615 	stw	r21,24(sp)
1000a280:	dd000515 	stw	r20,20(sp)
1000a284:	dc400215 	stw	r17,8(sp)
1000a288:	2027883a 	mov	r19,r4
1000a28c:	2825883a 	mov	r18,r5
1000a290:	3021883a 	mov	r16,r6
1000a294:	00063d40 	call	100063d4 <__locale_mb_cur_max>
1000a298:	00c00044 	movi	r3,1
1000a29c:	10c03e26 	beq	r2,r3,1000a398 <__fputwc+0x130>
1000a2a0:	81c01704 	addi	r7,r16,92
1000a2a4:	900d883a 	mov	r6,r18
1000a2a8:	d80b883a 	mov	r5,sp
1000a2ac:	9809883a 	mov	r4,r19
1000a2b0:	000b1680 	call	1000b168 <_wcrtomb_r>
1000a2b4:	1029883a 	mov	r20,r2
1000a2b8:	00bfffc4 	movi	r2,-1
1000a2bc:	a0802026 	beq	r20,r2,1000a340 <__fputwc+0xd8>
1000a2c0:	d9400003 	ldbu	r5,0(sp)
1000a2c4:	a0001c26 	beq	r20,zero,1000a338 <__fputwc+0xd0>
1000a2c8:	0023883a 	mov	r17,zero
1000a2cc:	05400284 	movi	r21,10
1000a2d0:	00000906 	br	1000a2f8 <__fputwc+0x90>
1000a2d4:	80800017 	ldw	r2,0(r16)
1000a2d8:	11400005 	stb	r5,0(r2)
1000a2dc:	80c00017 	ldw	r3,0(r16)
1000a2e0:	18c00044 	addi	r3,r3,1
1000a2e4:	80c00015 	stw	r3,0(r16)
1000a2e8:	8c400044 	addi	r17,r17,1
1000a2ec:	dc45883a 	add	r2,sp,r17
1000a2f0:	8d00112e 	bgeu	r17,r20,1000a338 <__fputwc+0xd0>
1000a2f4:	11400003 	ldbu	r5,0(r2)
1000a2f8:	80c00217 	ldw	r3,8(r16)
1000a2fc:	18ffffc4 	addi	r3,r3,-1
1000a300:	80c00215 	stw	r3,8(r16)
1000a304:	183ff30e 	bge	r3,zero,1000a2d4 <__alt_data_end+0xf800a2d4>
1000a308:	80800617 	ldw	r2,24(r16)
1000a30c:	18801916 	blt	r3,r2,1000a374 <__fputwc+0x10c>
1000a310:	80800017 	ldw	r2,0(r16)
1000a314:	11400005 	stb	r5,0(r2)
1000a318:	80800017 	ldw	r2,0(r16)
1000a31c:	10c00003 	ldbu	r3,0(r2)
1000a320:	10800044 	addi	r2,r2,1
1000a324:	1d402326 	beq	r3,r21,1000a3b4 <__fputwc+0x14c>
1000a328:	80800015 	stw	r2,0(r16)
1000a32c:	8c400044 	addi	r17,r17,1
1000a330:	dc45883a 	add	r2,sp,r17
1000a334:	8d3fef36 	bltu	r17,r20,1000a2f4 <__alt_data_end+0xf800a2f4>
1000a338:	9005883a 	mov	r2,r18
1000a33c:	00000406 	br	1000a350 <__fputwc+0xe8>
1000a340:	80c0030b 	ldhu	r3,12(r16)
1000a344:	a005883a 	mov	r2,r20
1000a348:	18c01014 	ori	r3,r3,64
1000a34c:	80c0030d 	sth	r3,12(r16)
1000a350:	dfc00717 	ldw	ra,28(sp)
1000a354:	dd400617 	ldw	r21,24(sp)
1000a358:	dd000517 	ldw	r20,20(sp)
1000a35c:	dcc00417 	ldw	r19,16(sp)
1000a360:	dc800317 	ldw	r18,12(sp)
1000a364:	dc400217 	ldw	r17,8(sp)
1000a368:	dc000117 	ldw	r16,4(sp)
1000a36c:	dec00804 	addi	sp,sp,32
1000a370:	f800283a 	ret
1000a374:	800d883a 	mov	r6,r16
1000a378:	29403fcc 	andi	r5,r5,255
1000a37c:	9809883a 	mov	r4,r19
1000a380:	0009e7c0 	call	10009e7c <__swbuf_r>
1000a384:	10bfffe0 	cmpeqi	r2,r2,-1
1000a388:	10803fcc 	andi	r2,r2,255
1000a38c:	103fd626 	beq	r2,zero,1000a2e8 <__alt_data_end+0xf800a2e8>
1000a390:	00bfffc4 	movi	r2,-1
1000a394:	003fee06 	br	1000a350 <__alt_data_end+0xf800a350>
1000a398:	90ffffc4 	addi	r3,r18,-1
1000a39c:	01003f84 	movi	r4,254
1000a3a0:	20ffbf36 	bltu	r4,r3,1000a2a0 <__alt_data_end+0xf800a2a0>
1000a3a4:	900b883a 	mov	r5,r18
1000a3a8:	dc800005 	stb	r18,0(sp)
1000a3ac:	1029883a 	mov	r20,r2
1000a3b0:	003fc506 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000a3b4:	800d883a 	mov	r6,r16
1000a3b8:	a80b883a 	mov	r5,r21
1000a3bc:	9809883a 	mov	r4,r19
1000a3c0:	0009e7c0 	call	10009e7c <__swbuf_r>
1000a3c4:	10bfffe0 	cmpeqi	r2,r2,-1
1000a3c8:	003fef06 	br	1000a388 <__alt_data_end+0xf800a388>

1000a3cc <_fputwc_r>:
1000a3cc:	3080030b 	ldhu	r2,12(r6)
1000a3d0:	10c8000c 	andi	r3,r2,8192
1000a3d4:	1800051e 	bne	r3,zero,1000a3ec <_fputwc_r+0x20>
1000a3d8:	30c01917 	ldw	r3,100(r6)
1000a3dc:	10880014 	ori	r2,r2,8192
1000a3e0:	3080030d 	sth	r2,12(r6)
1000a3e4:	18880014 	ori	r2,r3,8192
1000a3e8:	30801915 	stw	r2,100(r6)
1000a3ec:	000a2681 	jmpi	1000a268 <__fputwc>

1000a3f0 <fputwc>:
1000a3f0:	00840074 	movhi	r2,4097
1000a3f4:	defffc04 	addi	sp,sp,-16
1000a3f8:	108e0604 	addi	r2,r2,14360
1000a3fc:	dc000115 	stw	r16,4(sp)
1000a400:	14000017 	ldw	r16,0(r2)
1000a404:	dc400215 	stw	r17,8(sp)
1000a408:	dfc00315 	stw	ra,12(sp)
1000a40c:	2023883a 	mov	r17,r4
1000a410:	80000226 	beq	r16,zero,1000a41c <fputwc+0x2c>
1000a414:	80800e17 	ldw	r2,56(r16)
1000a418:	10001026 	beq	r2,zero,1000a45c <fputwc+0x6c>
1000a41c:	2880030b 	ldhu	r2,12(r5)
1000a420:	10c8000c 	andi	r3,r2,8192
1000a424:	1800051e 	bne	r3,zero,1000a43c <fputwc+0x4c>
1000a428:	28c01917 	ldw	r3,100(r5)
1000a42c:	10880014 	ori	r2,r2,8192
1000a430:	2880030d 	sth	r2,12(r5)
1000a434:	18880014 	ori	r2,r3,8192
1000a438:	28801915 	stw	r2,100(r5)
1000a43c:	280d883a 	mov	r6,r5
1000a440:	8009883a 	mov	r4,r16
1000a444:	880b883a 	mov	r5,r17
1000a448:	dfc00317 	ldw	ra,12(sp)
1000a44c:	dc400217 	ldw	r17,8(sp)
1000a450:	dc000117 	ldw	r16,4(sp)
1000a454:	dec00404 	addi	sp,sp,16
1000a458:	000a2681 	jmpi	1000a268 <__fputwc>
1000a45c:	8009883a 	mov	r4,r16
1000a460:	d9400015 	stw	r5,0(sp)
1000a464:	0005d400 	call	10005d40 <__sinit>
1000a468:	d9400017 	ldw	r5,0(sp)
1000a46c:	003feb06 	br	1000a41c <__alt_data_end+0xf800a41c>

1000a470 <_fstat_r>:
1000a470:	defffd04 	addi	sp,sp,-12
1000a474:	2805883a 	mov	r2,r5
1000a478:	dc000015 	stw	r16,0(sp)
1000a47c:	04040074 	movhi	r16,4097
1000a480:	dc400115 	stw	r17,4(sp)
1000a484:	84151604 	addi	r16,r16,21592
1000a488:	2023883a 	mov	r17,r4
1000a48c:	300b883a 	mov	r5,r6
1000a490:	1009883a 	mov	r4,r2
1000a494:	dfc00215 	stw	ra,8(sp)
1000a498:	80000015 	stw	zero,0(r16)
1000a49c:	000eb080 	call	1000eb08 <fstat>
1000a4a0:	00ffffc4 	movi	r3,-1
1000a4a4:	10c00526 	beq	r2,r3,1000a4bc <_fstat_r+0x4c>
1000a4a8:	dfc00217 	ldw	ra,8(sp)
1000a4ac:	dc400117 	ldw	r17,4(sp)
1000a4b0:	dc000017 	ldw	r16,0(sp)
1000a4b4:	dec00304 	addi	sp,sp,12
1000a4b8:	f800283a 	ret
1000a4bc:	80c00017 	ldw	r3,0(r16)
1000a4c0:	183ff926 	beq	r3,zero,1000a4a8 <__alt_data_end+0xf800a4a8>
1000a4c4:	88c00015 	stw	r3,0(r17)
1000a4c8:	003ff706 	br	1000a4a8 <__alt_data_end+0xf800a4a8>

1000a4cc <__sfvwrite_r>:
1000a4cc:	30800217 	ldw	r2,8(r6)
1000a4d0:	10006726 	beq	r2,zero,1000a670 <__sfvwrite_r+0x1a4>
1000a4d4:	28c0030b 	ldhu	r3,12(r5)
1000a4d8:	defff404 	addi	sp,sp,-48
1000a4dc:	dd400715 	stw	r21,28(sp)
1000a4e0:	dd000615 	stw	r20,24(sp)
1000a4e4:	dc000215 	stw	r16,8(sp)
1000a4e8:	dfc00b15 	stw	ra,44(sp)
1000a4ec:	df000a15 	stw	fp,40(sp)
1000a4f0:	ddc00915 	stw	r23,36(sp)
1000a4f4:	dd800815 	stw	r22,32(sp)
1000a4f8:	dcc00515 	stw	r19,20(sp)
1000a4fc:	dc800415 	stw	r18,16(sp)
1000a500:	dc400315 	stw	r17,12(sp)
1000a504:	1880020c 	andi	r2,r3,8
1000a508:	2821883a 	mov	r16,r5
1000a50c:	202b883a 	mov	r21,r4
1000a510:	3029883a 	mov	r20,r6
1000a514:	10002726 	beq	r2,zero,1000a5b4 <__sfvwrite_r+0xe8>
1000a518:	28800417 	ldw	r2,16(r5)
1000a51c:	10002526 	beq	r2,zero,1000a5b4 <__sfvwrite_r+0xe8>
1000a520:	1880008c 	andi	r2,r3,2
1000a524:	a4400017 	ldw	r17,0(r20)
1000a528:	10002a26 	beq	r2,zero,1000a5d4 <__sfvwrite_r+0x108>
1000a52c:	05a00034 	movhi	r22,32768
1000a530:	0027883a 	mov	r19,zero
1000a534:	0025883a 	mov	r18,zero
1000a538:	b5bf0004 	addi	r22,r22,-1024
1000a53c:	980d883a 	mov	r6,r19
1000a540:	a809883a 	mov	r4,r21
1000a544:	90004626 	beq	r18,zero,1000a660 <__sfvwrite_r+0x194>
1000a548:	900f883a 	mov	r7,r18
1000a54c:	b480022e 	bgeu	r22,r18,1000a558 <__sfvwrite_r+0x8c>
1000a550:	01e00034 	movhi	r7,32768
1000a554:	39ff0004 	addi	r7,r7,-1024
1000a558:	80800917 	ldw	r2,36(r16)
1000a55c:	81400717 	ldw	r5,28(r16)
1000a560:	103ee83a 	callr	r2
1000a564:	00805a0e 	bge	zero,r2,1000a6d0 <__sfvwrite_r+0x204>
1000a568:	a0c00217 	ldw	r3,8(r20)
1000a56c:	98a7883a 	add	r19,r19,r2
1000a570:	90a5c83a 	sub	r18,r18,r2
1000a574:	1885c83a 	sub	r2,r3,r2
1000a578:	a0800215 	stw	r2,8(r20)
1000a57c:	103fef1e 	bne	r2,zero,1000a53c <__alt_data_end+0xf800a53c>
1000a580:	0005883a 	mov	r2,zero
1000a584:	dfc00b17 	ldw	ra,44(sp)
1000a588:	df000a17 	ldw	fp,40(sp)
1000a58c:	ddc00917 	ldw	r23,36(sp)
1000a590:	dd800817 	ldw	r22,32(sp)
1000a594:	dd400717 	ldw	r21,28(sp)
1000a598:	dd000617 	ldw	r20,24(sp)
1000a59c:	dcc00517 	ldw	r19,20(sp)
1000a5a0:	dc800417 	ldw	r18,16(sp)
1000a5a4:	dc400317 	ldw	r17,12(sp)
1000a5a8:	dc000217 	ldw	r16,8(sp)
1000a5ac:	dec00c04 	addi	sp,sp,48
1000a5b0:	f800283a 	ret
1000a5b4:	800b883a 	mov	r5,r16
1000a5b8:	a809883a 	mov	r4,r21
1000a5bc:	0003d340 	call	10003d34 <__swsetup_r>
1000a5c0:	1000ee1e 	bne	r2,zero,1000a97c <__sfvwrite_r+0x4b0>
1000a5c4:	80c0030b 	ldhu	r3,12(r16)
1000a5c8:	a4400017 	ldw	r17,0(r20)
1000a5cc:	1880008c 	andi	r2,r3,2
1000a5d0:	103fd61e 	bne	r2,zero,1000a52c <__alt_data_end+0xf800a52c>
1000a5d4:	1880004c 	andi	r2,r3,1
1000a5d8:	1000421e 	bne	r2,zero,1000a6e4 <__sfvwrite_r+0x218>
1000a5dc:	0039883a 	mov	fp,zero
1000a5e0:	0025883a 	mov	r18,zero
1000a5e4:	90001a26 	beq	r18,zero,1000a650 <__sfvwrite_r+0x184>
1000a5e8:	1880800c 	andi	r2,r3,512
1000a5ec:	84c00217 	ldw	r19,8(r16)
1000a5f0:	10002126 	beq	r2,zero,1000a678 <__sfvwrite_r+0x1ac>
1000a5f4:	982f883a 	mov	r23,r19
1000a5f8:	94c09636 	bltu	r18,r19,1000a854 <__sfvwrite_r+0x388>
1000a5fc:	1881200c 	andi	r2,r3,1152
1000a600:	1000a11e 	bne	r2,zero,1000a888 <__sfvwrite_r+0x3bc>
1000a604:	81000017 	ldw	r4,0(r16)
1000a608:	b80d883a 	mov	r6,r23
1000a60c:	e00b883a 	mov	r5,fp
1000a610:	000aa480 	call	1000aa48 <memmove>
1000a614:	80c00217 	ldw	r3,8(r16)
1000a618:	81000017 	ldw	r4,0(r16)
1000a61c:	9005883a 	mov	r2,r18
1000a620:	1ce7c83a 	sub	r19,r3,r19
1000a624:	25cf883a 	add	r7,r4,r23
1000a628:	84c00215 	stw	r19,8(r16)
1000a62c:	81c00015 	stw	r7,0(r16)
1000a630:	a0c00217 	ldw	r3,8(r20)
1000a634:	e0b9883a 	add	fp,fp,r2
1000a638:	90a5c83a 	sub	r18,r18,r2
1000a63c:	18a7c83a 	sub	r19,r3,r2
1000a640:	a4c00215 	stw	r19,8(r20)
1000a644:	983fce26 	beq	r19,zero,1000a580 <__alt_data_end+0xf800a580>
1000a648:	80c0030b 	ldhu	r3,12(r16)
1000a64c:	903fe61e 	bne	r18,zero,1000a5e8 <__alt_data_end+0xf800a5e8>
1000a650:	8f000017 	ldw	fp,0(r17)
1000a654:	8c800117 	ldw	r18,4(r17)
1000a658:	8c400204 	addi	r17,r17,8
1000a65c:	003fe106 	br	1000a5e4 <__alt_data_end+0xf800a5e4>
1000a660:	8cc00017 	ldw	r19,0(r17)
1000a664:	8c800117 	ldw	r18,4(r17)
1000a668:	8c400204 	addi	r17,r17,8
1000a66c:	003fb306 	br	1000a53c <__alt_data_end+0xf800a53c>
1000a670:	0005883a 	mov	r2,zero
1000a674:	f800283a 	ret
1000a678:	81000017 	ldw	r4,0(r16)
1000a67c:	80800417 	ldw	r2,16(r16)
1000a680:	11005a36 	bltu	r2,r4,1000a7ec <__sfvwrite_r+0x320>
1000a684:	85c00517 	ldw	r23,20(r16)
1000a688:	95c05836 	bltu	r18,r23,1000a7ec <__sfvwrite_r+0x320>
1000a68c:	00a00034 	movhi	r2,32768
1000a690:	10bfffc4 	addi	r2,r2,-1
1000a694:	9009883a 	mov	r4,r18
1000a698:	1480012e 	bgeu	r2,r18,1000a6a0 <__sfvwrite_r+0x1d4>
1000a69c:	1009883a 	mov	r4,r2
1000a6a0:	b80b883a 	mov	r5,r23
1000a6a4:	000bf100 	call	1000bf10 <__divsi3>
1000a6a8:	b80b883a 	mov	r5,r23
1000a6ac:	1009883a 	mov	r4,r2
1000a6b0:	00016040 	call	10001604 <__mulsi3>
1000a6b4:	81400717 	ldw	r5,28(r16)
1000a6b8:	80c00917 	ldw	r3,36(r16)
1000a6bc:	100f883a 	mov	r7,r2
1000a6c0:	e00d883a 	mov	r6,fp
1000a6c4:	a809883a 	mov	r4,r21
1000a6c8:	183ee83a 	callr	r3
1000a6cc:	00bfd816 	blt	zero,r2,1000a630 <__alt_data_end+0xf800a630>
1000a6d0:	8080030b 	ldhu	r2,12(r16)
1000a6d4:	10801014 	ori	r2,r2,64
1000a6d8:	8080030d 	sth	r2,12(r16)
1000a6dc:	00bfffc4 	movi	r2,-1
1000a6e0:	003fa806 	br	1000a584 <__alt_data_end+0xf800a584>
1000a6e4:	0027883a 	mov	r19,zero
1000a6e8:	0011883a 	mov	r8,zero
1000a6ec:	0039883a 	mov	fp,zero
1000a6f0:	0025883a 	mov	r18,zero
1000a6f4:	90001f26 	beq	r18,zero,1000a774 <__sfvwrite_r+0x2a8>
1000a6f8:	40005a26 	beq	r8,zero,1000a864 <__sfvwrite_r+0x398>
1000a6fc:	982d883a 	mov	r22,r19
1000a700:	94c0012e 	bgeu	r18,r19,1000a708 <__sfvwrite_r+0x23c>
1000a704:	902d883a 	mov	r22,r18
1000a708:	81000017 	ldw	r4,0(r16)
1000a70c:	80800417 	ldw	r2,16(r16)
1000a710:	b02f883a 	mov	r23,r22
1000a714:	81c00517 	ldw	r7,20(r16)
1000a718:	1100032e 	bgeu	r2,r4,1000a728 <__sfvwrite_r+0x25c>
1000a71c:	80c00217 	ldw	r3,8(r16)
1000a720:	38c7883a 	add	r3,r7,r3
1000a724:	1d801816 	blt	r3,r22,1000a788 <__sfvwrite_r+0x2bc>
1000a728:	b1c03e16 	blt	r22,r7,1000a824 <__sfvwrite_r+0x358>
1000a72c:	80800917 	ldw	r2,36(r16)
1000a730:	81400717 	ldw	r5,28(r16)
1000a734:	e00d883a 	mov	r6,fp
1000a738:	da000115 	stw	r8,4(sp)
1000a73c:	a809883a 	mov	r4,r21
1000a740:	103ee83a 	callr	r2
1000a744:	102f883a 	mov	r23,r2
1000a748:	da000117 	ldw	r8,4(sp)
1000a74c:	00bfe00e 	bge	zero,r2,1000a6d0 <__alt_data_end+0xf800a6d0>
1000a750:	9de7c83a 	sub	r19,r19,r23
1000a754:	98001f26 	beq	r19,zero,1000a7d4 <__sfvwrite_r+0x308>
1000a758:	a0800217 	ldw	r2,8(r20)
1000a75c:	e5f9883a 	add	fp,fp,r23
1000a760:	95e5c83a 	sub	r18,r18,r23
1000a764:	15efc83a 	sub	r23,r2,r23
1000a768:	a5c00215 	stw	r23,8(r20)
1000a76c:	b83f8426 	beq	r23,zero,1000a580 <__alt_data_end+0xf800a580>
1000a770:	903fe11e 	bne	r18,zero,1000a6f8 <__alt_data_end+0xf800a6f8>
1000a774:	8f000017 	ldw	fp,0(r17)
1000a778:	8c800117 	ldw	r18,4(r17)
1000a77c:	0011883a 	mov	r8,zero
1000a780:	8c400204 	addi	r17,r17,8
1000a784:	003fdb06 	br	1000a6f4 <__alt_data_end+0xf800a6f4>
1000a788:	180d883a 	mov	r6,r3
1000a78c:	e00b883a 	mov	r5,fp
1000a790:	da000115 	stw	r8,4(sp)
1000a794:	d8c00015 	stw	r3,0(sp)
1000a798:	000aa480 	call	1000aa48 <memmove>
1000a79c:	d8c00017 	ldw	r3,0(sp)
1000a7a0:	80800017 	ldw	r2,0(r16)
1000a7a4:	800b883a 	mov	r5,r16
1000a7a8:	a809883a 	mov	r4,r21
1000a7ac:	10c5883a 	add	r2,r2,r3
1000a7b0:	80800015 	stw	r2,0(r16)
1000a7b4:	d8c00015 	stw	r3,0(sp)
1000a7b8:	00059540 	call	10005954 <_fflush_r>
1000a7bc:	d8c00017 	ldw	r3,0(sp)
1000a7c0:	da000117 	ldw	r8,4(sp)
1000a7c4:	103fc21e 	bne	r2,zero,1000a6d0 <__alt_data_end+0xf800a6d0>
1000a7c8:	182f883a 	mov	r23,r3
1000a7cc:	9de7c83a 	sub	r19,r19,r23
1000a7d0:	983fe11e 	bne	r19,zero,1000a758 <__alt_data_end+0xf800a758>
1000a7d4:	800b883a 	mov	r5,r16
1000a7d8:	a809883a 	mov	r4,r21
1000a7dc:	00059540 	call	10005954 <_fflush_r>
1000a7e0:	103fbb1e 	bne	r2,zero,1000a6d0 <__alt_data_end+0xf800a6d0>
1000a7e4:	0011883a 	mov	r8,zero
1000a7e8:	003fdb06 	br	1000a758 <__alt_data_end+0xf800a758>
1000a7ec:	94c0012e 	bgeu	r18,r19,1000a7f4 <__sfvwrite_r+0x328>
1000a7f0:	9027883a 	mov	r19,r18
1000a7f4:	980d883a 	mov	r6,r19
1000a7f8:	e00b883a 	mov	r5,fp
1000a7fc:	000aa480 	call	1000aa48 <memmove>
1000a800:	80800217 	ldw	r2,8(r16)
1000a804:	80c00017 	ldw	r3,0(r16)
1000a808:	14c5c83a 	sub	r2,r2,r19
1000a80c:	1cc7883a 	add	r3,r3,r19
1000a810:	80800215 	stw	r2,8(r16)
1000a814:	80c00015 	stw	r3,0(r16)
1000a818:	10004326 	beq	r2,zero,1000a928 <__sfvwrite_r+0x45c>
1000a81c:	9805883a 	mov	r2,r19
1000a820:	003f8306 	br	1000a630 <__alt_data_end+0xf800a630>
1000a824:	b00d883a 	mov	r6,r22
1000a828:	e00b883a 	mov	r5,fp
1000a82c:	da000115 	stw	r8,4(sp)
1000a830:	000aa480 	call	1000aa48 <memmove>
1000a834:	80800217 	ldw	r2,8(r16)
1000a838:	80c00017 	ldw	r3,0(r16)
1000a83c:	da000117 	ldw	r8,4(sp)
1000a840:	1585c83a 	sub	r2,r2,r22
1000a844:	1dad883a 	add	r22,r3,r22
1000a848:	80800215 	stw	r2,8(r16)
1000a84c:	85800015 	stw	r22,0(r16)
1000a850:	003fbf06 	br	1000a750 <__alt_data_end+0xf800a750>
1000a854:	81000017 	ldw	r4,0(r16)
1000a858:	9027883a 	mov	r19,r18
1000a85c:	902f883a 	mov	r23,r18
1000a860:	003f6906 	br	1000a608 <__alt_data_end+0xf800a608>
1000a864:	900d883a 	mov	r6,r18
1000a868:	01400284 	movi	r5,10
1000a86c:	e009883a 	mov	r4,fp
1000a870:	0006df00 	call	10006df0 <memchr>
1000a874:	10003e26 	beq	r2,zero,1000a970 <__sfvwrite_r+0x4a4>
1000a878:	10800044 	addi	r2,r2,1
1000a87c:	1727c83a 	sub	r19,r2,fp
1000a880:	02000044 	movi	r8,1
1000a884:	003f9d06 	br	1000a6fc <__alt_data_end+0xf800a6fc>
1000a888:	80800517 	ldw	r2,20(r16)
1000a88c:	81400417 	ldw	r5,16(r16)
1000a890:	81c00017 	ldw	r7,0(r16)
1000a894:	10a7883a 	add	r19,r2,r2
1000a898:	9885883a 	add	r2,r19,r2
1000a89c:	1026d7fa 	srli	r19,r2,31
1000a8a0:	396dc83a 	sub	r22,r7,r5
1000a8a4:	b1000044 	addi	r4,r22,1
1000a8a8:	9885883a 	add	r2,r19,r2
1000a8ac:	1027d07a 	srai	r19,r2,1
1000a8b0:	2485883a 	add	r2,r4,r18
1000a8b4:	980d883a 	mov	r6,r19
1000a8b8:	9880022e 	bgeu	r19,r2,1000a8c4 <__sfvwrite_r+0x3f8>
1000a8bc:	1027883a 	mov	r19,r2
1000a8c0:	100d883a 	mov	r6,r2
1000a8c4:	18c1000c 	andi	r3,r3,1024
1000a8c8:	18001c26 	beq	r3,zero,1000a93c <__sfvwrite_r+0x470>
1000a8cc:	300b883a 	mov	r5,r6
1000a8d0:	a809883a 	mov	r4,r21
1000a8d4:	00065e40 	call	100065e4 <_malloc_r>
1000a8d8:	102f883a 	mov	r23,r2
1000a8dc:	10002926 	beq	r2,zero,1000a984 <__sfvwrite_r+0x4b8>
1000a8e0:	81400417 	ldw	r5,16(r16)
1000a8e4:	b00d883a 	mov	r6,r22
1000a8e8:	1009883a 	mov	r4,r2
1000a8ec:	00017240 	call	10001724 <memcpy>
1000a8f0:	8080030b 	ldhu	r2,12(r16)
1000a8f4:	00fedfc4 	movi	r3,-1153
1000a8f8:	10c4703a 	and	r2,r2,r3
1000a8fc:	10802014 	ori	r2,r2,128
1000a900:	8080030d 	sth	r2,12(r16)
1000a904:	bd89883a 	add	r4,r23,r22
1000a908:	9d8fc83a 	sub	r7,r19,r22
1000a90c:	85c00415 	stw	r23,16(r16)
1000a910:	84c00515 	stw	r19,20(r16)
1000a914:	81000015 	stw	r4,0(r16)
1000a918:	9027883a 	mov	r19,r18
1000a91c:	81c00215 	stw	r7,8(r16)
1000a920:	902f883a 	mov	r23,r18
1000a924:	003f3806 	br	1000a608 <__alt_data_end+0xf800a608>
1000a928:	800b883a 	mov	r5,r16
1000a92c:	a809883a 	mov	r4,r21
1000a930:	00059540 	call	10005954 <_fflush_r>
1000a934:	103fb926 	beq	r2,zero,1000a81c <__alt_data_end+0xf800a81c>
1000a938:	003f6506 	br	1000a6d0 <__alt_data_end+0xf800a6d0>
1000a93c:	a809883a 	mov	r4,r21
1000a940:	000ac040 	call	1000ac04 <_realloc_r>
1000a944:	102f883a 	mov	r23,r2
1000a948:	103fee1e 	bne	r2,zero,1000a904 <__alt_data_end+0xf800a904>
1000a94c:	81400417 	ldw	r5,16(r16)
1000a950:	a809883a 	mov	r4,r21
1000a954:	0005eb40 	call	10005eb4 <_free_r>
1000a958:	8080030b 	ldhu	r2,12(r16)
1000a95c:	00ffdfc4 	movi	r3,-129
1000a960:	1884703a 	and	r2,r3,r2
1000a964:	00c00304 	movi	r3,12
1000a968:	a8c00015 	stw	r3,0(r21)
1000a96c:	003f5906 	br	1000a6d4 <__alt_data_end+0xf800a6d4>
1000a970:	94c00044 	addi	r19,r18,1
1000a974:	02000044 	movi	r8,1
1000a978:	003f6006 	br	1000a6fc <__alt_data_end+0xf800a6fc>
1000a97c:	00bfffc4 	movi	r2,-1
1000a980:	003f0006 	br	1000a584 <__alt_data_end+0xf800a584>
1000a984:	00800304 	movi	r2,12
1000a988:	a8800015 	stw	r2,0(r21)
1000a98c:	8080030b 	ldhu	r2,12(r16)
1000a990:	003f5006 	br	1000a6d4 <__alt_data_end+0xf800a6d4>

1000a994 <_isatty_r>:
1000a994:	defffd04 	addi	sp,sp,-12
1000a998:	dc000015 	stw	r16,0(sp)
1000a99c:	04040074 	movhi	r16,4097
1000a9a0:	dc400115 	stw	r17,4(sp)
1000a9a4:	84151604 	addi	r16,r16,21592
1000a9a8:	2023883a 	mov	r17,r4
1000a9ac:	2809883a 	mov	r4,r5
1000a9b0:	dfc00215 	stw	ra,8(sp)
1000a9b4:	80000015 	stw	zero,0(r16)
1000a9b8:	000ec100 	call	1000ec10 <isatty>
1000a9bc:	00ffffc4 	movi	r3,-1
1000a9c0:	10c00526 	beq	r2,r3,1000a9d8 <_isatty_r+0x44>
1000a9c4:	dfc00217 	ldw	ra,8(sp)
1000a9c8:	dc400117 	ldw	r17,4(sp)
1000a9cc:	dc000017 	ldw	r16,0(sp)
1000a9d0:	dec00304 	addi	sp,sp,12
1000a9d4:	f800283a 	ret
1000a9d8:	80c00017 	ldw	r3,0(r16)
1000a9dc:	183ff926 	beq	r3,zero,1000a9c4 <__alt_data_end+0xf800a9c4>
1000a9e0:	88c00015 	stw	r3,0(r17)
1000a9e4:	003ff706 	br	1000a9c4 <__alt_data_end+0xf800a9c4>

1000a9e8 <_lseek_r>:
1000a9e8:	defffd04 	addi	sp,sp,-12
1000a9ec:	2805883a 	mov	r2,r5
1000a9f0:	dc000015 	stw	r16,0(sp)
1000a9f4:	04040074 	movhi	r16,4097
1000a9f8:	dc400115 	stw	r17,4(sp)
1000a9fc:	300b883a 	mov	r5,r6
1000aa00:	84151604 	addi	r16,r16,21592
1000aa04:	2023883a 	mov	r17,r4
1000aa08:	380d883a 	mov	r6,r7
1000aa0c:	1009883a 	mov	r4,r2
1000aa10:	dfc00215 	stw	ra,8(sp)
1000aa14:	80000015 	stw	zero,0(r16)
1000aa18:	000edf80 	call	1000edf8 <lseek>
1000aa1c:	00ffffc4 	movi	r3,-1
1000aa20:	10c00526 	beq	r2,r3,1000aa38 <_lseek_r+0x50>
1000aa24:	dfc00217 	ldw	ra,8(sp)
1000aa28:	dc400117 	ldw	r17,4(sp)
1000aa2c:	dc000017 	ldw	r16,0(sp)
1000aa30:	dec00304 	addi	sp,sp,12
1000aa34:	f800283a 	ret
1000aa38:	80c00017 	ldw	r3,0(r16)
1000aa3c:	183ff926 	beq	r3,zero,1000aa24 <__alt_data_end+0xf800aa24>
1000aa40:	88c00015 	stw	r3,0(r17)
1000aa44:	003ff706 	br	1000aa24 <__alt_data_end+0xf800aa24>

1000aa48 <memmove>:
1000aa48:	2005883a 	mov	r2,r4
1000aa4c:	29000b2e 	bgeu	r5,r4,1000aa7c <memmove+0x34>
1000aa50:	298f883a 	add	r7,r5,r6
1000aa54:	21c0092e 	bgeu	r4,r7,1000aa7c <memmove+0x34>
1000aa58:	2187883a 	add	r3,r4,r6
1000aa5c:	198bc83a 	sub	r5,r3,r6
1000aa60:	30004826 	beq	r6,zero,1000ab84 <memmove+0x13c>
1000aa64:	39ffffc4 	addi	r7,r7,-1
1000aa68:	39000003 	ldbu	r4,0(r7)
1000aa6c:	18ffffc4 	addi	r3,r3,-1
1000aa70:	19000005 	stb	r4,0(r3)
1000aa74:	28fffb1e 	bne	r5,r3,1000aa64 <__alt_data_end+0xf800aa64>
1000aa78:	f800283a 	ret
1000aa7c:	00c003c4 	movi	r3,15
1000aa80:	1980412e 	bgeu	r3,r6,1000ab88 <memmove+0x140>
1000aa84:	2886b03a 	or	r3,r5,r2
1000aa88:	18c000cc 	andi	r3,r3,3
1000aa8c:	1800401e 	bne	r3,zero,1000ab90 <memmove+0x148>
1000aa90:	33fffc04 	addi	r15,r6,-16
1000aa94:	781ed13a 	srli	r15,r15,4
1000aa98:	28c00104 	addi	r3,r5,4
1000aa9c:	13400104 	addi	r13,r2,4
1000aaa0:	781c913a 	slli	r14,r15,4
1000aaa4:	2b000204 	addi	r12,r5,8
1000aaa8:	12c00204 	addi	r11,r2,8
1000aaac:	73800504 	addi	r14,r14,20
1000aab0:	2a800304 	addi	r10,r5,12
1000aab4:	12400304 	addi	r9,r2,12
1000aab8:	2b9d883a 	add	r14,r5,r14
1000aabc:	2811883a 	mov	r8,r5
1000aac0:	100f883a 	mov	r7,r2
1000aac4:	41000017 	ldw	r4,0(r8)
1000aac8:	39c00404 	addi	r7,r7,16
1000aacc:	18c00404 	addi	r3,r3,16
1000aad0:	393ffc15 	stw	r4,-16(r7)
1000aad4:	193ffc17 	ldw	r4,-16(r3)
1000aad8:	6b400404 	addi	r13,r13,16
1000aadc:	5ac00404 	addi	r11,r11,16
1000aae0:	693ffc15 	stw	r4,-16(r13)
1000aae4:	61000017 	ldw	r4,0(r12)
1000aae8:	4a400404 	addi	r9,r9,16
1000aaec:	42000404 	addi	r8,r8,16
1000aaf0:	593ffc15 	stw	r4,-16(r11)
1000aaf4:	51000017 	ldw	r4,0(r10)
1000aaf8:	63000404 	addi	r12,r12,16
1000aafc:	52800404 	addi	r10,r10,16
1000ab00:	493ffc15 	stw	r4,-16(r9)
1000ab04:	1bbfef1e 	bne	r3,r14,1000aac4 <__alt_data_end+0xf800aac4>
1000ab08:	79000044 	addi	r4,r15,1
1000ab0c:	2008913a 	slli	r4,r4,4
1000ab10:	328003cc 	andi	r10,r6,15
1000ab14:	02c000c4 	movi	r11,3
1000ab18:	1107883a 	add	r3,r2,r4
1000ab1c:	290b883a 	add	r5,r5,r4
1000ab20:	5a801e2e 	bgeu	r11,r10,1000ab9c <memmove+0x154>
1000ab24:	1813883a 	mov	r9,r3
1000ab28:	2811883a 	mov	r8,r5
1000ab2c:	500f883a 	mov	r7,r10
1000ab30:	41000017 	ldw	r4,0(r8)
1000ab34:	4a400104 	addi	r9,r9,4
1000ab38:	39ffff04 	addi	r7,r7,-4
1000ab3c:	493fff15 	stw	r4,-4(r9)
1000ab40:	42000104 	addi	r8,r8,4
1000ab44:	59fffa36 	bltu	r11,r7,1000ab30 <__alt_data_end+0xf800ab30>
1000ab48:	513fff04 	addi	r4,r10,-4
1000ab4c:	2008d0ba 	srli	r4,r4,2
1000ab50:	318000cc 	andi	r6,r6,3
1000ab54:	21000044 	addi	r4,r4,1
1000ab58:	2109883a 	add	r4,r4,r4
1000ab5c:	2109883a 	add	r4,r4,r4
1000ab60:	1907883a 	add	r3,r3,r4
1000ab64:	290b883a 	add	r5,r5,r4
1000ab68:	30000b26 	beq	r6,zero,1000ab98 <memmove+0x150>
1000ab6c:	198d883a 	add	r6,r3,r6
1000ab70:	29c00003 	ldbu	r7,0(r5)
1000ab74:	18c00044 	addi	r3,r3,1
1000ab78:	29400044 	addi	r5,r5,1
1000ab7c:	19ffffc5 	stb	r7,-1(r3)
1000ab80:	19bffb1e 	bne	r3,r6,1000ab70 <__alt_data_end+0xf800ab70>
1000ab84:	f800283a 	ret
1000ab88:	1007883a 	mov	r3,r2
1000ab8c:	003ff606 	br	1000ab68 <__alt_data_end+0xf800ab68>
1000ab90:	1007883a 	mov	r3,r2
1000ab94:	003ff506 	br	1000ab6c <__alt_data_end+0xf800ab6c>
1000ab98:	f800283a 	ret
1000ab9c:	500d883a 	mov	r6,r10
1000aba0:	003ff106 	br	1000ab68 <__alt_data_end+0xf800ab68>

1000aba4 <_read_r>:
1000aba4:	defffd04 	addi	sp,sp,-12
1000aba8:	2805883a 	mov	r2,r5
1000abac:	dc000015 	stw	r16,0(sp)
1000abb0:	04040074 	movhi	r16,4097
1000abb4:	dc400115 	stw	r17,4(sp)
1000abb8:	300b883a 	mov	r5,r6
1000abbc:	84151604 	addi	r16,r16,21592
1000abc0:	2023883a 	mov	r17,r4
1000abc4:	380d883a 	mov	r6,r7
1000abc8:	1009883a 	mov	r4,r2
1000abcc:	dfc00215 	stw	ra,8(sp)
1000abd0:	80000015 	stw	zero,0(r16)
1000abd4:	000efe80 	call	1000efe8 <read>
1000abd8:	00ffffc4 	movi	r3,-1
1000abdc:	10c00526 	beq	r2,r3,1000abf4 <_read_r+0x50>
1000abe0:	dfc00217 	ldw	ra,8(sp)
1000abe4:	dc400117 	ldw	r17,4(sp)
1000abe8:	dc000017 	ldw	r16,0(sp)
1000abec:	dec00304 	addi	sp,sp,12
1000abf0:	f800283a 	ret
1000abf4:	80c00017 	ldw	r3,0(r16)
1000abf8:	183ff926 	beq	r3,zero,1000abe0 <__alt_data_end+0xf800abe0>
1000abfc:	88c00015 	stw	r3,0(r17)
1000ac00:	003ff706 	br	1000abe0 <__alt_data_end+0xf800abe0>

1000ac04 <_realloc_r>:
1000ac04:	defff604 	addi	sp,sp,-40
1000ac08:	dc400115 	stw	r17,4(sp)
1000ac0c:	dfc00915 	stw	ra,36(sp)
1000ac10:	df000815 	stw	fp,32(sp)
1000ac14:	ddc00715 	stw	r23,28(sp)
1000ac18:	dd800615 	stw	r22,24(sp)
1000ac1c:	dd400515 	stw	r21,20(sp)
1000ac20:	dd000415 	stw	r20,16(sp)
1000ac24:	dcc00315 	stw	r19,12(sp)
1000ac28:	dc800215 	stw	r18,8(sp)
1000ac2c:	dc000015 	stw	r16,0(sp)
1000ac30:	3023883a 	mov	r17,r6
1000ac34:	2800b626 	beq	r5,zero,1000af10 <_realloc_r+0x30c>
1000ac38:	2829883a 	mov	r20,r5
1000ac3c:	2025883a 	mov	r18,r4
1000ac40:	000ef500 	call	1000ef50 <__malloc_lock>
1000ac44:	a0ffff17 	ldw	r3,-4(r20)
1000ac48:	043fff04 	movi	r16,-4
1000ac4c:	888002c4 	addi	r2,r17,11
1000ac50:	01000584 	movi	r4,22
1000ac54:	a57ffe04 	addi	r21,r20,-8
1000ac58:	1c20703a 	and	r16,r3,r16
1000ac5c:	2080332e 	bgeu	r4,r2,1000ad2c <_realloc_r+0x128>
1000ac60:	05bffe04 	movi	r22,-8
1000ac64:	15ac703a 	and	r22,r2,r22
1000ac68:	b005883a 	mov	r2,r22
1000ac6c:	b0005716 	blt	r22,zero,1000adcc <_realloc_r+0x1c8>
1000ac70:	b4405636 	bltu	r22,r17,1000adcc <_realloc_r+0x1c8>
1000ac74:	8080300e 	bge	r16,r2,1000ad38 <_realloc_r+0x134>
1000ac78:	07040074 	movhi	fp,4097
1000ac7c:	e7088104 	addi	fp,fp,8708
1000ac80:	e2000217 	ldw	r8,8(fp)
1000ac84:	ac09883a 	add	r4,r21,r16
1000ac88:	22006126 	beq	r4,r8,1000ae10 <_realloc_r+0x20c>
1000ac8c:	22400117 	ldw	r9,4(r4)
1000ac90:	01ffff84 	movi	r7,-2
1000ac94:	49ce703a 	and	r7,r9,r7
1000ac98:	21cf883a 	add	r7,r4,r7
1000ac9c:	39800117 	ldw	r6,4(r7)
1000aca0:	3180004c 	andi	r6,r6,1
1000aca4:	30003e26 	beq	r6,zero,1000ada0 <_realloc_r+0x19c>
1000aca8:	18c0004c 	andi	r3,r3,1
1000acac:	18008126 	beq	r3,zero,1000aeb4 <_realloc_r+0x2b0>
1000acb0:	880b883a 	mov	r5,r17
1000acb4:	9009883a 	mov	r4,r18
1000acb8:	00065e40 	call	100065e4 <_malloc_r>
1000acbc:	1023883a 	mov	r17,r2
1000acc0:	10011e26 	beq	r2,zero,1000b13c <_realloc_r+0x538>
1000acc4:	a0ffff17 	ldw	r3,-4(r20)
1000acc8:	113ffe04 	addi	r4,r2,-8
1000accc:	00bfff84 	movi	r2,-2
1000acd0:	1884703a 	and	r2,r3,r2
1000acd4:	a885883a 	add	r2,r21,r2
1000acd8:	2080ee26 	beq	r4,r2,1000b094 <_realloc_r+0x490>
1000acdc:	81bfff04 	addi	r6,r16,-4
1000ace0:	00800904 	movi	r2,36
1000ace4:	1180b836 	bltu	r2,r6,1000afc8 <_realloc_r+0x3c4>
1000ace8:	00c004c4 	movi	r3,19
1000acec:	19809536 	bltu	r3,r6,1000af44 <_realloc_r+0x340>
1000acf0:	8805883a 	mov	r2,r17
1000acf4:	a007883a 	mov	r3,r20
1000acf8:	19000017 	ldw	r4,0(r3)
1000acfc:	11000015 	stw	r4,0(r2)
1000ad00:	19000117 	ldw	r4,4(r3)
1000ad04:	11000115 	stw	r4,4(r2)
1000ad08:	18c00217 	ldw	r3,8(r3)
1000ad0c:	10c00215 	stw	r3,8(r2)
1000ad10:	a00b883a 	mov	r5,r20
1000ad14:	9009883a 	mov	r4,r18
1000ad18:	0005eb40 	call	10005eb4 <_free_r>
1000ad1c:	9009883a 	mov	r4,r18
1000ad20:	000ef740 	call	1000ef74 <__malloc_unlock>
1000ad24:	8805883a 	mov	r2,r17
1000ad28:	00001106 	br	1000ad70 <_realloc_r+0x16c>
1000ad2c:	00800404 	movi	r2,16
1000ad30:	102d883a 	mov	r22,r2
1000ad34:	003fce06 	br	1000ac70 <__alt_data_end+0xf800ac70>
1000ad38:	a023883a 	mov	r17,r20
1000ad3c:	858fc83a 	sub	r7,r16,r22
1000ad40:	008003c4 	movi	r2,15
1000ad44:	18c0004c 	andi	r3,r3,1
1000ad48:	11c02436 	bltu	r2,r7,1000addc <_realloc_r+0x1d8>
1000ad4c:	1c06b03a 	or	r3,r3,r16
1000ad50:	a8c00115 	stw	r3,4(r21)
1000ad54:	ac21883a 	add	r16,r21,r16
1000ad58:	80800117 	ldw	r2,4(r16)
1000ad5c:	10800054 	ori	r2,r2,1
1000ad60:	80800115 	stw	r2,4(r16)
1000ad64:	9009883a 	mov	r4,r18
1000ad68:	000ef740 	call	1000ef74 <__malloc_unlock>
1000ad6c:	8805883a 	mov	r2,r17
1000ad70:	dfc00917 	ldw	ra,36(sp)
1000ad74:	df000817 	ldw	fp,32(sp)
1000ad78:	ddc00717 	ldw	r23,28(sp)
1000ad7c:	dd800617 	ldw	r22,24(sp)
1000ad80:	dd400517 	ldw	r21,20(sp)
1000ad84:	dd000417 	ldw	r20,16(sp)
1000ad88:	dcc00317 	ldw	r19,12(sp)
1000ad8c:	dc800217 	ldw	r18,8(sp)
1000ad90:	dc400117 	ldw	r17,4(sp)
1000ad94:	dc000017 	ldw	r16,0(sp)
1000ad98:	dec00a04 	addi	sp,sp,40
1000ad9c:	f800283a 	ret
1000ada0:	017fff04 	movi	r5,-4
1000ada4:	494a703a 	and	r5,r9,r5
1000ada8:	814d883a 	add	r6,r16,r5
1000adac:	30801e16 	blt	r6,r2,1000ae28 <_realloc_r+0x224>
1000adb0:	20800317 	ldw	r2,12(r4)
1000adb4:	21000217 	ldw	r4,8(r4)
1000adb8:	a023883a 	mov	r17,r20
1000adbc:	3021883a 	mov	r16,r6
1000adc0:	20800315 	stw	r2,12(r4)
1000adc4:	11000215 	stw	r4,8(r2)
1000adc8:	003fdc06 	br	1000ad3c <__alt_data_end+0xf800ad3c>
1000adcc:	00800304 	movi	r2,12
1000add0:	90800015 	stw	r2,0(r18)
1000add4:	0005883a 	mov	r2,zero
1000add8:	003fe506 	br	1000ad70 <__alt_data_end+0xf800ad70>
1000addc:	1d86b03a 	or	r3,r3,r22
1000ade0:	a8c00115 	stw	r3,4(r21)
1000ade4:	ad8b883a 	add	r5,r21,r22
1000ade8:	38c00054 	ori	r3,r7,1
1000adec:	28c00115 	stw	r3,4(r5)
1000adf0:	29cf883a 	add	r7,r5,r7
1000adf4:	38c00117 	ldw	r3,4(r7)
1000adf8:	29400204 	addi	r5,r5,8
1000adfc:	9009883a 	mov	r4,r18
1000ae00:	18800054 	ori	r2,r3,1
1000ae04:	38800115 	stw	r2,4(r7)
1000ae08:	0005eb40 	call	10005eb4 <_free_r>
1000ae0c:	003fd506 	br	1000ad64 <__alt_data_end+0xf800ad64>
1000ae10:	21c00117 	ldw	r7,4(r4)
1000ae14:	017fff04 	movi	r5,-4
1000ae18:	b1800404 	addi	r6,r22,16
1000ae1c:	394a703a 	and	r5,r7,r5
1000ae20:	814f883a 	add	r7,r16,r5
1000ae24:	39805b0e 	bge	r7,r6,1000af94 <_realloc_r+0x390>
1000ae28:	18c0004c 	andi	r3,r3,1
1000ae2c:	183fa01e 	bne	r3,zero,1000acb0 <__alt_data_end+0xf800acb0>
1000ae30:	a4fffe17 	ldw	r19,-8(r20)
1000ae34:	00ffff04 	movi	r3,-4
1000ae38:	ace7c83a 	sub	r19,r21,r19
1000ae3c:	99800117 	ldw	r6,4(r19)
1000ae40:	30c6703a 	and	r3,r6,r3
1000ae44:	20002026 	beq	r4,zero,1000aec8 <_realloc_r+0x2c4>
1000ae48:	80ef883a 	add	r23,r16,r3
1000ae4c:	b96f883a 	add	r23,r23,r5
1000ae50:	22006126 	beq	r4,r8,1000afd8 <_realloc_r+0x3d4>
1000ae54:	b8801c16 	blt	r23,r2,1000aec8 <_realloc_r+0x2c4>
1000ae58:	20800317 	ldw	r2,12(r4)
1000ae5c:	20c00217 	ldw	r3,8(r4)
1000ae60:	81bfff04 	addi	r6,r16,-4
1000ae64:	01000904 	movi	r4,36
1000ae68:	18800315 	stw	r2,12(r3)
1000ae6c:	10c00215 	stw	r3,8(r2)
1000ae70:	98c00217 	ldw	r3,8(r19)
1000ae74:	98800317 	ldw	r2,12(r19)
1000ae78:	9c400204 	addi	r17,r19,8
1000ae7c:	18800315 	stw	r2,12(r3)
1000ae80:	10c00215 	stw	r3,8(r2)
1000ae84:	21801b36 	bltu	r4,r6,1000aef4 <_realloc_r+0x2f0>
1000ae88:	008004c4 	movi	r2,19
1000ae8c:	1180362e 	bgeu	r2,r6,1000af68 <_realloc_r+0x364>
1000ae90:	a0800017 	ldw	r2,0(r20)
1000ae94:	98800215 	stw	r2,8(r19)
1000ae98:	a0800117 	ldw	r2,4(r20)
1000ae9c:	98800315 	stw	r2,12(r19)
1000aea0:	008006c4 	movi	r2,27
1000aea4:	11808136 	bltu	r2,r6,1000b0ac <_realloc_r+0x4a8>
1000aea8:	98800404 	addi	r2,r19,16
1000aeac:	a5000204 	addi	r20,r20,8
1000aeb0:	00002e06 	br	1000af6c <_realloc_r+0x368>
1000aeb4:	a4fffe17 	ldw	r19,-8(r20)
1000aeb8:	00ffff04 	movi	r3,-4
1000aebc:	ace7c83a 	sub	r19,r21,r19
1000aec0:	99000117 	ldw	r4,4(r19)
1000aec4:	20c6703a 	and	r3,r4,r3
1000aec8:	983f7926 	beq	r19,zero,1000acb0 <__alt_data_end+0xf800acb0>
1000aecc:	80ef883a 	add	r23,r16,r3
1000aed0:	b8bf7716 	blt	r23,r2,1000acb0 <__alt_data_end+0xf800acb0>
1000aed4:	98800317 	ldw	r2,12(r19)
1000aed8:	98c00217 	ldw	r3,8(r19)
1000aedc:	81bfff04 	addi	r6,r16,-4
1000aee0:	01000904 	movi	r4,36
1000aee4:	18800315 	stw	r2,12(r3)
1000aee8:	10c00215 	stw	r3,8(r2)
1000aeec:	9c400204 	addi	r17,r19,8
1000aef0:	21bfe52e 	bgeu	r4,r6,1000ae88 <__alt_data_end+0xf800ae88>
1000aef4:	a00b883a 	mov	r5,r20
1000aef8:	8809883a 	mov	r4,r17
1000aefc:	000aa480 	call	1000aa48 <memmove>
1000af00:	98c00117 	ldw	r3,4(r19)
1000af04:	b821883a 	mov	r16,r23
1000af08:	982b883a 	mov	r21,r19
1000af0c:	003f8b06 	br	1000ad3c <__alt_data_end+0xf800ad3c>
1000af10:	300b883a 	mov	r5,r6
1000af14:	dfc00917 	ldw	ra,36(sp)
1000af18:	df000817 	ldw	fp,32(sp)
1000af1c:	ddc00717 	ldw	r23,28(sp)
1000af20:	dd800617 	ldw	r22,24(sp)
1000af24:	dd400517 	ldw	r21,20(sp)
1000af28:	dd000417 	ldw	r20,16(sp)
1000af2c:	dcc00317 	ldw	r19,12(sp)
1000af30:	dc800217 	ldw	r18,8(sp)
1000af34:	dc400117 	ldw	r17,4(sp)
1000af38:	dc000017 	ldw	r16,0(sp)
1000af3c:	dec00a04 	addi	sp,sp,40
1000af40:	00065e41 	jmpi	100065e4 <_malloc_r>
1000af44:	a0c00017 	ldw	r3,0(r20)
1000af48:	88c00015 	stw	r3,0(r17)
1000af4c:	a0c00117 	ldw	r3,4(r20)
1000af50:	88c00115 	stw	r3,4(r17)
1000af54:	00c006c4 	movi	r3,27
1000af58:	19804636 	bltu	r3,r6,1000b074 <_realloc_r+0x470>
1000af5c:	88800204 	addi	r2,r17,8
1000af60:	a0c00204 	addi	r3,r20,8
1000af64:	003f6406 	br	1000acf8 <__alt_data_end+0xf800acf8>
1000af68:	8805883a 	mov	r2,r17
1000af6c:	a0c00017 	ldw	r3,0(r20)
1000af70:	b821883a 	mov	r16,r23
1000af74:	982b883a 	mov	r21,r19
1000af78:	10c00015 	stw	r3,0(r2)
1000af7c:	a0c00117 	ldw	r3,4(r20)
1000af80:	10c00115 	stw	r3,4(r2)
1000af84:	a0c00217 	ldw	r3,8(r20)
1000af88:	10c00215 	stw	r3,8(r2)
1000af8c:	98c00117 	ldw	r3,4(r19)
1000af90:	003f6a06 	br	1000ad3c <__alt_data_end+0xf800ad3c>
1000af94:	adab883a 	add	r21,r21,r22
1000af98:	3d85c83a 	sub	r2,r7,r22
1000af9c:	e5400215 	stw	r21,8(fp)
1000afa0:	10800054 	ori	r2,r2,1
1000afa4:	a8800115 	stw	r2,4(r21)
1000afa8:	a0bfff17 	ldw	r2,-4(r20)
1000afac:	9009883a 	mov	r4,r18
1000afb0:	1080004c 	andi	r2,r2,1
1000afb4:	1584b03a 	or	r2,r2,r22
1000afb8:	a0bfff15 	stw	r2,-4(r20)
1000afbc:	000ef740 	call	1000ef74 <__malloc_unlock>
1000afc0:	a005883a 	mov	r2,r20
1000afc4:	003f6a06 	br	1000ad70 <__alt_data_end+0xf800ad70>
1000afc8:	a00b883a 	mov	r5,r20
1000afcc:	8809883a 	mov	r4,r17
1000afd0:	000aa480 	call	1000aa48 <memmove>
1000afd4:	003f4e06 	br	1000ad10 <__alt_data_end+0xf800ad10>
1000afd8:	b1000404 	addi	r4,r22,16
1000afdc:	b93fba16 	blt	r23,r4,1000aec8 <__alt_data_end+0xf800aec8>
1000afe0:	98800317 	ldw	r2,12(r19)
1000afe4:	98c00217 	ldw	r3,8(r19)
1000afe8:	81bfff04 	addi	r6,r16,-4
1000afec:	01000904 	movi	r4,36
1000aff0:	18800315 	stw	r2,12(r3)
1000aff4:	10c00215 	stw	r3,8(r2)
1000aff8:	9c400204 	addi	r17,r19,8
1000affc:	21804336 	bltu	r4,r6,1000b10c <_realloc_r+0x508>
1000b000:	008004c4 	movi	r2,19
1000b004:	11803f2e 	bgeu	r2,r6,1000b104 <_realloc_r+0x500>
1000b008:	a0800017 	ldw	r2,0(r20)
1000b00c:	98800215 	stw	r2,8(r19)
1000b010:	a0800117 	ldw	r2,4(r20)
1000b014:	98800315 	stw	r2,12(r19)
1000b018:	008006c4 	movi	r2,27
1000b01c:	11803f36 	bltu	r2,r6,1000b11c <_realloc_r+0x518>
1000b020:	98800404 	addi	r2,r19,16
1000b024:	a5000204 	addi	r20,r20,8
1000b028:	a0c00017 	ldw	r3,0(r20)
1000b02c:	10c00015 	stw	r3,0(r2)
1000b030:	a0c00117 	ldw	r3,4(r20)
1000b034:	10c00115 	stw	r3,4(r2)
1000b038:	a0c00217 	ldw	r3,8(r20)
1000b03c:	10c00215 	stw	r3,8(r2)
1000b040:	9d87883a 	add	r3,r19,r22
1000b044:	bd85c83a 	sub	r2,r23,r22
1000b048:	e0c00215 	stw	r3,8(fp)
1000b04c:	10800054 	ori	r2,r2,1
1000b050:	18800115 	stw	r2,4(r3)
1000b054:	98800117 	ldw	r2,4(r19)
1000b058:	9009883a 	mov	r4,r18
1000b05c:	1080004c 	andi	r2,r2,1
1000b060:	1584b03a 	or	r2,r2,r22
1000b064:	98800115 	stw	r2,4(r19)
1000b068:	000ef740 	call	1000ef74 <__malloc_unlock>
1000b06c:	8805883a 	mov	r2,r17
1000b070:	003f3f06 	br	1000ad70 <__alt_data_end+0xf800ad70>
1000b074:	a0c00217 	ldw	r3,8(r20)
1000b078:	88c00215 	stw	r3,8(r17)
1000b07c:	a0c00317 	ldw	r3,12(r20)
1000b080:	88c00315 	stw	r3,12(r17)
1000b084:	30801126 	beq	r6,r2,1000b0cc <_realloc_r+0x4c8>
1000b088:	88800404 	addi	r2,r17,16
1000b08c:	a0c00404 	addi	r3,r20,16
1000b090:	003f1906 	br	1000acf8 <__alt_data_end+0xf800acf8>
1000b094:	893fff17 	ldw	r4,-4(r17)
1000b098:	00bfff04 	movi	r2,-4
1000b09c:	a023883a 	mov	r17,r20
1000b0a0:	2084703a 	and	r2,r4,r2
1000b0a4:	80a1883a 	add	r16,r16,r2
1000b0a8:	003f2406 	br	1000ad3c <__alt_data_end+0xf800ad3c>
1000b0ac:	a0800217 	ldw	r2,8(r20)
1000b0b0:	98800415 	stw	r2,16(r19)
1000b0b4:	a0800317 	ldw	r2,12(r20)
1000b0b8:	98800515 	stw	r2,20(r19)
1000b0bc:	31000a26 	beq	r6,r4,1000b0e8 <_realloc_r+0x4e4>
1000b0c0:	98800604 	addi	r2,r19,24
1000b0c4:	a5000404 	addi	r20,r20,16
1000b0c8:	003fa806 	br	1000af6c <__alt_data_end+0xf800af6c>
1000b0cc:	a1000417 	ldw	r4,16(r20)
1000b0d0:	88800604 	addi	r2,r17,24
1000b0d4:	a0c00604 	addi	r3,r20,24
1000b0d8:	89000415 	stw	r4,16(r17)
1000b0dc:	a1000517 	ldw	r4,20(r20)
1000b0e0:	89000515 	stw	r4,20(r17)
1000b0e4:	003f0406 	br	1000acf8 <__alt_data_end+0xf800acf8>
1000b0e8:	a0c00417 	ldw	r3,16(r20)
1000b0ec:	a5000604 	addi	r20,r20,24
1000b0f0:	98800804 	addi	r2,r19,32
1000b0f4:	98c00615 	stw	r3,24(r19)
1000b0f8:	a0ffff17 	ldw	r3,-4(r20)
1000b0fc:	98c00715 	stw	r3,28(r19)
1000b100:	003f9a06 	br	1000af6c <__alt_data_end+0xf800af6c>
1000b104:	8805883a 	mov	r2,r17
1000b108:	003fc706 	br	1000b028 <__alt_data_end+0xf800b028>
1000b10c:	a00b883a 	mov	r5,r20
1000b110:	8809883a 	mov	r4,r17
1000b114:	000aa480 	call	1000aa48 <memmove>
1000b118:	003fc906 	br	1000b040 <__alt_data_end+0xf800b040>
1000b11c:	a0800217 	ldw	r2,8(r20)
1000b120:	98800415 	stw	r2,16(r19)
1000b124:	a0800317 	ldw	r2,12(r20)
1000b128:	98800515 	stw	r2,20(r19)
1000b12c:	31000726 	beq	r6,r4,1000b14c <_realloc_r+0x548>
1000b130:	98800604 	addi	r2,r19,24
1000b134:	a5000404 	addi	r20,r20,16
1000b138:	003fbb06 	br	1000b028 <__alt_data_end+0xf800b028>
1000b13c:	9009883a 	mov	r4,r18
1000b140:	000ef740 	call	1000ef74 <__malloc_unlock>
1000b144:	0005883a 	mov	r2,zero
1000b148:	003f0906 	br	1000ad70 <__alt_data_end+0xf800ad70>
1000b14c:	a0c00417 	ldw	r3,16(r20)
1000b150:	a5000604 	addi	r20,r20,24
1000b154:	98800804 	addi	r2,r19,32
1000b158:	98c00615 	stw	r3,24(r19)
1000b15c:	a0ffff17 	ldw	r3,-4(r20)
1000b160:	98c00715 	stw	r3,28(r19)
1000b164:	003fb006 	br	1000b028 <__alt_data_end+0xf800b028>

1000b168 <_wcrtomb_r>:
1000b168:	defff604 	addi	sp,sp,-40
1000b16c:	00840074 	movhi	r2,4097
1000b170:	dc800815 	stw	r18,32(sp)
1000b174:	dc400715 	stw	r17,28(sp)
1000b178:	dc000615 	stw	r16,24(sp)
1000b17c:	108e0a04 	addi	r2,r2,14376
1000b180:	dfc00915 	stw	ra,36(sp)
1000b184:	2021883a 	mov	r16,r4
1000b188:	3823883a 	mov	r17,r7
1000b18c:	14800017 	ldw	r18,0(r2)
1000b190:	28001426 	beq	r5,zero,1000b1e4 <_wcrtomb_r+0x7c>
1000b194:	d9400415 	stw	r5,16(sp)
1000b198:	d9800515 	stw	r6,20(sp)
1000b19c:	00063c80 	call	100063c8 <__locale_charset>
1000b1a0:	d9800517 	ldw	r6,20(sp)
1000b1a4:	d9400417 	ldw	r5,16(sp)
1000b1a8:	100f883a 	mov	r7,r2
1000b1ac:	dc400015 	stw	r17,0(sp)
1000b1b0:	8009883a 	mov	r4,r16
1000b1b4:	903ee83a 	callr	r18
1000b1b8:	00ffffc4 	movi	r3,-1
1000b1bc:	10c0031e 	bne	r2,r3,1000b1cc <_wcrtomb_r+0x64>
1000b1c0:	88000015 	stw	zero,0(r17)
1000b1c4:	00c02284 	movi	r3,138
1000b1c8:	80c00015 	stw	r3,0(r16)
1000b1cc:	dfc00917 	ldw	ra,36(sp)
1000b1d0:	dc800817 	ldw	r18,32(sp)
1000b1d4:	dc400717 	ldw	r17,28(sp)
1000b1d8:	dc000617 	ldw	r16,24(sp)
1000b1dc:	dec00a04 	addi	sp,sp,40
1000b1e0:	f800283a 	ret
1000b1e4:	00063c80 	call	100063c8 <__locale_charset>
1000b1e8:	100f883a 	mov	r7,r2
1000b1ec:	dc400015 	stw	r17,0(sp)
1000b1f0:	000d883a 	mov	r6,zero
1000b1f4:	d9400104 	addi	r5,sp,4
1000b1f8:	8009883a 	mov	r4,r16
1000b1fc:	903ee83a 	callr	r18
1000b200:	003fed06 	br	1000b1b8 <__alt_data_end+0xf800b1b8>

1000b204 <wcrtomb>:
1000b204:	defff604 	addi	sp,sp,-40
1000b208:	00840074 	movhi	r2,4097
1000b20c:	dc800615 	stw	r18,24(sp)
1000b210:	dc400515 	stw	r17,20(sp)
1000b214:	108e0604 	addi	r2,r2,14360
1000b218:	dfc00915 	stw	ra,36(sp)
1000b21c:	dd000815 	stw	r20,32(sp)
1000b220:	dcc00715 	stw	r19,28(sp)
1000b224:	dc000415 	stw	r16,16(sp)
1000b228:	3025883a 	mov	r18,r6
1000b22c:	14400017 	ldw	r17,0(r2)
1000b230:	20001926 	beq	r4,zero,1000b298 <wcrtomb+0x94>
1000b234:	00840074 	movhi	r2,4097
1000b238:	108e0a04 	addi	r2,r2,14376
1000b23c:	15000017 	ldw	r20,0(r2)
1000b240:	2021883a 	mov	r16,r4
1000b244:	2827883a 	mov	r19,r5
1000b248:	00063c80 	call	100063c8 <__locale_charset>
1000b24c:	100f883a 	mov	r7,r2
1000b250:	dc800015 	stw	r18,0(sp)
1000b254:	980d883a 	mov	r6,r19
1000b258:	800b883a 	mov	r5,r16
1000b25c:	8809883a 	mov	r4,r17
1000b260:	a03ee83a 	callr	r20
1000b264:	00ffffc4 	movi	r3,-1
1000b268:	10c0031e 	bne	r2,r3,1000b278 <wcrtomb+0x74>
1000b26c:	90000015 	stw	zero,0(r18)
1000b270:	00c02284 	movi	r3,138
1000b274:	88c00015 	stw	r3,0(r17)
1000b278:	dfc00917 	ldw	ra,36(sp)
1000b27c:	dd000817 	ldw	r20,32(sp)
1000b280:	dcc00717 	ldw	r19,28(sp)
1000b284:	dc800617 	ldw	r18,24(sp)
1000b288:	dc400517 	ldw	r17,20(sp)
1000b28c:	dc000417 	ldw	r16,16(sp)
1000b290:	dec00a04 	addi	sp,sp,40
1000b294:	f800283a 	ret
1000b298:	00840074 	movhi	r2,4097
1000b29c:	108e0a04 	addi	r2,r2,14376
1000b2a0:	14000017 	ldw	r16,0(r2)
1000b2a4:	00063c80 	call	100063c8 <__locale_charset>
1000b2a8:	100f883a 	mov	r7,r2
1000b2ac:	dc800015 	stw	r18,0(sp)
1000b2b0:	000d883a 	mov	r6,zero
1000b2b4:	d9400104 	addi	r5,sp,4
1000b2b8:	8809883a 	mov	r4,r17
1000b2bc:	803ee83a 	callr	r16
1000b2c0:	003fe806 	br	1000b264 <__alt_data_end+0xf800b264>

1000b2c4 <__ascii_wctomb>:
1000b2c4:	28000526 	beq	r5,zero,1000b2dc <__ascii_wctomb+0x18>
1000b2c8:	00803fc4 	movi	r2,255
1000b2cc:	11800536 	bltu	r2,r6,1000b2e4 <__ascii_wctomb+0x20>
1000b2d0:	29800005 	stb	r6,0(r5)
1000b2d4:	00800044 	movi	r2,1
1000b2d8:	f800283a 	ret
1000b2dc:	0005883a 	mov	r2,zero
1000b2e0:	f800283a 	ret
1000b2e4:	00802284 	movi	r2,138
1000b2e8:	20800015 	stw	r2,0(r4)
1000b2ec:	00bfffc4 	movi	r2,-1
1000b2f0:	f800283a 	ret

1000b2f4 <_wctomb_r>:
1000b2f4:	00840074 	movhi	r2,4097
1000b2f8:	defff904 	addi	sp,sp,-28
1000b2fc:	108e0a04 	addi	r2,r2,14376
1000b300:	dfc00615 	stw	ra,24(sp)
1000b304:	dc400515 	stw	r17,20(sp)
1000b308:	dc000415 	stw	r16,16(sp)
1000b30c:	3823883a 	mov	r17,r7
1000b310:	14000017 	ldw	r16,0(r2)
1000b314:	d9000115 	stw	r4,4(sp)
1000b318:	d9400215 	stw	r5,8(sp)
1000b31c:	d9800315 	stw	r6,12(sp)
1000b320:	00063c80 	call	100063c8 <__locale_charset>
1000b324:	d9800317 	ldw	r6,12(sp)
1000b328:	d9400217 	ldw	r5,8(sp)
1000b32c:	d9000117 	ldw	r4,4(sp)
1000b330:	100f883a 	mov	r7,r2
1000b334:	dc400015 	stw	r17,0(sp)
1000b338:	803ee83a 	callr	r16
1000b33c:	dfc00617 	ldw	ra,24(sp)
1000b340:	dc400517 	ldw	r17,20(sp)
1000b344:	dc000417 	ldw	r16,16(sp)
1000b348:	dec00704 	addi	sp,sp,28
1000b34c:	f800283a 	ret

1000b350 <__udivdi3>:
1000b350:	defff404 	addi	sp,sp,-48
1000b354:	dcc00515 	stw	r19,20(sp)
1000b358:	dc000215 	stw	r16,8(sp)
1000b35c:	dfc00b15 	stw	ra,44(sp)
1000b360:	df000a15 	stw	fp,40(sp)
1000b364:	ddc00915 	stw	r23,36(sp)
1000b368:	dd800815 	stw	r22,32(sp)
1000b36c:	dd400715 	stw	r21,28(sp)
1000b370:	dd000615 	stw	r20,24(sp)
1000b374:	dc800415 	stw	r18,16(sp)
1000b378:	dc400315 	stw	r17,12(sp)
1000b37c:	2027883a 	mov	r19,r4
1000b380:	2821883a 	mov	r16,r5
1000b384:	3800461e 	bne	r7,zero,1000b4a0 <__udivdi3+0x150>
1000b388:	3023883a 	mov	r17,r6
1000b38c:	2025883a 	mov	r18,r4
1000b390:	2980572e 	bgeu	r5,r6,1000b4f0 <__udivdi3+0x1a0>
1000b394:	00bfffd4 	movui	r2,65535
1000b398:	282d883a 	mov	r22,r5
1000b39c:	1180b236 	bltu	r2,r6,1000b668 <__udivdi3+0x318>
1000b3a0:	00803fc4 	movi	r2,255
1000b3a4:	1185803a 	cmpltu	r2,r2,r6
1000b3a8:	100490fa 	slli	r2,r2,3
1000b3ac:	3086d83a 	srl	r3,r6,r2
1000b3b0:	01040074 	movhi	r4,4097
1000b3b4:	2106cd04 	addi	r4,r4,6964
1000b3b8:	20c7883a 	add	r3,r4,r3
1000b3bc:	18c00003 	ldbu	r3,0(r3)
1000b3c0:	1885883a 	add	r2,r3,r2
1000b3c4:	00c00804 	movi	r3,32
1000b3c8:	1887c83a 	sub	r3,r3,r2
1000b3cc:	18000526 	beq	r3,zero,1000b3e4 <__udivdi3+0x94>
1000b3d0:	80e0983a 	sll	r16,r16,r3
1000b3d4:	9884d83a 	srl	r2,r19,r2
1000b3d8:	30e2983a 	sll	r17,r6,r3
1000b3dc:	98e4983a 	sll	r18,r19,r3
1000b3e0:	142cb03a 	or	r22,r2,r16
1000b3e4:	882ad43a 	srli	r21,r17,16
1000b3e8:	b009883a 	mov	r4,r22
1000b3ec:	8d3fffcc 	andi	r20,r17,65535
1000b3f0:	a80b883a 	mov	r5,r21
1000b3f4:	000c06c0 	call	1000c06c <__umodsi3>
1000b3f8:	b009883a 	mov	r4,r22
1000b3fc:	a80b883a 	mov	r5,r21
1000b400:	1027883a 	mov	r19,r2
1000b404:	000c0080 	call	1000c008 <__udivsi3>
1000b408:	100b883a 	mov	r5,r2
1000b40c:	a009883a 	mov	r4,r20
1000b410:	102d883a 	mov	r22,r2
1000b414:	00016040 	call	10001604 <__mulsi3>
1000b418:	9826943a 	slli	r19,r19,16
1000b41c:	9006d43a 	srli	r3,r18,16
1000b420:	1cc6b03a 	or	r3,r3,r19
1000b424:	1880052e 	bgeu	r3,r2,1000b43c <__udivdi3+0xec>
1000b428:	1c47883a 	add	r3,r3,r17
1000b42c:	b13fffc4 	addi	r4,r22,-1
1000b430:	1c400136 	bltu	r3,r17,1000b438 <__udivdi3+0xe8>
1000b434:	18814236 	bltu	r3,r2,1000b940 <__udivdi3+0x5f0>
1000b438:	202d883a 	mov	r22,r4
1000b43c:	18a1c83a 	sub	r16,r3,r2
1000b440:	8009883a 	mov	r4,r16
1000b444:	a80b883a 	mov	r5,r21
1000b448:	000c06c0 	call	1000c06c <__umodsi3>
1000b44c:	1027883a 	mov	r19,r2
1000b450:	8009883a 	mov	r4,r16
1000b454:	a80b883a 	mov	r5,r21
1000b458:	9826943a 	slli	r19,r19,16
1000b45c:	000c0080 	call	1000c008 <__udivsi3>
1000b460:	100b883a 	mov	r5,r2
1000b464:	a009883a 	mov	r4,r20
1000b468:	94bfffcc 	andi	r18,r18,65535
1000b46c:	1021883a 	mov	r16,r2
1000b470:	94e4b03a 	or	r18,r18,r19
1000b474:	00016040 	call	10001604 <__mulsi3>
1000b478:	9080052e 	bgeu	r18,r2,1000b490 <__udivdi3+0x140>
1000b47c:	8ca5883a 	add	r18,r17,r18
1000b480:	80ffffc4 	addi	r3,r16,-1
1000b484:	94410c36 	bltu	r18,r17,1000b8b8 <__udivdi3+0x568>
1000b488:	90810b2e 	bgeu	r18,r2,1000b8b8 <__udivdi3+0x568>
1000b48c:	843fff84 	addi	r16,r16,-2
1000b490:	b004943a 	slli	r2,r22,16
1000b494:	0007883a 	mov	r3,zero
1000b498:	1404b03a 	or	r2,r2,r16
1000b49c:	00005e06 	br	1000b618 <__udivdi3+0x2c8>
1000b4a0:	29c05b36 	bltu	r5,r7,1000b610 <__udivdi3+0x2c0>
1000b4a4:	00bfffd4 	movui	r2,65535
1000b4a8:	11c0672e 	bgeu	r2,r7,1000b648 <__udivdi3+0x2f8>
1000b4ac:	00804034 	movhi	r2,256
1000b4b0:	10bfffc4 	addi	r2,r2,-1
1000b4b4:	11c10a36 	bltu	r2,r7,1000b8e0 <__udivdi3+0x590>
1000b4b8:	00800404 	movi	r2,16
1000b4bc:	3886d83a 	srl	r3,r7,r2
1000b4c0:	01040074 	movhi	r4,4097
1000b4c4:	2106cd04 	addi	r4,r4,6964
1000b4c8:	20c7883a 	add	r3,r4,r3
1000b4cc:	18c00003 	ldbu	r3,0(r3)
1000b4d0:	05c00804 	movi	r23,32
1000b4d4:	1885883a 	add	r2,r3,r2
1000b4d8:	b8afc83a 	sub	r23,r23,r2
1000b4dc:	b800671e 	bne	r23,zero,1000b67c <__udivdi3+0x32c>
1000b4e0:	3c010536 	bltu	r7,r16,1000b8f8 <__udivdi3+0x5a8>
1000b4e4:	9985403a 	cmpgeu	r2,r19,r6
1000b4e8:	0007883a 	mov	r3,zero
1000b4ec:	00004a06 	br	1000b618 <__udivdi3+0x2c8>
1000b4f0:	3000041e 	bne	r6,zero,1000b504 <__udivdi3+0x1b4>
1000b4f4:	000b883a 	mov	r5,zero
1000b4f8:	01000044 	movi	r4,1
1000b4fc:	000c0080 	call	1000c008 <__udivsi3>
1000b500:	1023883a 	mov	r17,r2
1000b504:	00bfffd4 	movui	r2,65535
1000b508:	1440532e 	bgeu	r2,r17,1000b658 <__udivdi3+0x308>
1000b50c:	00804034 	movhi	r2,256
1000b510:	10bfffc4 	addi	r2,r2,-1
1000b514:	1440f436 	bltu	r2,r17,1000b8e8 <__udivdi3+0x598>
1000b518:	00800404 	movi	r2,16
1000b51c:	8886d83a 	srl	r3,r17,r2
1000b520:	01040074 	movhi	r4,4097
1000b524:	2106cd04 	addi	r4,r4,6964
1000b528:	20c7883a 	add	r3,r4,r3
1000b52c:	18c00003 	ldbu	r3,0(r3)
1000b530:	1885883a 	add	r2,r3,r2
1000b534:	00c00804 	movi	r3,32
1000b538:	1887c83a 	sub	r3,r3,r2
1000b53c:	1800a51e 	bne	r3,zero,1000b7d4 <__udivdi3+0x484>
1000b540:	882ad43a 	srli	r21,r17,16
1000b544:	8461c83a 	sub	r16,r16,r17
1000b548:	8d3fffcc 	andi	r20,r17,65535
1000b54c:	00c00044 	movi	r3,1
1000b550:	a80b883a 	mov	r5,r21
1000b554:	8009883a 	mov	r4,r16
1000b558:	d8c00115 	stw	r3,4(sp)
1000b55c:	000c06c0 	call	1000c06c <__umodsi3>
1000b560:	a80b883a 	mov	r5,r21
1000b564:	8009883a 	mov	r4,r16
1000b568:	1027883a 	mov	r19,r2
1000b56c:	000c0080 	call	1000c008 <__udivsi3>
1000b570:	a00b883a 	mov	r5,r20
1000b574:	1009883a 	mov	r4,r2
1000b578:	102d883a 	mov	r22,r2
1000b57c:	00016040 	call	10001604 <__mulsi3>
1000b580:	9826943a 	slli	r19,r19,16
1000b584:	900ed43a 	srli	r7,r18,16
1000b588:	d8c00117 	ldw	r3,4(sp)
1000b58c:	3cceb03a 	or	r7,r7,r19
1000b590:	3880052e 	bgeu	r7,r2,1000b5a8 <__udivdi3+0x258>
1000b594:	3c4f883a 	add	r7,r7,r17
1000b598:	b13fffc4 	addi	r4,r22,-1
1000b59c:	3c400136 	bltu	r7,r17,1000b5a4 <__udivdi3+0x254>
1000b5a0:	3880e436 	bltu	r7,r2,1000b934 <__udivdi3+0x5e4>
1000b5a4:	202d883a 	mov	r22,r4
1000b5a8:	38a1c83a 	sub	r16,r7,r2
1000b5ac:	8009883a 	mov	r4,r16
1000b5b0:	a80b883a 	mov	r5,r21
1000b5b4:	d8c00115 	stw	r3,4(sp)
1000b5b8:	000c06c0 	call	1000c06c <__umodsi3>
1000b5bc:	1027883a 	mov	r19,r2
1000b5c0:	8009883a 	mov	r4,r16
1000b5c4:	a80b883a 	mov	r5,r21
1000b5c8:	9826943a 	slli	r19,r19,16
1000b5cc:	000c0080 	call	1000c008 <__udivsi3>
1000b5d0:	a00b883a 	mov	r5,r20
1000b5d4:	1009883a 	mov	r4,r2
1000b5d8:	94bfffcc 	andi	r18,r18,65535
1000b5dc:	1021883a 	mov	r16,r2
1000b5e0:	94e4b03a 	or	r18,r18,r19
1000b5e4:	00016040 	call	10001604 <__mulsi3>
1000b5e8:	d8c00117 	ldw	r3,4(sp)
1000b5ec:	9080052e 	bgeu	r18,r2,1000b604 <__udivdi3+0x2b4>
1000b5f0:	8ca5883a 	add	r18,r17,r18
1000b5f4:	813fffc4 	addi	r4,r16,-1
1000b5f8:	9440ad36 	bltu	r18,r17,1000b8b0 <__udivdi3+0x560>
1000b5fc:	9080ac2e 	bgeu	r18,r2,1000b8b0 <__udivdi3+0x560>
1000b600:	843fff84 	addi	r16,r16,-2
1000b604:	b004943a 	slli	r2,r22,16
1000b608:	1404b03a 	or	r2,r2,r16
1000b60c:	00000206 	br	1000b618 <__udivdi3+0x2c8>
1000b610:	0007883a 	mov	r3,zero
1000b614:	0005883a 	mov	r2,zero
1000b618:	dfc00b17 	ldw	ra,44(sp)
1000b61c:	df000a17 	ldw	fp,40(sp)
1000b620:	ddc00917 	ldw	r23,36(sp)
1000b624:	dd800817 	ldw	r22,32(sp)
1000b628:	dd400717 	ldw	r21,28(sp)
1000b62c:	dd000617 	ldw	r20,24(sp)
1000b630:	dcc00517 	ldw	r19,20(sp)
1000b634:	dc800417 	ldw	r18,16(sp)
1000b638:	dc400317 	ldw	r17,12(sp)
1000b63c:	dc000217 	ldw	r16,8(sp)
1000b640:	dec00c04 	addi	sp,sp,48
1000b644:	f800283a 	ret
1000b648:	00803fc4 	movi	r2,255
1000b64c:	11c5803a 	cmpltu	r2,r2,r7
1000b650:	100490fa 	slli	r2,r2,3
1000b654:	003f9906 	br	1000b4bc <__alt_data_end+0xf800b4bc>
1000b658:	00803fc4 	movi	r2,255
1000b65c:	1445803a 	cmpltu	r2,r2,r17
1000b660:	100490fa 	slli	r2,r2,3
1000b664:	003fad06 	br	1000b51c <__alt_data_end+0xf800b51c>
1000b668:	00804034 	movhi	r2,256
1000b66c:	10bfffc4 	addi	r2,r2,-1
1000b670:	11809f36 	bltu	r2,r6,1000b8f0 <__udivdi3+0x5a0>
1000b674:	00800404 	movi	r2,16
1000b678:	003f4c06 	br	1000b3ac <__alt_data_end+0xf800b3ac>
1000b67c:	3dce983a 	sll	r7,r7,r23
1000b680:	30b8d83a 	srl	fp,r6,r2
1000b684:	80a2d83a 	srl	r17,r16,r2
1000b688:	35cc983a 	sll	r6,r6,r23
1000b68c:	3f38b03a 	or	fp,r7,fp
1000b690:	e024d43a 	srli	r18,fp,16
1000b694:	9884d83a 	srl	r2,r19,r2
1000b698:	85e0983a 	sll	r16,r16,r23
1000b69c:	8809883a 	mov	r4,r17
1000b6a0:	900b883a 	mov	r5,r18
1000b6a4:	d9800015 	stw	r6,0(sp)
1000b6a8:	1420b03a 	or	r16,r2,r16
1000b6ac:	000c06c0 	call	1000c06c <__umodsi3>
1000b6b0:	900b883a 	mov	r5,r18
1000b6b4:	8809883a 	mov	r4,r17
1000b6b8:	1029883a 	mov	r20,r2
1000b6bc:	e5bfffcc 	andi	r22,fp,65535
1000b6c0:	000c0080 	call	1000c008 <__udivsi3>
1000b6c4:	100b883a 	mov	r5,r2
1000b6c8:	b009883a 	mov	r4,r22
1000b6cc:	102b883a 	mov	r21,r2
1000b6d0:	00016040 	call	10001604 <__mulsi3>
1000b6d4:	a028943a 	slli	r20,r20,16
1000b6d8:	8006d43a 	srli	r3,r16,16
1000b6dc:	1d06b03a 	or	r3,r3,r20
1000b6e0:	1880042e 	bgeu	r3,r2,1000b6f4 <__udivdi3+0x3a4>
1000b6e4:	1f07883a 	add	r3,r3,fp
1000b6e8:	a93fffc4 	addi	r4,r21,-1
1000b6ec:	1f00892e 	bgeu	r3,fp,1000b914 <__udivdi3+0x5c4>
1000b6f0:	202b883a 	mov	r21,r4
1000b6f4:	18a3c83a 	sub	r17,r3,r2
1000b6f8:	8809883a 	mov	r4,r17
1000b6fc:	900b883a 	mov	r5,r18
1000b700:	000c06c0 	call	1000c06c <__umodsi3>
1000b704:	1029883a 	mov	r20,r2
1000b708:	8809883a 	mov	r4,r17
1000b70c:	900b883a 	mov	r5,r18
1000b710:	a028943a 	slli	r20,r20,16
1000b714:	000c0080 	call	1000c008 <__udivsi3>
1000b718:	100b883a 	mov	r5,r2
1000b71c:	b009883a 	mov	r4,r22
1000b720:	843fffcc 	andi	r16,r16,65535
1000b724:	1023883a 	mov	r17,r2
1000b728:	8520b03a 	or	r16,r16,r20
1000b72c:	00016040 	call	10001604 <__mulsi3>
1000b730:	8080042e 	bgeu	r16,r2,1000b744 <__udivdi3+0x3f4>
1000b734:	8721883a 	add	r16,r16,fp
1000b738:	88ffffc4 	addi	r3,r17,-1
1000b73c:	8700712e 	bgeu	r16,fp,1000b904 <__udivdi3+0x5b4>
1000b740:	1823883a 	mov	r17,r3
1000b744:	a80e943a 	slli	r7,r21,16
1000b748:	d8c00017 	ldw	r3,0(sp)
1000b74c:	80a1c83a 	sub	r16,r16,r2
1000b750:	3c64b03a 	or	r18,r7,r17
1000b754:	1d3fffcc 	andi	r20,r3,65535
1000b758:	9022d43a 	srli	r17,r18,16
1000b75c:	95bfffcc 	andi	r22,r18,65535
1000b760:	a00b883a 	mov	r5,r20
1000b764:	b009883a 	mov	r4,r22
1000b768:	182ad43a 	srli	r21,r3,16
1000b76c:	00016040 	call	10001604 <__mulsi3>
1000b770:	a00b883a 	mov	r5,r20
1000b774:	8809883a 	mov	r4,r17
1000b778:	1039883a 	mov	fp,r2
1000b77c:	00016040 	call	10001604 <__mulsi3>
1000b780:	8809883a 	mov	r4,r17
1000b784:	a80b883a 	mov	r5,r21
1000b788:	1029883a 	mov	r20,r2
1000b78c:	00016040 	call	10001604 <__mulsi3>
1000b790:	a80b883a 	mov	r5,r21
1000b794:	b009883a 	mov	r4,r22
1000b798:	1023883a 	mov	r17,r2
1000b79c:	00016040 	call	10001604 <__mulsi3>
1000b7a0:	e006d43a 	srli	r3,fp,16
1000b7a4:	1505883a 	add	r2,r2,r20
1000b7a8:	1887883a 	add	r3,r3,r2
1000b7ac:	1d00022e 	bgeu	r3,r20,1000b7b8 <__udivdi3+0x468>
1000b7b0:	00800074 	movhi	r2,1
1000b7b4:	88a3883a 	add	r17,r17,r2
1000b7b8:	1804d43a 	srli	r2,r3,16
1000b7bc:	1463883a 	add	r17,r2,r17
1000b7c0:	84404436 	bltu	r16,r17,1000b8d4 <__udivdi3+0x584>
1000b7c4:	84403e26 	beq	r16,r17,1000b8c0 <__udivdi3+0x570>
1000b7c8:	9005883a 	mov	r2,r18
1000b7cc:	0007883a 	mov	r3,zero
1000b7d0:	003f9106 	br	1000b618 <__alt_data_end+0xf800b618>
1000b7d4:	88e2983a 	sll	r17,r17,r3
1000b7d8:	80aed83a 	srl	r23,r16,r2
1000b7dc:	80e0983a 	sll	r16,r16,r3
1000b7e0:	882ad43a 	srli	r21,r17,16
1000b7e4:	9884d83a 	srl	r2,r19,r2
1000b7e8:	b809883a 	mov	r4,r23
1000b7ec:	a80b883a 	mov	r5,r21
1000b7f0:	98e4983a 	sll	r18,r19,r3
1000b7f4:	142cb03a 	or	r22,r2,r16
1000b7f8:	000c06c0 	call	1000c06c <__umodsi3>
1000b7fc:	b809883a 	mov	r4,r23
1000b800:	a80b883a 	mov	r5,r21
1000b804:	1027883a 	mov	r19,r2
1000b808:	8d3fffcc 	andi	r20,r17,65535
1000b80c:	000c0080 	call	1000c008 <__udivsi3>
1000b810:	a009883a 	mov	r4,r20
1000b814:	100b883a 	mov	r5,r2
1000b818:	102f883a 	mov	r23,r2
1000b81c:	00016040 	call	10001604 <__mulsi3>
1000b820:	9826943a 	slli	r19,r19,16
1000b824:	b008d43a 	srli	r4,r22,16
1000b828:	24c8b03a 	or	r4,r4,r19
1000b82c:	2080062e 	bgeu	r4,r2,1000b848 <__udivdi3+0x4f8>
1000b830:	2449883a 	add	r4,r4,r17
1000b834:	b8ffffc4 	addi	r3,r23,-1
1000b838:	24403c36 	bltu	r4,r17,1000b92c <__udivdi3+0x5dc>
1000b83c:	20803b2e 	bgeu	r4,r2,1000b92c <__udivdi3+0x5dc>
1000b840:	bdffff84 	addi	r23,r23,-2
1000b844:	2449883a 	add	r4,r4,r17
1000b848:	20a1c83a 	sub	r16,r4,r2
1000b84c:	a80b883a 	mov	r5,r21
1000b850:	8009883a 	mov	r4,r16
1000b854:	000c06c0 	call	1000c06c <__umodsi3>
1000b858:	a80b883a 	mov	r5,r21
1000b85c:	8009883a 	mov	r4,r16
1000b860:	1027883a 	mov	r19,r2
1000b864:	000c0080 	call	1000c008 <__udivsi3>
1000b868:	a009883a 	mov	r4,r20
1000b86c:	100b883a 	mov	r5,r2
1000b870:	9826943a 	slli	r19,r19,16
1000b874:	1039883a 	mov	fp,r2
1000b878:	00016040 	call	10001604 <__mulsi3>
1000b87c:	b13fffcc 	andi	r4,r22,65535
1000b880:	24c8b03a 	or	r4,r4,r19
1000b884:	2080062e 	bgeu	r4,r2,1000b8a0 <__udivdi3+0x550>
1000b888:	2449883a 	add	r4,r4,r17
1000b88c:	e0ffffc4 	addi	r3,fp,-1
1000b890:	24402436 	bltu	r4,r17,1000b924 <__udivdi3+0x5d4>
1000b894:	2080232e 	bgeu	r4,r2,1000b924 <__udivdi3+0x5d4>
1000b898:	e73fff84 	addi	fp,fp,-2
1000b89c:	2449883a 	add	r4,r4,r17
1000b8a0:	b82e943a 	slli	r23,r23,16
1000b8a4:	20a1c83a 	sub	r16,r4,r2
1000b8a8:	bf06b03a 	or	r3,r23,fp
1000b8ac:	003f2806 	br	1000b550 <__alt_data_end+0xf800b550>
1000b8b0:	2021883a 	mov	r16,r4
1000b8b4:	003f5306 	br	1000b604 <__alt_data_end+0xf800b604>
1000b8b8:	1821883a 	mov	r16,r3
1000b8bc:	003ef406 	br	1000b490 <__alt_data_end+0xf800b490>
1000b8c0:	1806943a 	slli	r3,r3,16
1000b8c4:	9de6983a 	sll	r19,r19,r23
1000b8c8:	e73fffcc 	andi	fp,fp,65535
1000b8cc:	1f07883a 	add	r3,r3,fp
1000b8d0:	98ffbd2e 	bgeu	r19,r3,1000b7c8 <__alt_data_end+0xf800b7c8>
1000b8d4:	90bfffc4 	addi	r2,r18,-1
1000b8d8:	0007883a 	mov	r3,zero
1000b8dc:	003f4e06 	br	1000b618 <__alt_data_end+0xf800b618>
1000b8e0:	00800604 	movi	r2,24
1000b8e4:	003ef506 	br	1000b4bc <__alt_data_end+0xf800b4bc>
1000b8e8:	00800604 	movi	r2,24
1000b8ec:	003f0b06 	br	1000b51c <__alt_data_end+0xf800b51c>
1000b8f0:	00800604 	movi	r2,24
1000b8f4:	003ead06 	br	1000b3ac <__alt_data_end+0xf800b3ac>
1000b8f8:	0007883a 	mov	r3,zero
1000b8fc:	00800044 	movi	r2,1
1000b900:	003f4506 	br	1000b618 <__alt_data_end+0xf800b618>
1000b904:	80bf8e2e 	bgeu	r16,r2,1000b740 <__alt_data_end+0xf800b740>
1000b908:	8c7fff84 	addi	r17,r17,-2
1000b90c:	8721883a 	add	r16,r16,fp
1000b910:	003f8c06 	br	1000b744 <__alt_data_end+0xf800b744>
1000b914:	18bf762e 	bgeu	r3,r2,1000b6f0 <__alt_data_end+0xf800b6f0>
1000b918:	ad7fff84 	addi	r21,r21,-2
1000b91c:	1f07883a 	add	r3,r3,fp
1000b920:	003f7406 	br	1000b6f4 <__alt_data_end+0xf800b6f4>
1000b924:	1839883a 	mov	fp,r3
1000b928:	003fdd06 	br	1000b8a0 <__alt_data_end+0xf800b8a0>
1000b92c:	182f883a 	mov	r23,r3
1000b930:	003fc506 	br	1000b848 <__alt_data_end+0xf800b848>
1000b934:	b5bfff84 	addi	r22,r22,-2
1000b938:	3c4f883a 	add	r7,r7,r17
1000b93c:	003f1a06 	br	1000b5a8 <__alt_data_end+0xf800b5a8>
1000b940:	b5bfff84 	addi	r22,r22,-2
1000b944:	1c47883a 	add	r3,r3,r17
1000b948:	003ebc06 	br	1000b43c <__alt_data_end+0xf800b43c>

1000b94c <__umoddi3>:
1000b94c:	defff304 	addi	sp,sp,-52
1000b950:	df000b15 	stw	fp,44(sp)
1000b954:	dc400415 	stw	r17,16(sp)
1000b958:	dc000315 	stw	r16,12(sp)
1000b95c:	dfc00c15 	stw	ra,48(sp)
1000b960:	ddc00a15 	stw	r23,40(sp)
1000b964:	dd800915 	stw	r22,36(sp)
1000b968:	dd400815 	stw	r21,32(sp)
1000b96c:	dd000715 	stw	r20,28(sp)
1000b970:	dcc00615 	stw	r19,24(sp)
1000b974:	dc800515 	stw	r18,20(sp)
1000b978:	2021883a 	mov	r16,r4
1000b97c:	2823883a 	mov	r17,r5
1000b980:	2839883a 	mov	fp,r5
1000b984:	3800401e 	bne	r7,zero,1000ba88 <__umoddi3+0x13c>
1000b988:	3027883a 	mov	r19,r6
1000b98c:	2029883a 	mov	r20,r4
1000b990:	2980552e 	bgeu	r5,r6,1000bae8 <__umoddi3+0x19c>
1000b994:	00bfffd4 	movui	r2,65535
1000b998:	1180a236 	bltu	r2,r6,1000bc24 <__umoddi3+0x2d8>
1000b99c:	01003fc4 	movi	r4,255
1000b9a0:	2189803a 	cmpltu	r4,r4,r6
1000b9a4:	200890fa 	slli	r4,r4,3
1000b9a8:	3104d83a 	srl	r2,r6,r4
1000b9ac:	00c40074 	movhi	r3,4097
1000b9b0:	18c6cd04 	addi	r3,r3,6964
1000b9b4:	1885883a 	add	r2,r3,r2
1000b9b8:	10c00003 	ldbu	r3,0(r2)
1000b9bc:	00800804 	movi	r2,32
1000b9c0:	1909883a 	add	r4,r3,r4
1000b9c4:	1125c83a 	sub	r18,r2,r4
1000b9c8:	90000526 	beq	r18,zero,1000b9e0 <__umoddi3+0x94>
1000b9cc:	8ca2983a 	sll	r17,r17,r18
1000b9d0:	8108d83a 	srl	r4,r16,r4
1000b9d4:	34a6983a 	sll	r19,r6,r18
1000b9d8:	84a8983a 	sll	r20,r16,r18
1000b9dc:	2478b03a 	or	fp,r4,r17
1000b9e0:	982cd43a 	srli	r22,r19,16
1000b9e4:	e009883a 	mov	r4,fp
1000b9e8:	9dffffcc 	andi	r23,r19,65535
1000b9ec:	b00b883a 	mov	r5,r22
1000b9f0:	000c06c0 	call	1000c06c <__umodsi3>
1000b9f4:	b00b883a 	mov	r5,r22
1000b9f8:	e009883a 	mov	r4,fp
1000b9fc:	102b883a 	mov	r21,r2
1000ba00:	000c0080 	call	1000c008 <__udivsi3>
1000ba04:	100b883a 	mov	r5,r2
1000ba08:	b809883a 	mov	r4,r23
1000ba0c:	00016040 	call	10001604 <__mulsi3>
1000ba10:	a82a943a 	slli	r21,r21,16
1000ba14:	a006d43a 	srli	r3,r20,16
1000ba18:	1d46b03a 	or	r3,r3,r21
1000ba1c:	1880032e 	bgeu	r3,r2,1000ba2c <__umoddi3+0xe0>
1000ba20:	1cc7883a 	add	r3,r3,r19
1000ba24:	1cc00136 	bltu	r3,r19,1000ba2c <__umoddi3+0xe0>
1000ba28:	18813136 	bltu	r3,r2,1000bef0 <__umoddi3+0x5a4>
1000ba2c:	18a1c83a 	sub	r16,r3,r2
1000ba30:	b00b883a 	mov	r5,r22
1000ba34:	8009883a 	mov	r4,r16
1000ba38:	000c06c0 	call	1000c06c <__umodsi3>
1000ba3c:	b00b883a 	mov	r5,r22
1000ba40:	8009883a 	mov	r4,r16
1000ba44:	1023883a 	mov	r17,r2
1000ba48:	000c0080 	call	1000c008 <__udivsi3>
1000ba4c:	100b883a 	mov	r5,r2
1000ba50:	b809883a 	mov	r4,r23
1000ba54:	8822943a 	slli	r17,r17,16
1000ba58:	00016040 	call	10001604 <__mulsi3>
1000ba5c:	a0ffffcc 	andi	r3,r20,65535
1000ba60:	1c46b03a 	or	r3,r3,r17
1000ba64:	1880042e 	bgeu	r3,r2,1000ba78 <__umoddi3+0x12c>
1000ba68:	1cc7883a 	add	r3,r3,r19
1000ba6c:	1cc00236 	bltu	r3,r19,1000ba78 <__umoddi3+0x12c>
1000ba70:	1880012e 	bgeu	r3,r2,1000ba78 <__umoddi3+0x12c>
1000ba74:	1cc7883a 	add	r3,r3,r19
1000ba78:	1885c83a 	sub	r2,r3,r2
1000ba7c:	1484d83a 	srl	r2,r2,r18
1000ba80:	0007883a 	mov	r3,zero
1000ba84:	00005306 	br	1000bbd4 <__umoddi3+0x288>
1000ba88:	29c05036 	bltu	r5,r7,1000bbcc <__umoddi3+0x280>
1000ba8c:	00bfffd4 	movui	r2,65535
1000ba90:	11c05c2e 	bgeu	r2,r7,1000bc04 <__umoddi3+0x2b8>
1000ba94:	00804034 	movhi	r2,256
1000ba98:	10bfffc4 	addi	r2,r2,-1
1000ba9c:	11c10636 	bltu	r2,r7,1000beb8 <__umoddi3+0x56c>
1000baa0:	01000404 	movi	r4,16
1000baa4:	3904d83a 	srl	r2,r7,r4
1000baa8:	00c40074 	movhi	r3,4097
1000baac:	18c6cd04 	addi	r3,r3,6964
1000bab0:	1885883a 	add	r2,r3,r2
1000bab4:	14c00003 	ldbu	r19,0(r2)
1000bab8:	00c00804 	movi	r3,32
1000babc:	9927883a 	add	r19,r19,r4
1000bac0:	1ce9c83a 	sub	r20,r3,r19
1000bac4:	a0005c1e 	bne	r20,zero,1000bc38 <__umoddi3+0x2ec>
1000bac8:	3c400136 	bltu	r7,r17,1000bad0 <__umoddi3+0x184>
1000bacc:	81810a36 	bltu	r16,r6,1000bef8 <__umoddi3+0x5ac>
1000bad0:	8185c83a 	sub	r2,r16,r6
1000bad4:	89e3c83a 	sub	r17,r17,r7
1000bad8:	8089803a 	cmpltu	r4,r16,r2
1000badc:	8939c83a 	sub	fp,r17,r4
1000bae0:	e007883a 	mov	r3,fp
1000bae4:	00003b06 	br	1000bbd4 <__umoddi3+0x288>
1000bae8:	3000041e 	bne	r6,zero,1000bafc <__umoddi3+0x1b0>
1000baec:	000b883a 	mov	r5,zero
1000baf0:	01000044 	movi	r4,1
1000baf4:	000c0080 	call	1000c008 <__udivsi3>
1000baf8:	1027883a 	mov	r19,r2
1000bafc:	00bfffd4 	movui	r2,65535
1000bb00:	14c0442e 	bgeu	r2,r19,1000bc14 <__umoddi3+0x2c8>
1000bb04:	00804034 	movhi	r2,256
1000bb08:	10bfffc4 	addi	r2,r2,-1
1000bb0c:	14c0ec36 	bltu	r2,r19,1000bec0 <__umoddi3+0x574>
1000bb10:	00800404 	movi	r2,16
1000bb14:	9886d83a 	srl	r3,r19,r2
1000bb18:	01040074 	movhi	r4,4097
1000bb1c:	2106cd04 	addi	r4,r4,6964
1000bb20:	20c7883a 	add	r3,r4,r3
1000bb24:	18c00003 	ldbu	r3,0(r3)
1000bb28:	1887883a 	add	r3,r3,r2
1000bb2c:	00800804 	movi	r2,32
1000bb30:	10e5c83a 	sub	r18,r2,r3
1000bb34:	9000ab1e 	bne	r18,zero,1000bde4 <__umoddi3+0x498>
1000bb38:	982cd43a 	srli	r22,r19,16
1000bb3c:	8ce3c83a 	sub	r17,r17,r19
1000bb40:	9dffffcc 	andi	r23,r19,65535
1000bb44:	b00b883a 	mov	r5,r22
1000bb48:	8809883a 	mov	r4,r17
1000bb4c:	000c06c0 	call	1000c06c <__umodsi3>
1000bb50:	b00b883a 	mov	r5,r22
1000bb54:	8809883a 	mov	r4,r17
1000bb58:	102b883a 	mov	r21,r2
1000bb5c:	000c0080 	call	1000c008 <__udivsi3>
1000bb60:	b80b883a 	mov	r5,r23
1000bb64:	1009883a 	mov	r4,r2
1000bb68:	00016040 	call	10001604 <__mulsi3>
1000bb6c:	a82a943a 	slli	r21,r21,16
1000bb70:	a006d43a 	srli	r3,r20,16
1000bb74:	1d46b03a 	or	r3,r3,r21
1000bb78:	1880042e 	bgeu	r3,r2,1000bb8c <__umoddi3+0x240>
1000bb7c:	1cc7883a 	add	r3,r3,r19
1000bb80:	1cc00236 	bltu	r3,r19,1000bb8c <__umoddi3+0x240>
1000bb84:	1880012e 	bgeu	r3,r2,1000bb8c <__umoddi3+0x240>
1000bb88:	1cc7883a 	add	r3,r3,r19
1000bb8c:	18a1c83a 	sub	r16,r3,r2
1000bb90:	b00b883a 	mov	r5,r22
1000bb94:	8009883a 	mov	r4,r16
1000bb98:	000c06c0 	call	1000c06c <__umodsi3>
1000bb9c:	1023883a 	mov	r17,r2
1000bba0:	b00b883a 	mov	r5,r22
1000bba4:	8009883a 	mov	r4,r16
1000bba8:	000c0080 	call	1000c008 <__udivsi3>
1000bbac:	8822943a 	slli	r17,r17,16
1000bbb0:	b80b883a 	mov	r5,r23
1000bbb4:	1009883a 	mov	r4,r2
1000bbb8:	00016040 	call	10001604 <__mulsi3>
1000bbbc:	a53fffcc 	andi	r20,r20,65535
1000bbc0:	a446b03a 	or	r3,r20,r17
1000bbc4:	18bfac2e 	bgeu	r3,r2,1000ba78 <__alt_data_end+0xf800ba78>
1000bbc8:	003fa706 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000bbcc:	2005883a 	mov	r2,r4
1000bbd0:	2807883a 	mov	r3,r5
1000bbd4:	dfc00c17 	ldw	ra,48(sp)
1000bbd8:	df000b17 	ldw	fp,44(sp)
1000bbdc:	ddc00a17 	ldw	r23,40(sp)
1000bbe0:	dd800917 	ldw	r22,36(sp)
1000bbe4:	dd400817 	ldw	r21,32(sp)
1000bbe8:	dd000717 	ldw	r20,28(sp)
1000bbec:	dcc00617 	ldw	r19,24(sp)
1000bbf0:	dc800517 	ldw	r18,20(sp)
1000bbf4:	dc400417 	ldw	r17,16(sp)
1000bbf8:	dc000317 	ldw	r16,12(sp)
1000bbfc:	dec00d04 	addi	sp,sp,52
1000bc00:	f800283a 	ret
1000bc04:	04c03fc4 	movi	r19,255
1000bc08:	99c9803a 	cmpltu	r4,r19,r7
1000bc0c:	200890fa 	slli	r4,r4,3
1000bc10:	003fa406 	br	1000baa4 <__alt_data_end+0xf800baa4>
1000bc14:	00803fc4 	movi	r2,255
1000bc18:	14c5803a 	cmpltu	r2,r2,r19
1000bc1c:	100490fa 	slli	r2,r2,3
1000bc20:	003fbc06 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000bc24:	00804034 	movhi	r2,256
1000bc28:	10bfffc4 	addi	r2,r2,-1
1000bc2c:	1180a636 	bltu	r2,r6,1000bec8 <__umoddi3+0x57c>
1000bc30:	01000404 	movi	r4,16
1000bc34:	003f5c06 	br	1000b9a8 <__alt_data_end+0xf800b9a8>
1000bc38:	3d0e983a 	sll	r7,r7,r20
1000bc3c:	34ead83a 	srl	r21,r6,r19
1000bc40:	8cc6d83a 	srl	r3,r17,r19
1000bc44:	8d10983a 	sll	r8,r17,r20
1000bc48:	3d6ab03a 	or	r21,r7,r21
1000bc4c:	a82cd43a 	srli	r22,r21,16
1000bc50:	84e2d83a 	srl	r17,r16,r19
1000bc54:	1809883a 	mov	r4,r3
1000bc58:	b00b883a 	mov	r5,r22
1000bc5c:	8a22b03a 	or	r17,r17,r8
1000bc60:	3524983a 	sll	r18,r6,r20
1000bc64:	dc400015 	stw	r17,0(sp)
1000bc68:	d8c00115 	stw	r3,4(sp)
1000bc6c:	000c06c0 	call	1000c06c <__umodsi3>
1000bc70:	d8c00117 	ldw	r3,4(sp)
1000bc74:	b00b883a 	mov	r5,r22
1000bc78:	1039883a 	mov	fp,r2
1000bc7c:	1809883a 	mov	r4,r3
1000bc80:	000c0080 	call	1000c008 <__udivsi3>
1000bc84:	adffffcc 	andi	r23,r21,65535
1000bc88:	100b883a 	mov	r5,r2
1000bc8c:	b809883a 	mov	r4,r23
1000bc90:	1023883a 	mov	r17,r2
1000bc94:	00016040 	call	10001604 <__mulsi3>
1000bc98:	d9400017 	ldw	r5,0(sp)
1000bc9c:	e008943a 	slli	r4,fp,16
1000bca0:	8520983a 	sll	r16,r16,r20
1000bca4:	2806d43a 	srli	r3,r5,16
1000bca8:	1906b03a 	or	r3,r3,r4
1000bcac:	1880042e 	bgeu	r3,r2,1000bcc0 <__umoddi3+0x374>
1000bcb0:	1d47883a 	add	r3,r3,r21
1000bcb4:	893fffc4 	addi	r4,r17,-1
1000bcb8:	1d40892e 	bgeu	r3,r21,1000bee0 <__umoddi3+0x594>
1000bcbc:	2023883a 	mov	r17,r4
1000bcc0:	18b9c83a 	sub	fp,r3,r2
1000bcc4:	b00b883a 	mov	r5,r22
1000bcc8:	e009883a 	mov	r4,fp
1000bccc:	000c06c0 	call	1000c06c <__umodsi3>
1000bcd0:	b00b883a 	mov	r5,r22
1000bcd4:	e009883a 	mov	r4,fp
1000bcd8:	d8800215 	stw	r2,8(sp)
1000bcdc:	000c0080 	call	1000c008 <__udivsi3>
1000bce0:	100b883a 	mov	r5,r2
1000bce4:	b809883a 	mov	r4,r23
1000bce8:	102d883a 	mov	r22,r2
1000bcec:	00016040 	call	10001604 <__mulsi3>
1000bcf0:	d9800217 	ldw	r6,8(sp)
1000bcf4:	d8c00017 	ldw	r3,0(sp)
1000bcf8:	300c943a 	slli	r6,r6,16
1000bcfc:	1a3fffcc 	andi	r8,r3,65535
1000bd00:	4190b03a 	or	r8,r8,r6
1000bd04:	4080042e 	bgeu	r8,r2,1000bd18 <__umoddi3+0x3cc>
1000bd08:	4551883a 	add	r8,r8,r21
1000bd0c:	b0ffffc4 	addi	r3,r22,-1
1000bd10:	45406f2e 	bgeu	r8,r21,1000bed0 <__umoddi3+0x584>
1000bd14:	182d883a 	mov	r22,r3
1000bd18:	880e943a 	slli	r7,r17,16
1000bd1c:	9006d43a 	srli	r3,r18,16
1000bd20:	91bfffcc 	andi	r6,r18,65535
1000bd24:	3dacb03a 	or	r22,r7,r22
1000bd28:	b02ed43a 	srli	r23,r22,16
1000bd2c:	b5bfffcc 	andi	r22,r22,65535
1000bd30:	300b883a 	mov	r5,r6
1000bd34:	b009883a 	mov	r4,r22
1000bd38:	40a3c83a 	sub	r17,r8,r2
1000bd3c:	d8c00115 	stw	r3,4(sp)
1000bd40:	d9800215 	stw	r6,8(sp)
1000bd44:	00016040 	call	10001604 <__mulsi3>
1000bd48:	d9800217 	ldw	r6,8(sp)
1000bd4c:	b809883a 	mov	r4,r23
1000bd50:	1039883a 	mov	fp,r2
1000bd54:	300b883a 	mov	r5,r6
1000bd58:	00016040 	call	10001604 <__mulsi3>
1000bd5c:	d8c00117 	ldw	r3,4(sp)
1000bd60:	b809883a 	mov	r4,r23
1000bd64:	d8800215 	stw	r2,8(sp)
1000bd68:	180b883a 	mov	r5,r3
1000bd6c:	00016040 	call	10001604 <__mulsi3>
1000bd70:	d8c00117 	ldw	r3,4(sp)
1000bd74:	b009883a 	mov	r4,r22
1000bd78:	102f883a 	mov	r23,r2
1000bd7c:	180b883a 	mov	r5,r3
1000bd80:	00016040 	call	10001604 <__mulsi3>
1000bd84:	d9800217 	ldw	r6,8(sp)
1000bd88:	e006d43a 	srli	r3,fp,16
1000bd8c:	1185883a 	add	r2,r2,r6
1000bd90:	1885883a 	add	r2,r3,r2
1000bd94:	1180022e 	bgeu	r2,r6,1000bda0 <__umoddi3+0x454>
1000bd98:	00c00074 	movhi	r3,1
1000bd9c:	b8ef883a 	add	r23,r23,r3
1000bda0:	1006d43a 	srli	r3,r2,16
1000bda4:	1004943a 	slli	r2,r2,16
1000bda8:	e73fffcc 	andi	fp,fp,65535
1000bdac:	1dc7883a 	add	r3,r3,r23
1000bdb0:	1739883a 	add	fp,r2,fp
1000bdb4:	88c03a36 	bltu	r17,r3,1000bea0 <__umoddi3+0x554>
1000bdb8:	88c05126 	beq	r17,r3,1000bf00 <__umoddi3+0x5b4>
1000bdbc:	88c9c83a 	sub	r4,r17,r3
1000bdc0:	e00f883a 	mov	r7,fp
1000bdc4:	81cfc83a 	sub	r7,r16,r7
1000bdc8:	81c7803a 	cmpltu	r3,r16,r7
1000bdcc:	20c7c83a 	sub	r3,r4,r3
1000bdd0:	1cc4983a 	sll	r2,r3,r19
1000bdd4:	3d0ed83a 	srl	r7,r7,r20
1000bdd8:	1d06d83a 	srl	r3,r3,r20
1000bddc:	11c4b03a 	or	r2,r2,r7
1000bde0:	003f7c06 	br	1000bbd4 <__alt_data_end+0xf800bbd4>
1000bde4:	9ca6983a 	sll	r19,r19,r18
1000bde8:	88f8d83a 	srl	fp,r17,r3
1000bdec:	80c4d83a 	srl	r2,r16,r3
1000bdf0:	982cd43a 	srli	r22,r19,16
1000bdf4:	8ca2983a 	sll	r17,r17,r18
1000bdf8:	e009883a 	mov	r4,fp
1000bdfc:	b00b883a 	mov	r5,r22
1000be00:	146ab03a 	or	r21,r2,r17
1000be04:	000c06c0 	call	1000c06c <__umodsi3>
1000be08:	b00b883a 	mov	r5,r22
1000be0c:	e009883a 	mov	r4,fp
1000be10:	1029883a 	mov	r20,r2
1000be14:	9dffffcc 	andi	r23,r19,65535
1000be18:	000c0080 	call	1000c008 <__udivsi3>
1000be1c:	b809883a 	mov	r4,r23
1000be20:	100b883a 	mov	r5,r2
1000be24:	00016040 	call	10001604 <__mulsi3>
1000be28:	a008943a 	slli	r4,r20,16
1000be2c:	a806d43a 	srli	r3,r21,16
1000be30:	84a8983a 	sll	r20,r16,r18
1000be34:	1906b03a 	or	r3,r3,r4
1000be38:	1880042e 	bgeu	r3,r2,1000be4c <__umoddi3+0x500>
1000be3c:	1cc7883a 	add	r3,r3,r19
1000be40:	1cc00236 	bltu	r3,r19,1000be4c <__umoddi3+0x500>
1000be44:	1880012e 	bgeu	r3,r2,1000be4c <__umoddi3+0x500>
1000be48:	1cc7883a 	add	r3,r3,r19
1000be4c:	18a3c83a 	sub	r17,r3,r2
1000be50:	b00b883a 	mov	r5,r22
1000be54:	8809883a 	mov	r4,r17
1000be58:	000c06c0 	call	1000c06c <__umodsi3>
1000be5c:	b00b883a 	mov	r5,r22
1000be60:	8809883a 	mov	r4,r17
1000be64:	1021883a 	mov	r16,r2
1000be68:	000c0080 	call	1000c008 <__udivsi3>
1000be6c:	100b883a 	mov	r5,r2
1000be70:	b809883a 	mov	r4,r23
1000be74:	8020943a 	slli	r16,r16,16
1000be78:	00016040 	call	10001604 <__mulsi3>
1000be7c:	a8ffffcc 	andi	r3,r21,65535
1000be80:	1c06b03a 	or	r3,r3,r16
1000be84:	1880042e 	bgeu	r3,r2,1000be98 <__umoddi3+0x54c>
1000be88:	1cc7883a 	add	r3,r3,r19
1000be8c:	1cc00236 	bltu	r3,r19,1000be98 <__umoddi3+0x54c>
1000be90:	1880012e 	bgeu	r3,r2,1000be98 <__umoddi3+0x54c>
1000be94:	1cc7883a 	add	r3,r3,r19
1000be98:	18a3c83a 	sub	r17,r3,r2
1000be9c:	003f2906 	br	1000bb44 <__alt_data_end+0xf800bb44>
1000bea0:	e48fc83a 	sub	r7,fp,r18
1000bea4:	1d49c83a 	sub	r4,r3,r21
1000bea8:	e1f9803a 	cmpltu	fp,fp,r7
1000beac:	2739c83a 	sub	fp,r4,fp
1000beb0:	8f09c83a 	sub	r4,r17,fp
1000beb4:	003fc306 	br	1000bdc4 <__alt_data_end+0xf800bdc4>
1000beb8:	01000604 	movi	r4,24
1000bebc:	003ef906 	br	1000baa4 <__alt_data_end+0xf800baa4>
1000bec0:	00800604 	movi	r2,24
1000bec4:	003f1306 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000bec8:	01000604 	movi	r4,24
1000becc:	003eb606 	br	1000b9a8 <__alt_data_end+0xf800b9a8>
1000bed0:	40bf902e 	bgeu	r8,r2,1000bd14 <__alt_data_end+0xf800bd14>
1000bed4:	b5bfff84 	addi	r22,r22,-2
1000bed8:	4551883a 	add	r8,r8,r21
1000bedc:	003f8e06 	br	1000bd18 <__alt_data_end+0xf800bd18>
1000bee0:	18bf762e 	bgeu	r3,r2,1000bcbc <__alt_data_end+0xf800bcbc>
1000bee4:	8c7fff84 	addi	r17,r17,-2
1000bee8:	1d47883a 	add	r3,r3,r21
1000beec:	003f7406 	br	1000bcc0 <__alt_data_end+0xf800bcc0>
1000bef0:	1cc7883a 	add	r3,r3,r19
1000bef4:	003ecd06 	br	1000ba2c <__alt_data_end+0xf800ba2c>
1000bef8:	8005883a 	mov	r2,r16
1000befc:	003ef806 	br	1000bae0 <__alt_data_end+0xf800bae0>
1000bf00:	873fe736 	bltu	r16,fp,1000bea0 <__alt_data_end+0xf800bea0>
1000bf04:	e00f883a 	mov	r7,fp
1000bf08:	0009883a 	mov	r4,zero
1000bf0c:	003fad06 	br	1000bdc4 <__alt_data_end+0xf800bdc4>

1000bf10 <__divsi3>:
1000bf10:	20001b16 	blt	r4,zero,1000bf80 <__divsi3+0x70>
1000bf14:	000f883a 	mov	r7,zero
1000bf18:	28001616 	blt	r5,zero,1000bf74 <__divsi3+0x64>
1000bf1c:	200d883a 	mov	r6,r4
1000bf20:	29001a2e 	bgeu	r5,r4,1000bf8c <__divsi3+0x7c>
1000bf24:	00800804 	movi	r2,32
1000bf28:	00c00044 	movi	r3,1
1000bf2c:	00000106 	br	1000bf34 <__divsi3+0x24>
1000bf30:	10000d26 	beq	r2,zero,1000bf68 <__divsi3+0x58>
1000bf34:	294b883a 	add	r5,r5,r5
1000bf38:	10bfffc4 	addi	r2,r2,-1
1000bf3c:	18c7883a 	add	r3,r3,r3
1000bf40:	293ffb36 	bltu	r5,r4,1000bf30 <__alt_data_end+0xf800bf30>
1000bf44:	0005883a 	mov	r2,zero
1000bf48:	18000726 	beq	r3,zero,1000bf68 <__divsi3+0x58>
1000bf4c:	0005883a 	mov	r2,zero
1000bf50:	31400236 	bltu	r6,r5,1000bf5c <__divsi3+0x4c>
1000bf54:	314dc83a 	sub	r6,r6,r5
1000bf58:	10c4b03a 	or	r2,r2,r3
1000bf5c:	1806d07a 	srli	r3,r3,1
1000bf60:	280ad07a 	srli	r5,r5,1
1000bf64:	183ffa1e 	bne	r3,zero,1000bf50 <__alt_data_end+0xf800bf50>
1000bf68:	38000126 	beq	r7,zero,1000bf70 <__divsi3+0x60>
1000bf6c:	0085c83a 	sub	r2,zero,r2
1000bf70:	f800283a 	ret
1000bf74:	014bc83a 	sub	r5,zero,r5
1000bf78:	39c0005c 	xori	r7,r7,1
1000bf7c:	003fe706 	br	1000bf1c <__alt_data_end+0xf800bf1c>
1000bf80:	0109c83a 	sub	r4,zero,r4
1000bf84:	01c00044 	movi	r7,1
1000bf88:	003fe306 	br	1000bf18 <__alt_data_end+0xf800bf18>
1000bf8c:	00c00044 	movi	r3,1
1000bf90:	003fee06 	br	1000bf4c <__alt_data_end+0xf800bf4c>

1000bf94 <__modsi3>:
1000bf94:	20001716 	blt	r4,zero,1000bff4 <__modsi3+0x60>
1000bf98:	000f883a 	mov	r7,zero
1000bf9c:	2005883a 	mov	r2,r4
1000bfa0:	28001216 	blt	r5,zero,1000bfec <__modsi3+0x58>
1000bfa4:	2900162e 	bgeu	r5,r4,1000c000 <__modsi3+0x6c>
1000bfa8:	01800804 	movi	r6,32
1000bfac:	00c00044 	movi	r3,1
1000bfb0:	00000106 	br	1000bfb8 <__modsi3+0x24>
1000bfb4:	30000a26 	beq	r6,zero,1000bfe0 <__modsi3+0x4c>
1000bfb8:	294b883a 	add	r5,r5,r5
1000bfbc:	31bfffc4 	addi	r6,r6,-1
1000bfc0:	18c7883a 	add	r3,r3,r3
1000bfc4:	293ffb36 	bltu	r5,r4,1000bfb4 <__alt_data_end+0xf800bfb4>
1000bfc8:	18000526 	beq	r3,zero,1000bfe0 <__modsi3+0x4c>
1000bfcc:	1806d07a 	srli	r3,r3,1
1000bfd0:	11400136 	bltu	r2,r5,1000bfd8 <__modsi3+0x44>
1000bfd4:	1145c83a 	sub	r2,r2,r5
1000bfd8:	280ad07a 	srli	r5,r5,1
1000bfdc:	183ffb1e 	bne	r3,zero,1000bfcc <__alt_data_end+0xf800bfcc>
1000bfe0:	38000126 	beq	r7,zero,1000bfe8 <__modsi3+0x54>
1000bfe4:	0085c83a 	sub	r2,zero,r2
1000bfe8:	f800283a 	ret
1000bfec:	014bc83a 	sub	r5,zero,r5
1000bff0:	003fec06 	br	1000bfa4 <__alt_data_end+0xf800bfa4>
1000bff4:	0109c83a 	sub	r4,zero,r4
1000bff8:	01c00044 	movi	r7,1
1000bffc:	003fe706 	br	1000bf9c <__alt_data_end+0xf800bf9c>
1000c000:	00c00044 	movi	r3,1
1000c004:	003ff106 	br	1000bfcc <__alt_data_end+0xf800bfcc>

1000c008 <__udivsi3>:
1000c008:	200d883a 	mov	r6,r4
1000c00c:	2900152e 	bgeu	r5,r4,1000c064 <__udivsi3+0x5c>
1000c010:	28001416 	blt	r5,zero,1000c064 <__udivsi3+0x5c>
1000c014:	00800804 	movi	r2,32
1000c018:	00c00044 	movi	r3,1
1000c01c:	00000206 	br	1000c028 <__udivsi3+0x20>
1000c020:	10000e26 	beq	r2,zero,1000c05c <__udivsi3+0x54>
1000c024:	28000516 	blt	r5,zero,1000c03c <__udivsi3+0x34>
1000c028:	294b883a 	add	r5,r5,r5
1000c02c:	10bfffc4 	addi	r2,r2,-1
1000c030:	18c7883a 	add	r3,r3,r3
1000c034:	293ffa36 	bltu	r5,r4,1000c020 <__alt_data_end+0xf800c020>
1000c038:	18000826 	beq	r3,zero,1000c05c <__udivsi3+0x54>
1000c03c:	0005883a 	mov	r2,zero
1000c040:	31400236 	bltu	r6,r5,1000c04c <__udivsi3+0x44>
1000c044:	314dc83a 	sub	r6,r6,r5
1000c048:	10c4b03a 	or	r2,r2,r3
1000c04c:	1806d07a 	srli	r3,r3,1
1000c050:	280ad07a 	srli	r5,r5,1
1000c054:	183ffa1e 	bne	r3,zero,1000c040 <__alt_data_end+0xf800c040>
1000c058:	f800283a 	ret
1000c05c:	0005883a 	mov	r2,zero
1000c060:	f800283a 	ret
1000c064:	00c00044 	movi	r3,1
1000c068:	003ff406 	br	1000c03c <__alt_data_end+0xf800c03c>

1000c06c <__umodsi3>:
1000c06c:	2005883a 	mov	r2,r4
1000c070:	2900122e 	bgeu	r5,r4,1000c0bc <__umodsi3+0x50>
1000c074:	28001116 	blt	r5,zero,1000c0bc <__umodsi3+0x50>
1000c078:	01800804 	movi	r6,32
1000c07c:	00c00044 	movi	r3,1
1000c080:	00000206 	br	1000c08c <__umodsi3+0x20>
1000c084:	30000c26 	beq	r6,zero,1000c0b8 <__umodsi3+0x4c>
1000c088:	28000516 	blt	r5,zero,1000c0a0 <__umodsi3+0x34>
1000c08c:	294b883a 	add	r5,r5,r5
1000c090:	31bfffc4 	addi	r6,r6,-1
1000c094:	18c7883a 	add	r3,r3,r3
1000c098:	293ffa36 	bltu	r5,r4,1000c084 <__alt_data_end+0xf800c084>
1000c09c:	18000626 	beq	r3,zero,1000c0b8 <__umodsi3+0x4c>
1000c0a0:	1806d07a 	srli	r3,r3,1
1000c0a4:	11400136 	bltu	r2,r5,1000c0ac <__umodsi3+0x40>
1000c0a8:	1145c83a 	sub	r2,r2,r5
1000c0ac:	280ad07a 	srli	r5,r5,1
1000c0b0:	183ffb1e 	bne	r3,zero,1000c0a0 <__alt_data_end+0xf800c0a0>
1000c0b4:	f800283a 	ret
1000c0b8:	f800283a 	ret
1000c0bc:	00c00044 	movi	r3,1
1000c0c0:	003ff706 	br	1000c0a0 <__alt_data_end+0xf800c0a0>

1000c0c4 <__adddf3>:
1000c0c4:	02c00434 	movhi	r11,16
1000c0c8:	5affffc4 	addi	r11,r11,-1
1000c0cc:	2806d7fa 	srli	r3,r5,31
1000c0d0:	2ad4703a 	and	r10,r5,r11
1000c0d4:	3ad2703a 	and	r9,r7,r11
1000c0d8:	3804d53a 	srli	r2,r7,20
1000c0dc:	3018d77a 	srli	r12,r6,29
1000c0e0:	280ad53a 	srli	r5,r5,20
1000c0e4:	501490fa 	slli	r10,r10,3
1000c0e8:	2010d77a 	srli	r8,r4,29
1000c0ec:	481290fa 	slli	r9,r9,3
1000c0f0:	380ed7fa 	srli	r7,r7,31
1000c0f4:	defffb04 	addi	sp,sp,-20
1000c0f8:	dc800215 	stw	r18,8(sp)
1000c0fc:	dc400115 	stw	r17,4(sp)
1000c100:	dc000015 	stw	r16,0(sp)
1000c104:	dfc00415 	stw	ra,16(sp)
1000c108:	dcc00315 	stw	r19,12(sp)
1000c10c:	1c803fcc 	andi	r18,r3,255
1000c110:	2c01ffcc 	andi	r16,r5,2047
1000c114:	5210b03a 	or	r8,r10,r8
1000c118:	202290fa 	slli	r17,r4,3
1000c11c:	1081ffcc 	andi	r2,r2,2047
1000c120:	4b12b03a 	or	r9,r9,r12
1000c124:	300c90fa 	slli	r6,r6,3
1000c128:	91c07526 	beq	r18,r7,1000c300 <__adddf3+0x23c>
1000c12c:	8087c83a 	sub	r3,r16,r2
1000c130:	00c0ab0e 	bge	zero,r3,1000c3e0 <__adddf3+0x31c>
1000c134:	10002a1e 	bne	r2,zero,1000c1e0 <__adddf3+0x11c>
1000c138:	4984b03a 	or	r2,r9,r6
1000c13c:	1000961e 	bne	r2,zero,1000c398 <__adddf3+0x2d4>
1000c140:	888001cc 	andi	r2,r17,7
1000c144:	10000726 	beq	r2,zero,1000c164 <__adddf3+0xa0>
1000c148:	888003cc 	andi	r2,r17,15
1000c14c:	00c00104 	movi	r3,4
1000c150:	10c00426 	beq	r2,r3,1000c164 <__adddf3+0xa0>
1000c154:	88c7883a 	add	r3,r17,r3
1000c158:	1c63803a 	cmpltu	r17,r3,r17
1000c15c:	4451883a 	add	r8,r8,r17
1000c160:	1823883a 	mov	r17,r3
1000c164:	4080202c 	andhi	r2,r8,128
1000c168:	10005926 	beq	r2,zero,1000c2d0 <__adddf3+0x20c>
1000c16c:	84000044 	addi	r16,r16,1
1000c170:	0081ffc4 	movi	r2,2047
1000c174:	8080ba26 	beq	r16,r2,1000c460 <__adddf3+0x39c>
1000c178:	00bfe034 	movhi	r2,65408
1000c17c:	10bfffc4 	addi	r2,r2,-1
1000c180:	4090703a 	and	r8,r8,r2
1000c184:	4004977a 	slli	r2,r8,29
1000c188:	4010927a 	slli	r8,r8,9
1000c18c:	8822d0fa 	srli	r17,r17,3
1000c190:	8401ffcc 	andi	r16,r16,2047
1000c194:	4010d33a 	srli	r8,r8,12
1000c198:	9007883a 	mov	r3,r18
1000c19c:	1444b03a 	or	r2,r2,r17
1000c1a0:	8401ffcc 	andi	r16,r16,2047
1000c1a4:	8020953a 	slli	r16,r16,20
1000c1a8:	18c03fcc 	andi	r3,r3,255
1000c1ac:	01000434 	movhi	r4,16
1000c1b0:	213fffc4 	addi	r4,r4,-1
1000c1b4:	180697fa 	slli	r3,r3,31
1000c1b8:	4110703a 	and	r8,r8,r4
1000c1bc:	4410b03a 	or	r8,r8,r16
1000c1c0:	40c6b03a 	or	r3,r8,r3
1000c1c4:	dfc00417 	ldw	ra,16(sp)
1000c1c8:	dcc00317 	ldw	r19,12(sp)
1000c1cc:	dc800217 	ldw	r18,8(sp)
1000c1d0:	dc400117 	ldw	r17,4(sp)
1000c1d4:	dc000017 	ldw	r16,0(sp)
1000c1d8:	dec00504 	addi	sp,sp,20
1000c1dc:	f800283a 	ret
1000c1e0:	0081ffc4 	movi	r2,2047
1000c1e4:	80bfd626 	beq	r16,r2,1000c140 <__alt_data_end+0xf800c140>
1000c1e8:	4a402034 	orhi	r9,r9,128
1000c1ec:	00800e04 	movi	r2,56
1000c1f0:	10c09f16 	blt	r2,r3,1000c470 <__adddf3+0x3ac>
1000c1f4:	008007c4 	movi	r2,31
1000c1f8:	10c0c216 	blt	r2,r3,1000c504 <__adddf3+0x440>
1000c1fc:	00800804 	movi	r2,32
1000c200:	10c5c83a 	sub	r2,r2,r3
1000c204:	488a983a 	sll	r5,r9,r2
1000c208:	30c8d83a 	srl	r4,r6,r3
1000c20c:	3084983a 	sll	r2,r6,r2
1000c210:	48c6d83a 	srl	r3,r9,r3
1000c214:	290cb03a 	or	r6,r5,r4
1000c218:	1004c03a 	cmpne	r2,r2,zero
1000c21c:	308cb03a 	or	r6,r6,r2
1000c220:	898dc83a 	sub	r6,r17,r6
1000c224:	89a3803a 	cmpltu	r17,r17,r6
1000c228:	40d1c83a 	sub	r8,r8,r3
1000c22c:	4451c83a 	sub	r8,r8,r17
1000c230:	3023883a 	mov	r17,r6
1000c234:	4080202c 	andhi	r2,r8,128
1000c238:	10002326 	beq	r2,zero,1000c2c8 <__adddf3+0x204>
1000c23c:	04c02034 	movhi	r19,128
1000c240:	9cffffc4 	addi	r19,r19,-1
1000c244:	44e6703a 	and	r19,r8,r19
1000c248:	98007626 	beq	r19,zero,1000c424 <__adddf3+0x360>
1000c24c:	9809883a 	mov	r4,r19
1000c250:	000e9000 	call	1000e900 <__clzsi2>
1000c254:	10fffe04 	addi	r3,r2,-8
1000c258:	010007c4 	movi	r4,31
1000c25c:	20c07716 	blt	r4,r3,1000c43c <__adddf3+0x378>
1000c260:	00800804 	movi	r2,32
1000c264:	10c5c83a 	sub	r2,r2,r3
1000c268:	8884d83a 	srl	r2,r17,r2
1000c26c:	98d0983a 	sll	r8,r19,r3
1000c270:	88e2983a 	sll	r17,r17,r3
1000c274:	1204b03a 	or	r2,r2,r8
1000c278:	1c007416 	blt	r3,r16,1000c44c <__adddf3+0x388>
1000c27c:	1c21c83a 	sub	r16,r3,r16
1000c280:	82000044 	addi	r8,r16,1
1000c284:	00c007c4 	movi	r3,31
1000c288:	1a009116 	blt	r3,r8,1000c4d0 <__adddf3+0x40c>
1000c28c:	00c00804 	movi	r3,32
1000c290:	1a07c83a 	sub	r3,r3,r8
1000c294:	8a08d83a 	srl	r4,r17,r8
1000c298:	88e2983a 	sll	r17,r17,r3
1000c29c:	10c6983a 	sll	r3,r2,r3
1000c2a0:	1210d83a 	srl	r8,r2,r8
1000c2a4:	8804c03a 	cmpne	r2,r17,zero
1000c2a8:	1906b03a 	or	r3,r3,r4
1000c2ac:	18a2b03a 	or	r17,r3,r2
1000c2b0:	0021883a 	mov	r16,zero
1000c2b4:	003fa206 	br	1000c140 <__alt_data_end+0xf800c140>
1000c2b8:	1890b03a 	or	r8,r3,r2
1000c2bc:	40017d26 	beq	r8,zero,1000c8b4 <__adddf3+0x7f0>
1000c2c0:	1011883a 	mov	r8,r2
1000c2c4:	1823883a 	mov	r17,r3
1000c2c8:	888001cc 	andi	r2,r17,7
1000c2cc:	103f9e1e 	bne	r2,zero,1000c148 <__alt_data_end+0xf800c148>
1000c2d0:	4004977a 	slli	r2,r8,29
1000c2d4:	8822d0fa 	srli	r17,r17,3
1000c2d8:	4010d0fa 	srli	r8,r8,3
1000c2dc:	9007883a 	mov	r3,r18
1000c2e0:	1444b03a 	or	r2,r2,r17
1000c2e4:	0101ffc4 	movi	r4,2047
1000c2e8:	81002426 	beq	r16,r4,1000c37c <__adddf3+0x2b8>
1000c2ec:	8120703a 	and	r16,r16,r4
1000c2f0:	01000434 	movhi	r4,16
1000c2f4:	213fffc4 	addi	r4,r4,-1
1000c2f8:	4110703a 	and	r8,r8,r4
1000c2fc:	003fa806 	br	1000c1a0 <__alt_data_end+0xf800c1a0>
1000c300:	8089c83a 	sub	r4,r16,r2
1000c304:	01005e0e 	bge	zero,r4,1000c480 <__adddf3+0x3bc>
1000c308:	10002b26 	beq	r2,zero,1000c3b8 <__adddf3+0x2f4>
1000c30c:	0081ffc4 	movi	r2,2047
1000c310:	80bf8b26 	beq	r16,r2,1000c140 <__alt_data_end+0xf800c140>
1000c314:	4a402034 	orhi	r9,r9,128
1000c318:	00800e04 	movi	r2,56
1000c31c:	1100a40e 	bge	r2,r4,1000c5b0 <__adddf3+0x4ec>
1000c320:	498cb03a 	or	r6,r9,r6
1000c324:	300ac03a 	cmpne	r5,r6,zero
1000c328:	0013883a 	mov	r9,zero
1000c32c:	2c4b883a 	add	r5,r5,r17
1000c330:	2c63803a 	cmpltu	r17,r5,r17
1000c334:	4a11883a 	add	r8,r9,r8
1000c338:	8a11883a 	add	r8,r17,r8
1000c33c:	2823883a 	mov	r17,r5
1000c340:	4080202c 	andhi	r2,r8,128
1000c344:	103fe026 	beq	r2,zero,1000c2c8 <__alt_data_end+0xf800c2c8>
1000c348:	84000044 	addi	r16,r16,1
1000c34c:	0081ffc4 	movi	r2,2047
1000c350:	8080d226 	beq	r16,r2,1000c69c <__adddf3+0x5d8>
1000c354:	00bfe034 	movhi	r2,65408
1000c358:	10bfffc4 	addi	r2,r2,-1
1000c35c:	4090703a 	and	r8,r8,r2
1000c360:	880ad07a 	srli	r5,r17,1
1000c364:	400897fa 	slli	r4,r8,31
1000c368:	88c0004c 	andi	r3,r17,1
1000c36c:	28e2b03a 	or	r17,r5,r3
1000c370:	4010d07a 	srli	r8,r8,1
1000c374:	2462b03a 	or	r17,r4,r17
1000c378:	003f7106 	br	1000c140 <__alt_data_end+0xf800c140>
1000c37c:	4088b03a 	or	r4,r8,r2
1000c380:	20014526 	beq	r4,zero,1000c898 <__adddf3+0x7d4>
1000c384:	01000434 	movhi	r4,16
1000c388:	42000234 	orhi	r8,r8,8
1000c38c:	213fffc4 	addi	r4,r4,-1
1000c390:	4110703a 	and	r8,r8,r4
1000c394:	003f8206 	br	1000c1a0 <__alt_data_end+0xf800c1a0>
1000c398:	18ffffc4 	addi	r3,r3,-1
1000c39c:	1800491e 	bne	r3,zero,1000c4c4 <__adddf3+0x400>
1000c3a0:	898bc83a 	sub	r5,r17,r6
1000c3a4:	8963803a 	cmpltu	r17,r17,r5
1000c3a8:	4251c83a 	sub	r8,r8,r9
1000c3ac:	4451c83a 	sub	r8,r8,r17
1000c3b0:	2823883a 	mov	r17,r5
1000c3b4:	003f9f06 	br	1000c234 <__alt_data_end+0xf800c234>
1000c3b8:	4984b03a 	or	r2,r9,r6
1000c3bc:	103f6026 	beq	r2,zero,1000c140 <__alt_data_end+0xf800c140>
1000c3c0:	213fffc4 	addi	r4,r4,-1
1000c3c4:	2000931e 	bne	r4,zero,1000c614 <__adddf3+0x550>
1000c3c8:	898d883a 	add	r6,r17,r6
1000c3cc:	3463803a 	cmpltu	r17,r6,r17
1000c3d0:	4251883a 	add	r8,r8,r9
1000c3d4:	8a11883a 	add	r8,r17,r8
1000c3d8:	3023883a 	mov	r17,r6
1000c3dc:	003fd806 	br	1000c340 <__alt_data_end+0xf800c340>
1000c3e0:	1800541e 	bne	r3,zero,1000c534 <__adddf3+0x470>
1000c3e4:	80800044 	addi	r2,r16,1
1000c3e8:	1081ffcc 	andi	r2,r2,2047
1000c3ec:	00c00044 	movi	r3,1
1000c3f0:	1880a00e 	bge	r3,r2,1000c674 <__adddf3+0x5b0>
1000c3f4:	8989c83a 	sub	r4,r17,r6
1000c3f8:	8905803a 	cmpltu	r2,r17,r4
1000c3fc:	4267c83a 	sub	r19,r8,r9
1000c400:	98a7c83a 	sub	r19,r19,r2
1000c404:	9880202c 	andhi	r2,r19,128
1000c408:	10006326 	beq	r2,zero,1000c598 <__adddf3+0x4d4>
1000c40c:	3463c83a 	sub	r17,r6,r17
1000c410:	4a07c83a 	sub	r3,r9,r8
1000c414:	344d803a 	cmpltu	r6,r6,r17
1000c418:	19a7c83a 	sub	r19,r3,r6
1000c41c:	3825883a 	mov	r18,r7
1000c420:	983f8a1e 	bne	r19,zero,1000c24c <__alt_data_end+0xf800c24c>
1000c424:	8809883a 	mov	r4,r17
1000c428:	000e9000 	call	1000e900 <__clzsi2>
1000c42c:	10800804 	addi	r2,r2,32
1000c430:	10fffe04 	addi	r3,r2,-8
1000c434:	010007c4 	movi	r4,31
1000c438:	20ff890e 	bge	r4,r3,1000c260 <__alt_data_end+0xf800c260>
1000c43c:	10bff604 	addi	r2,r2,-40
1000c440:	8884983a 	sll	r2,r17,r2
1000c444:	0023883a 	mov	r17,zero
1000c448:	1c3f8c0e 	bge	r3,r16,1000c27c <__alt_data_end+0xf800c27c>
1000c44c:	023fe034 	movhi	r8,65408
1000c450:	423fffc4 	addi	r8,r8,-1
1000c454:	80e1c83a 	sub	r16,r16,r3
1000c458:	1210703a 	and	r8,r2,r8
1000c45c:	003f3806 	br	1000c140 <__alt_data_end+0xf800c140>
1000c460:	9007883a 	mov	r3,r18
1000c464:	0011883a 	mov	r8,zero
1000c468:	0005883a 	mov	r2,zero
1000c46c:	003f4c06 	br	1000c1a0 <__alt_data_end+0xf800c1a0>
1000c470:	498cb03a 	or	r6,r9,r6
1000c474:	300cc03a 	cmpne	r6,r6,zero
1000c478:	0007883a 	mov	r3,zero
1000c47c:	003f6806 	br	1000c220 <__alt_data_end+0xf800c220>
1000c480:	20009c1e 	bne	r4,zero,1000c6f4 <__adddf3+0x630>
1000c484:	80800044 	addi	r2,r16,1
1000c488:	1141ffcc 	andi	r5,r2,2047
1000c48c:	01000044 	movi	r4,1
1000c490:	2140670e 	bge	r4,r5,1000c630 <__adddf3+0x56c>
1000c494:	0101ffc4 	movi	r4,2047
1000c498:	11007f26 	beq	r2,r4,1000c698 <__adddf3+0x5d4>
1000c49c:	898d883a 	add	r6,r17,r6
1000c4a0:	4247883a 	add	r3,r8,r9
1000c4a4:	3451803a 	cmpltu	r8,r6,r17
1000c4a8:	40d1883a 	add	r8,r8,r3
1000c4ac:	402297fa 	slli	r17,r8,31
1000c4b0:	300cd07a 	srli	r6,r6,1
1000c4b4:	4010d07a 	srli	r8,r8,1
1000c4b8:	1021883a 	mov	r16,r2
1000c4bc:	89a2b03a 	or	r17,r17,r6
1000c4c0:	003f1f06 	br	1000c140 <__alt_data_end+0xf800c140>
1000c4c4:	0081ffc4 	movi	r2,2047
1000c4c8:	80bf481e 	bne	r16,r2,1000c1ec <__alt_data_end+0xf800c1ec>
1000c4cc:	003f1c06 	br	1000c140 <__alt_data_end+0xf800c140>
1000c4d0:	843ff844 	addi	r16,r16,-31
1000c4d4:	01000804 	movi	r4,32
1000c4d8:	1406d83a 	srl	r3,r2,r16
1000c4dc:	41005026 	beq	r8,r4,1000c620 <__adddf3+0x55c>
1000c4e0:	01001004 	movi	r4,64
1000c4e4:	2211c83a 	sub	r8,r4,r8
1000c4e8:	1204983a 	sll	r2,r2,r8
1000c4ec:	88a2b03a 	or	r17,r17,r2
1000c4f0:	8822c03a 	cmpne	r17,r17,zero
1000c4f4:	1c62b03a 	or	r17,r3,r17
1000c4f8:	0011883a 	mov	r8,zero
1000c4fc:	0021883a 	mov	r16,zero
1000c500:	003f7106 	br	1000c2c8 <__alt_data_end+0xf800c2c8>
1000c504:	193ff804 	addi	r4,r3,-32
1000c508:	00800804 	movi	r2,32
1000c50c:	4908d83a 	srl	r4,r9,r4
1000c510:	18804526 	beq	r3,r2,1000c628 <__adddf3+0x564>
1000c514:	00801004 	movi	r2,64
1000c518:	10c5c83a 	sub	r2,r2,r3
1000c51c:	4886983a 	sll	r3,r9,r2
1000c520:	198cb03a 	or	r6,r3,r6
1000c524:	300cc03a 	cmpne	r6,r6,zero
1000c528:	218cb03a 	or	r6,r4,r6
1000c52c:	0007883a 	mov	r3,zero
1000c530:	003f3b06 	br	1000c220 <__alt_data_end+0xf800c220>
1000c534:	80002a26 	beq	r16,zero,1000c5e0 <__adddf3+0x51c>
1000c538:	0101ffc4 	movi	r4,2047
1000c53c:	11006826 	beq	r2,r4,1000c6e0 <__adddf3+0x61c>
1000c540:	00c7c83a 	sub	r3,zero,r3
1000c544:	42002034 	orhi	r8,r8,128
1000c548:	01000e04 	movi	r4,56
1000c54c:	20c07c16 	blt	r4,r3,1000c740 <__adddf3+0x67c>
1000c550:	010007c4 	movi	r4,31
1000c554:	20c0da16 	blt	r4,r3,1000c8c0 <__adddf3+0x7fc>
1000c558:	01000804 	movi	r4,32
1000c55c:	20c9c83a 	sub	r4,r4,r3
1000c560:	4114983a 	sll	r10,r8,r4
1000c564:	88cad83a 	srl	r5,r17,r3
1000c568:	8908983a 	sll	r4,r17,r4
1000c56c:	40c6d83a 	srl	r3,r8,r3
1000c570:	5162b03a 	or	r17,r10,r5
1000c574:	2008c03a 	cmpne	r4,r4,zero
1000c578:	8922b03a 	or	r17,r17,r4
1000c57c:	3463c83a 	sub	r17,r6,r17
1000c580:	48c7c83a 	sub	r3,r9,r3
1000c584:	344d803a 	cmpltu	r6,r6,r17
1000c588:	1991c83a 	sub	r8,r3,r6
1000c58c:	1021883a 	mov	r16,r2
1000c590:	3825883a 	mov	r18,r7
1000c594:	003f2706 	br	1000c234 <__alt_data_end+0xf800c234>
1000c598:	24d0b03a 	or	r8,r4,r19
1000c59c:	40001b1e 	bne	r8,zero,1000c60c <__adddf3+0x548>
1000c5a0:	0005883a 	mov	r2,zero
1000c5a4:	0007883a 	mov	r3,zero
1000c5a8:	0021883a 	mov	r16,zero
1000c5ac:	003f4d06 	br	1000c2e4 <__alt_data_end+0xf800c2e4>
1000c5b0:	008007c4 	movi	r2,31
1000c5b4:	11003c16 	blt	r2,r4,1000c6a8 <__adddf3+0x5e4>
1000c5b8:	00800804 	movi	r2,32
1000c5bc:	1105c83a 	sub	r2,r2,r4
1000c5c0:	488e983a 	sll	r7,r9,r2
1000c5c4:	310ad83a 	srl	r5,r6,r4
1000c5c8:	3084983a 	sll	r2,r6,r2
1000c5cc:	4912d83a 	srl	r9,r9,r4
1000c5d0:	394ab03a 	or	r5,r7,r5
1000c5d4:	1004c03a 	cmpne	r2,r2,zero
1000c5d8:	288ab03a 	or	r5,r5,r2
1000c5dc:	003f5306 	br	1000c32c <__alt_data_end+0xf800c32c>
1000c5e0:	4448b03a 	or	r4,r8,r17
1000c5e4:	20003e26 	beq	r4,zero,1000c6e0 <__adddf3+0x61c>
1000c5e8:	00c6303a 	nor	r3,zero,r3
1000c5ec:	18003a1e 	bne	r3,zero,1000c6d8 <__adddf3+0x614>
1000c5f0:	3463c83a 	sub	r17,r6,r17
1000c5f4:	4a07c83a 	sub	r3,r9,r8
1000c5f8:	344d803a 	cmpltu	r6,r6,r17
1000c5fc:	1991c83a 	sub	r8,r3,r6
1000c600:	1021883a 	mov	r16,r2
1000c604:	3825883a 	mov	r18,r7
1000c608:	003f0a06 	br	1000c234 <__alt_data_end+0xf800c234>
1000c60c:	2023883a 	mov	r17,r4
1000c610:	003f0d06 	br	1000c248 <__alt_data_end+0xf800c248>
1000c614:	0081ffc4 	movi	r2,2047
1000c618:	80bf3f1e 	bne	r16,r2,1000c318 <__alt_data_end+0xf800c318>
1000c61c:	003ec806 	br	1000c140 <__alt_data_end+0xf800c140>
1000c620:	0005883a 	mov	r2,zero
1000c624:	003fb106 	br	1000c4ec <__alt_data_end+0xf800c4ec>
1000c628:	0007883a 	mov	r3,zero
1000c62c:	003fbc06 	br	1000c520 <__alt_data_end+0xf800c520>
1000c630:	4444b03a 	or	r2,r8,r17
1000c634:	8000871e 	bne	r16,zero,1000c854 <__adddf3+0x790>
1000c638:	1000ba26 	beq	r2,zero,1000c924 <__adddf3+0x860>
1000c63c:	4984b03a 	or	r2,r9,r6
1000c640:	103ebf26 	beq	r2,zero,1000c140 <__alt_data_end+0xf800c140>
1000c644:	8985883a 	add	r2,r17,r6
1000c648:	4247883a 	add	r3,r8,r9
1000c64c:	1451803a 	cmpltu	r8,r2,r17
1000c650:	40d1883a 	add	r8,r8,r3
1000c654:	40c0202c 	andhi	r3,r8,128
1000c658:	1023883a 	mov	r17,r2
1000c65c:	183f1a26 	beq	r3,zero,1000c2c8 <__alt_data_end+0xf800c2c8>
1000c660:	00bfe034 	movhi	r2,65408
1000c664:	10bfffc4 	addi	r2,r2,-1
1000c668:	2021883a 	mov	r16,r4
1000c66c:	4090703a 	and	r8,r8,r2
1000c670:	003eb306 	br	1000c140 <__alt_data_end+0xf800c140>
1000c674:	4444b03a 	or	r2,r8,r17
1000c678:	8000291e 	bne	r16,zero,1000c720 <__adddf3+0x65c>
1000c67c:	10004b1e 	bne	r2,zero,1000c7ac <__adddf3+0x6e8>
1000c680:	4990b03a 	or	r8,r9,r6
1000c684:	40008b26 	beq	r8,zero,1000c8b4 <__adddf3+0x7f0>
1000c688:	4811883a 	mov	r8,r9
1000c68c:	3023883a 	mov	r17,r6
1000c690:	3825883a 	mov	r18,r7
1000c694:	003eaa06 	br	1000c140 <__alt_data_end+0xf800c140>
1000c698:	1021883a 	mov	r16,r2
1000c69c:	0011883a 	mov	r8,zero
1000c6a0:	0005883a 	mov	r2,zero
1000c6a4:	003f0f06 	br	1000c2e4 <__alt_data_end+0xf800c2e4>
1000c6a8:	217ff804 	addi	r5,r4,-32
1000c6ac:	00800804 	movi	r2,32
1000c6b0:	494ad83a 	srl	r5,r9,r5
1000c6b4:	20807d26 	beq	r4,r2,1000c8ac <__adddf3+0x7e8>
1000c6b8:	00801004 	movi	r2,64
1000c6bc:	1109c83a 	sub	r4,r2,r4
1000c6c0:	4912983a 	sll	r9,r9,r4
1000c6c4:	498cb03a 	or	r6,r9,r6
1000c6c8:	300cc03a 	cmpne	r6,r6,zero
1000c6cc:	298ab03a 	or	r5,r5,r6
1000c6d0:	0013883a 	mov	r9,zero
1000c6d4:	003f1506 	br	1000c32c <__alt_data_end+0xf800c32c>
1000c6d8:	0101ffc4 	movi	r4,2047
1000c6dc:	113f9a1e 	bne	r2,r4,1000c548 <__alt_data_end+0xf800c548>
1000c6e0:	4811883a 	mov	r8,r9
1000c6e4:	3023883a 	mov	r17,r6
1000c6e8:	1021883a 	mov	r16,r2
1000c6ec:	3825883a 	mov	r18,r7
1000c6f0:	003e9306 	br	1000c140 <__alt_data_end+0xf800c140>
1000c6f4:	8000161e 	bne	r16,zero,1000c750 <__adddf3+0x68c>
1000c6f8:	444ab03a 	or	r5,r8,r17
1000c6fc:	28005126 	beq	r5,zero,1000c844 <__adddf3+0x780>
1000c700:	0108303a 	nor	r4,zero,r4
1000c704:	20004d1e 	bne	r4,zero,1000c83c <__adddf3+0x778>
1000c708:	89a3883a 	add	r17,r17,r6
1000c70c:	4253883a 	add	r9,r8,r9
1000c710:	898d803a 	cmpltu	r6,r17,r6
1000c714:	3251883a 	add	r8,r6,r9
1000c718:	1021883a 	mov	r16,r2
1000c71c:	003f0806 	br	1000c340 <__alt_data_end+0xf800c340>
1000c720:	1000301e 	bne	r2,zero,1000c7e4 <__adddf3+0x720>
1000c724:	4984b03a 	or	r2,r9,r6
1000c728:	10007126 	beq	r2,zero,1000c8f0 <__adddf3+0x82c>
1000c72c:	4811883a 	mov	r8,r9
1000c730:	3023883a 	mov	r17,r6
1000c734:	3825883a 	mov	r18,r7
1000c738:	0401ffc4 	movi	r16,2047
1000c73c:	003e8006 	br	1000c140 <__alt_data_end+0xf800c140>
1000c740:	4462b03a 	or	r17,r8,r17
1000c744:	8822c03a 	cmpne	r17,r17,zero
1000c748:	0007883a 	mov	r3,zero
1000c74c:	003f8b06 	br	1000c57c <__alt_data_end+0xf800c57c>
1000c750:	0141ffc4 	movi	r5,2047
1000c754:	11403b26 	beq	r2,r5,1000c844 <__adddf3+0x780>
1000c758:	0109c83a 	sub	r4,zero,r4
1000c75c:	42002034 	orhi	r8,r8,128
1000c760:	01400e04 	movi	r5,56
1000c764:	29006716 	blt	r5,r4,1000c904 <__adddf3+0x840>
1000c768:	014007c4 	movi	r5,31
1000c76c:	29007016 	blt	r5,r4,1000c930 <__adddf3+0x86c>
1000c770:	01400804 	movi	r5,32
1000c774:	290bc83a 	sub	r5,r5,r4
1000c778:	4154983a 	sll	r10,r8,r5
1000c77c:	890ed83a 	srl	r7,r17,r4
1000c780:	894a983a 	sll	r5,r17,r5
1000c784:	4108d83a 	srl	r4,r8,r4
1000c788:	51e2b03a 	or	r17,r10,r7
1000c78c:	280ac03a 	cmpne	r5,r5,zero
1000c790:	8962b03a 	or	r17,r17,r5
1000c794:	89a3883a 	add	r17,r17,r6
1000c798:	2253883a 	add	r9,r4,r9
1000c79c:	898d803a 	cmpltu	r6,r17,r6
1000c7a0:	3251883a 	add	r8,r6,r9
1000c7a4:	1021883a 	mov	r16,r2
1000c7a8:	003ee506 	br	1000c340 <__alt_data_end+0xf800c340>
1000c7ac:	4984b03a 	or	r2,r9,r6
1000c7b0:	103e6326 	beq	r2,zero,1000c140 <__alt_data_end+0xf800c140>
1000c7b4:	8987c83a 	sub	r3,r17,r6
1000c7b8:	88c9803a 	cmpltu	r4,r17,r3
1000c7bc:	4245c83a 	sub	r2,r8,r9
1000c7c0:	1105c83a 	sub	r2,r2,r4
1000c7c4:	1100202c 	andhi	r4,r2,128
1000c7c8:	203ebb26 	beq	r4,zero,1000c2b8 <__alt_data_end+0xf800c2b8>
1000c7cc:	3463c83a 	sub	r17,r6,r17
1000c7d0:	4a07c83a 	sub	r3,r9,r8
1000c7d4:	344d803a 	cmpltu	r6,r6,r17
1000c7d8:	1991c83a 	sub	r8,r3,r6
1000c7dc:	3825883a 	mov	r18,r7
1000c7e0:	003e5706 	br	1000c140 <__alt_data_end+0xf800c140>
1000c7e4:	4984b03a 	or	r2,r9,r6
1000c7e8:	10002e26 	beq	r2,zero,1000c8a4 <__adddf3+0x7e0>
1000c7ec:	4004d0fa 	srli	r2,r8,3
1000c7f0:	8822d0fa 	srli	r17,r17,3
1000c7f4:	4010977a 	slli	r8,r8,29
1000c7f8:	10c0022c 	andhi	r3,r2,8
1000c7fc:	4462b03a 	or	r17,r8,r17
1000c800:	18000826 	beq	r3,zero,1000c824 <__adddf3+0x760>
1000c804:	4808d0fa 	srli	r4,r9,3
1000c808:	20c0022c 	andhi	r3,r4,8
1000c80c:	1800051e 	bne	r3,zero,1000c824 <__adddf3+0x760>
1000c810:	300cd0fa 	srli	r6,r6,3
1000c814:	4806977a 	slli	r3,r9,29
1000c818:	2005883a 	mov	r2,r4
1000c81c:	3825883a 	mov	r18,r7
1000c820:	19a2b03a 	or	r17,r3,r6
1000c824:	8810d77a 	srli	r8,r17,29
1000c828:	100490fa 	slli	r2,r2,3
1000c82c:	882290fa 	slli	r17,r17,3
1000c830:	0401ffc4 	movi	r16,2047
1000c834:	4090b03a 	or	r8,r8,r2
1000c838:	003e4106 	br	1000c140 <__alt_data_end+0xf800c140>
1000c83c:	0141ffc4 	movi	r5,2047
1000c840:	117fc71e 	bne	r2,r5,1000c760 <__alt_data_end+0xf800c760>
1000c844:	4811883a 	mov	r8,r9
1000c848:	3023883a 	mov	r17,r6
1000c84c:	1021883a 	mov	r16,r2
1000c850:	003e3b06 	br	1000c140 <__alt_data_end+0xf800c140>
1000c854:	10002f26 	beq	r2,zero,1000c914 <__adddf3+0x850>
1000c858:	4984b03a 	or	r2,r9,r6
1000c85c:	10001126 	beq	r2,zero,1000c8a4 <__adddf3+0x7e0>
1000c860:	4004d0fa 	srli	r2,r8,3
1000c864:	8822d0fa 	srli	r17,r17,3
1000c868:	4010977a 	slli	r8,r8,29
1000c86c:	10c0022c 	andhi	r3,r2,8
1000c870:	4462b03a 	or	r17,r8,r17
1000c874:	183feb26 	beq	r3,zero,1000c824 <__alt_data_end+0xf800c824>
1000c878:	4808d0fa 	srli	r4,r9,3
1000c87c:	20c0022c 	andhi	r3,r4,8
1000c880:	183fe81e 	bne	r3,zero,1000c824 <__alt_data_end+0xf800c824>
1000c884:	300cd0fa 	srli	r6,r6,3
1000c888:	4806977a 	slli	r3,r9,29
1000c88c:	2005883a 	mov	r2,r4
1000c890:	19a2b03a 	or	r17,r3,r6
1000c894:	003fe306 	br	1000c824 <__alt_data_end+0xf800c824>
1000c898:	0011883a 	mov	r8,zero
1000c89c:	0005883a 	mov	r2,zero
1000c8a0:	003e3f06 	br	1000c1a0 <__alt_data_end+0xf800c1a0>
1000c8a4:	0401ffc4 	movi	r16,2047
1000c8a8:	003e2506 	br	1000c140 <__alt_data_end+0xf800c140>
1000c8ac:	0013883a 	mov	r9,zero
1000c8b0:	003f8406 	br	1000c6c4 <__alt_data_end+0xf800c6c4>
1000c8b4:	0005883a 	mov	r2,zero
1000c8b8:	0007883a 	mov	r3,zero
1000c8bc:	003e8906 	br	1000c2e4 <__alt_data_end+0xf800c2e4>
1000c8c0:	197ff804 	addi	r5,r3,-32
1000c8c4:	01000804 	movi	r4,32
1000c8c8:	414ad83a 	srl	r5,r8,r5
1000c8cc:	19002426 	beq	r3,r4,1000c960 <__adddf3+0x89c>
1000c8d0:	01001004 	movi	r4,64
1000c8d4:	20c7c83a 	sub	r3,r4,r3
1000c8d8:	40c6983a 	sll	r3,r8,r3
1000c8dc:	1c46b03a 	or	r3,r3,r17
1000c8e0:	1806c03a 	cmpne	r3,r3,zero
1000c8e4:	28e2b03a 	or	r17,r5,r3
1000c8e8:	0007883a 	mov	r3,zero
1000c8ec:	003f2306 	br	1000c57c <__alt_data_end+0xf800c57c>
1000c8f0:	0007883a 	mov	r3,zero
1000c8f4:	5811883a 	mov	r8,r11
1000c8f8:	00bfffc4 	movi	r2,-1
1000c8fc:	0401ffc4 	movi	r16,2047
1000c900:	003e7806 	br	1000c2e4 <__alt_data_end+0xf800c2e4>
1000c904:	4462b03a 	or	r17,r8,r17
1000c908:	8822c03a 	cmpne	r17,r17,zero
1000c90c:	0009883a 	mov	r4,zero
1000c910:	003fa006 	br	1000c794 <__alt_data_end+0xf800c794>
1000c914:	4811883a 	mov	r8,r9
1000c918:	3023883a 	mov	r17,r6
1000c91c:	0401ffc4 	movi	r16,2047
1000c920:	003e0706 	br	1000c140 <__alt_data_end+0xf800c140>
1000c924:	4811883a 	mov	r8,r9
1000c928:	3023883a 	mov	r17,r6
1000c92c:	003e0406 	br	1000c140 <__alt_data_end+0xf800c140>
1000c930:	21fff804 	addi	r7,r4,-32
1000c934:	01400804 	movi	r5,32
1000c938:	41ced83a 	srl	r7,r8,r7
1000c93c:	21400a26 	beq	r4,r5,1000c968 <__adddf3+0x8a4>
1000c940:	01401004 	movi	r5,64
1000c944:	2909c83a 	sub	r4,r5,r4
1000c948:	4108983a 	sll	r4,r8,r4
1000c94c:	2448b03a 	or	r4,r4,r17
1000c950:	2008c03a 	cmpne	r4,r4,zero
1000c954:	3922b03a 	or	r17,r7,r4
1000c958:	0009883a 	mov	r4,zero
1000c95c:	003f8d06 	br	1000c794 <__alt_data_end+0xf800c794>
1000c960:	0007883a 	mov	r3,zero
1000c964:	003fdd06 	br	1000c8dc <__alt_data_end+0xf800c8dc>
1000c968:	0009883a 	mov	r4,zero
1000c96c:	003ff706 	br	1000c94c <__alt_data_end+0xf800c94c>

1000c970 <__divdf3>:
1000c970:	defff004 	addi	sp,sp,-64
1000c974:	dc800815 	stw	r18,32(sp)
1000c978:	2824d53a 	srli	r18,r5,20
1000c97c:	dd800c15 	stw	r22,48(sp)
1000c980:	282cd7fa 	srli	r22,r5,31
1000c984:	dc000615 	stw	r16,24(sp)
1000c988:	04000434 	movhi	r16,16
1000c98c:	843fffc4 	addi	r16,r16,-1
1000c990:	dfc00f15 	stw	ra,60(sp)
1000c994:	df000e15 	stw	fp,56(sp)
1000c998:	ddc00d15 	stw	r23,52(sp)
1000c99c:	dd400b15 	stw	r21,44(sp)
1000c9a0:	dd000a15 	stw	r20,40(sp)
1000c9a4:	dcc00915 	stw	r19,36(sp)
1000c9a8:	dc400715 	stw	r17,28(sp)
1000c9ac:	9481ffcc 	andi	r18,r18,2047
1000c9b0:	2c20703a 	and	r16,r5,r16
1000c9b4:	b2003fcc 	andi	r8,r22,255
1000c9b8:	90006126 	beq	r18,zero,1000cb40 <__divdf3+0x1d0>
1000c9bc:	0081ffc4 	movi	r2,2047
1000c9c0:	202b883a 	mov	r21,r4
1000c9c4:	90803726 	beq	r18,r2,1000caa4 <__divdf3+0x134>
1000c9c8:	80c00434 	orhi	r3,r16,16
1000c9cc:	180690fa 	slli	r3,r3,3
1000c9d0:	2020d77a 	srli	r16,r4,29
1000c9d4:	202a90fa 	slli	r21,r4,3
1000c9d8:	94bf0044 	addi	r18,r18,-1023
1000c9dc:	80e0b03a 	or	r16,r16,r3
1000c9e0:	0013883a 	mov	r9,zero
1000c9e4:	000b883a 	mov	r5,zero
1000c9e8:	3806d53a 	srli	r3,r7,20
1000c9ec:	382ed7fa 	srli	r23,r7,31
1000c9f0:	04400434 	movhi	r17,16
1000c9f4:	8c7fffc4 	addi	r17,r17,-1
1000c9f8:	18c1ffcc 	andi	r3,r3,2047
1000c9fc:	3029883a 	mov	r20,r6
1000ca00:	3c62703a 	and	r17,r7,r17
1000ca04:	bf003fcc 	andi	fp,r23,255
1000ca08:	18006e26 	beq	r3,zero,1000cbc4 <__divdf3+0x254>
1000ca0c:	0081ffc4 	movi	r2,2047
1000ca10:	18806626 	beq	r3,r2,1000cbac <__divdf3+0x23c>
1000ca14:	89000434 	orhi	r4,r17,16
1000ca18:	200890fa 	slli	r4,r4,3
1000ca1c:	3022d77a 	srli	r17,r6,29
1000ca20:	302890fa 	slli	r20,r6,3
1000ca24:	18ff0044 	addi	r3,r3,-1023
1000ca28:	8922b03a 	or	r17,r17,r4
1000ca2c:	000f883a 	mov	r7,zero
1000ca30:	b5e6f03a 	xor	r19,r22,r23
1000ca34:	3a4cb03a 	or	r6,r7,r9
1000ca38:	008003c4 	movi	r2,15
1000ca3c:	9809883a 	mov	r4,r19
1000ca40:	90c7c83a 	sub	r3,r18,r3
1000ca44:	9cc03fcc 	andi	r19,r19,255
1000ca48:	11809636 	bltu	r2,r6,1000cca4 <__divdf3+0x334>
1000ca4c:	300c90ba 	slli	r6,r6,2
1000ca50:	00840074 	movhi	r2,4097
1000ca54:	10b29904 	addi	r2,r2,-13724
1000ca58:	308d883a 	add	r6,r6,r2
1000ca5c:	30800017 	ldw	r2,0(r6)
1000ca60:	1000683a 	jmp	r2
1000ca64:	1000cca4 	muli	zero,r2,818
1000ca68:	1000cadc 	xori	zero,r2,811
1000ca6c:	1000cc94 	ori	zero,r2,818
1000ca70:	1000cad0 	cmplti	zero,r2,811
1000ca74:	1000cc94 	ori	zero,r2,818
1000ca78:	1000cc68 	cmpgeui	zero,r2,817
1000ca7c:	1000cc94 	ori	zero,r2,818
1000ca80:	1000cad0 	cmplti	zero,r2,811
1000ca84:	1000cadc 	xori	zero,r2,811
1000ca88:	1000cadc 	xori	zero,r2,811
1000ca8c:	1000cc68 	cmpgeui	zero,r2,817
1000ca90:	1000cad0 	cmplti	zero,r2,811
1000ca94:	1000cac0 	call	11000cac <_gp+0xfe5498>
1000ca98:	1000cac0 	call	11000cac <_gp+0xfe5498>
1000ca9c:	1000cac0 	call	11000cac <_gp+0xfe5498>
1000caa0:	1000d02c 	andhi	zero,r2,832
1000caa4:	2404b03a 	or	r2,r4,r16
1000caa8:	10006c1e 	bne	r2,zero,1000cc5c <__divdf3+0x2ec>
1000caac:	02400204 	movi	r9,8
1000cab0:	0021883a 	mov	r16,zero
1000cab4:	002b883a 	mov	r21,zero
1000cab8:	01400084 	movi	r5,2
1000cabc:	003fca06 	br	1000c9e8 <__alt_data_end+0xf800c9e8>
1000cac0:	8023883a 	mov	r17,r16
1000cac4:	a829883a 	mov	r20,r21
1000cac8:	4039883a 	mov	fp,r8
1000cacc:	280f883a 	mov	r7,r5
1000cad0:	00800084 	movi	r2,2
1000cad4:	3881601e 	bne	r7,r2,1000d058 <__divdf3+0x6e8>
1000cad8:	e027883a 	mov	r19,fp
1000cadc:	9900004c 	andi	r4,r19,1
1000cae0:	0081ffc4 	movi	r2,2047
1000cae4:	0021883a 	mov	r16,zero
1000cae8:	002b883a 	mov	r21,zero
1000caec:	1004953a 	slli	r2,r2,20
1000caf0:	20c03fcc 	andi	r3,r4,255
1000caf4:	01400434 	movhi	r5,16
1000caf8:	297fffc4 	addi	r5,r5,-1
1000cafc:	180697fa 	slli	r3,r3,31
1000cb00:	8160703a 	and	r16,r16,r5
1000cb04:	80a0b03a 	or	r16,r16,r2
1000cb08:	80c6b03a 	or	r3,r16,r3
1000cb0c:	a805883a 	mov	r2,r21
1000cb10:	dfc00f17 	ldw	ra,60(sp)
1000cb14:	df000e17 	ldw	fp,56(sp)
1000cb18:	ddc00d17 	ldw	r23,52(sp)
1000cb1c:	dd800c17 	ldw	r22,48(sp)
1000cb20:	dd400b17 	ldw	r21,44(sp)
1000cb24:	dd000a17 	ldw	r20,40(sp)
1000cb28:	dcc00917 	ldw	r19,36(sp)
1000cb2c:	dc800817 	ldw	r18,32(sp)
1000cb30:	dc400717 	ldw	r17,28(sp)
1000cb34:	dc000617 	ldw	r16,24(sp)
1000cb38:	dec01004 	addi	sp,sp,64
1000cb3c:	f800283a 	ret
1000cb40:	2404b03a 	or	r2,r4,r16
1000cb44:	2023883a 	mov	r17,r4
1000cb48:	10003f26 	beq	r2,zero,1000cc48 <__divdf3+0x2d8>
1000cb4c:	80015e26 	beq	r16,zero,1000d0c8 <__divdf3+0x758>
1000cb50:	8009883a 	mov	r4,r16
1000cb54:	d9800215 	stw	r6,8(sp)
1000cb58:	d9c00515 	stw	r7,20(sp)
1000cb5c:	da000415 	stw	r8,16(sp)
1000cb60:	000e9000 	call	1000e900 <__clzsi2>
1000cb64:	d9800217 	ldw	r6,8(sp)
1000cb68:	d9c00517 	ldw	r7,20(sp)
1000cb6c:	da000417 	ldw	r8,16(sp)
1000cb70:	10fffd44 	addi	r3,r2,-11
1000cb74:	01000704 	movi	r4,28
1000cb78:	20c14f16 	blt	r4,r3,1000d0b8 <__divdf3+0x748>
1000cb7c:	01000744 	movi	r4,29
1000cb80:	157ffe04 	addi	r21,r2,-8
1000cb84:	20c9c83a 	sub	r4,r4,r3
1000cb88:	8560983a 	sll	r16,r16,r21
1000cb8c:	8908d83a 	srl	r4,r17,r4
1000cb90:	8d6a983a 	sll	r21,r17,r21
1000cb94:	2420b03a 	or	r16,r4,r16
1000cb98:	04bf0084 	movi	r18,-1022
1000cb9c:	90e5c83a 	sub	r18,r18,r3
1000cba0:	0013883a 	mov	r9,zero
1000cba4:	000b883a 	mov	r5,zero
1000cba8:	003f8f06 	br	1000c9e8 <__alt_data_end+0xf800c9e8>
1000cbac:	3444b03a 	or	r2,r6,r17
1000cbb0:	1000231e 	bne	r2,zero,1000cc40 <__divdf3+0x2d0>
1000cbb4:	0023883a 	mov	r17,zero
1000cbb8:	0029883a 	mov	r20,zero
1000cbbc:	01c00084 	movi	r7,2
1000cbc0:	003f9b06 	br	1000ca30 <__alt_data_end+0xf800ca30>
1000cbc4:	3444b03a 	or	r2,r6,r17
1000cbc8:	10001926 	beq	r2,zero,1000cc30 <__divdf3+0x2c0>
1000cbcc:	88014b26 	beq	r17,zero,1000d0fc <__divdf3+0x78c>
1000cbd0:	8809883a 	mov	r4,r17
1000cbd4:	d9400115 	stw	r5,4(sp)
1000cbd8:	d9800215 	stw	r6,8(sp)
1000cbdc:	da000415 	stw	r8,16(sp)
1000cbe0:	da400315 	stw	r9,12(sp)
1000cbe4:	000e9000 	call	1000e900 <__clzsi2>
1000cbe8:	d9400117 	ldw	r5,4(sp)
1000cbec:	d9800217 	ldw	r6,8(sp)
1000cbf0:	da000417 	ldw	r8,16(sp)
1000cbf4:	da400317 	ldw	r9,12(sp)
1000cbf8:	10fffd44 	addi	r3,r2,-11
1000cbfc:	01000704 	movi	r4,28
1000cc00:	20c13a16 	blt	r4,r3,1000d0ec <__divdf3+0x77c>
1000cc04:	01000744 	movi	r4,29
1000cc08:	153ffe04 	addi	r20,r2,-8
1000cc0c:	20c9c83a 	sub	r4,r4,r3
1000cc10:	8d22983a 	sll	r17,r17,r20
1000cc14:	3108d83a 	srl	r4,r6,r4
1000cc18:	3528983a 	sll	r20,r6,r20
1000cc1c:	2462b03a 	or	r17,r4,r17
1000cc20:	00bf0084 	movi	r2,-1022
1000cc24:	10c7c83a 	sub	r3,r2,r3
1000cc28:	000f883a 	mov	r7,zero
1000cc2c:	003f8006 	br	1000ca30 <__alt_data_end+0xf800ca30>
1000cc30:	0023883a 	mov	r17,zero
1000cc34:	0029883a 	mov	r20,zero
1000cc38:	01c00044 	movi	r7,1
1000cc3c:	003f7c06 	br	1000ca30 <__alt_data_end+0xf800ca30>
1000cc40:	01c000c4 	movi	r7,3
1000cc44:	003f7a06 	br	1000ca30 <__alt_data_end+0xf800ca30>
1000cc48:	02400104 	movi	r9,4
1000cc4c:	0021883a 	mov	r16,zero
1000cc50:	002b883a 	mov	r21,zero
1000cc54:	01400044 	movi	r5,1
1000cc58:	003f6306 	br	1000c9e8 <__alt_data_end+0xf800c9e8>
1000cc5c:	02400304 	movi	r9,12
1000cc60:	014000c4 	movi	r5,3
1000cc64:	003f6006 	br	1000c9e8 <__alt_data_end+0xf800c9e8>
1000cc68:	04000434 	movhi	r16,16
1000cc6c:	0009883a 	mov	r4,zero
1000cc70:	843fffc4 	addi	r16,r16,-1
1000cc74:	057fffc4 	movi	r21,-1
1000cc78:	0081ffc4 	movi	r2,2047
1000cc7c:	003f9b06 	br	1000caec <__alt_data_end+0xf800caec>
1000cc80:	00c00044 	movi	r3,1
1000cc84:	1887c83a 	sub	r3,r3,r2
1000cc88:	01000e04 	movi	r4,56
1000cc8c:	20c1530e 	bge	r4,r3,1000d1dc <__divdf3+0x86c>
1000cc90:	9900004c 	andi	r4,r19,1
1000cc94:	0005883a 	mov	r2,zero
1000cc98:	0021883a 	mov	r16,zero
1000cc9c:	002b883a 	mov	r21,zero
1000cca0:	003f9206 	br	1000caec <__alt_data_end+0xf800caec>
1000cca4:	8c012e36 	bltu	r17,r16,1000d160 <__divdf3+0x7f0>
1000cca8:	84412c26 	beq	r16,r17,1000d15c <__divdf3+0x7ec>
1000ccac:	a82f883a 	mov	r23,r21
1000ccb0:	18ffffc4 	addi	r3,r3,-1
1000ccb4:	002b883a 	mov	r21,zero
1000ccb8:	a00ad63a 	srli	r5,r20,24
1000ccbc:	8822923a 	slli	r17,r17,8
1000ccc0:	a028923a 	slli	r20,r20,8
1000ccc4:	8009883a 	mov	r4,r16
1000ccc8:	896cb03a 	or	r22,r17,r5
1000cccc:	dd000015 	stw	r20,0(sp)
1000ccd0:	b028d43a 	srli	r20,r22,16
1000ccd4:	d8c00215 	stw	r3,8(sp)
1000ccd8:	b4bfffcc 	andi	r18,r22,65535
1000ccdc:	a00b883a 	mov	r5,r20
1000cce0:	000c0080 	call	1000c008 <__udivsi3>
1000cce4:	100b883a 	mov	r5,r2
1000cce8:	9009883a 	mov	r4,r18
1000ccec:	1023883a 	mov	r17,r2
1000ccf0:	00016040 	call	10001604 <__mulsi3>
1000ccf4:	8009883a 	mov	r4,r16
1000ccf8:	a00b883a 	mov	r5,r20
1000ccfc:	1039883a 	mov	fp,r2
1000cd00:	000c06c0 	call	1000c06c <__umodsi3>
1000cd04:	1004943a 	slli	r2,r2,16
1000cd08:	b808d43a 	srli	r4,r23,16
1000cd0c:	d8c00217 	ldw	r3,8(sp)
1000cd10:	2084b03a 	or	r2,r4,r2
1000cd14:	1700062e 	bgeu	r2,fp,1000cd30 <__divdf3+0x3c0>
1000cd18:	1585883a 	add	r2,r2,r22
1000cd1c:	893fffc4 	addi	r4,r17,-1
1000cd20:	15811d36 	bltu	r2,r22,1000d198 <__divdf3+0x828>
1000cd24:	17011c2e 	bgeu	r2,fp,1000d198 <__divdf3+0x828>
1000cd28:	8c7fff84 	addi	r17,r17,-2
1000cd2c:	1585883a 	add	r2,r2,r22
1000cd30:	1739c83a 	sub	fp,r2,fp
1000cd34:	a00b883a 	mov	r5,r20
1000cd38:	e009883a 	mov	r4,fp
1000cd3c:	d8c00215 	stw	r3,8(sp)
1000cd40:	000c0080 	call	1000c008 <__udivsi3>
1000cd44:	100b883a 	mov	r5,r2
1000cd48:	9009883a 	mov	r4,r18
1000cd4c:	1021883a 	mov	r16,r2
1000cd50:	00016040 	call	10001604 <__mulsi3>
1000cd54:	a00b883a 	mov	r5,r20
1000cd58:	e009883a 	mov	r4,fp
1000cd5c:	d8800415 	stw	r2,16(sp)
1000cd60:	000c06c0 	call	1000c06c <__umodsi3>
1000cd64:	1004943a 	slli	r2,r2,16
1000cd68:	da000417 	ldw	r8,16(sp)
1000cd6c:	bdffffcc 	andi	r23,r23,65535
1000cd70:	b884b03a 	or	r2,r23,r2
1000cd74:	d8c00217 	ldw	r3,8(sp)
1000cd78:	1200062e 	bgeu	r2,r8,1000cd94 <__divdf3+0x424>
1000cd7c:	1585883a 	add	r2,r2,r22
1000cd80:	813fffc4 	addi	r4,r16,-1
1000cd84:	15810236 	bltu	r2,r22,1000d190 <__divdf3+0x820>
1000cd88:	1201012e 	bgeu	r2,r8,1000d190 <__divdf3+0x820>
1000cd8c:	843fff84 	addi	r16,r16,-2
1000cd90:	1585883a 	add	r2,r2,r22
1000cd94:	8822943a 	slli	r17,r17,16
1000cd98:	d9800017 	ldw	r6,0(sp)
1000cd9c:	1211c83a 	sub	r8,r2,r8
1000cda0:	8c22b03a 	or	r17,r17,r16
1000cda4:	373fffcc 	andi	fp,r6,65535
1000cda8:	8abfffcc 	andi	r10,r17,65535
1000cdac:	8820d43a 	srli	r16,r17,16
1000cdb0:	5009883a 	mov	r4,r10
1000cdb4:	e00b883a 	mov	r5,fp
1000cdb8:	302ed43a 	srli	r23,r6,16
1000cdbc:	d8c00215 	stw	r3,8(sp)
1000cdc0:	da000415 	stw	r8,16(sp)
1000cdc4:	da800115 	stw	r10,4(sp)
1000cdc8:	00016040 	call	10001604 <__mulsi3>
1000cdcc:	800b883a 	mov	r5,r16
1000cdd0:	e009883a 	mov	r4,fp
1000cdd4:	d8800515 	stw	r2,20(sp)
1000cdd8:	00016040 	call	10001604 <__mulsi3>
1000cddc:	8009883a 	mov	r4,r16
1000cde0:	b80b883a 	mov	r5,r23
1000cde4:	d8800315 	stw	r2,12(sp)
1000cde8:	00016040 	call	10001604 <__mulsi3>
1000cdec:	da800117 	ldw	r10,4(sp)
1000cdf0:	b80b883a 	mov	r5,r23
1000cdf4:	1021883a 	mov	r16,r2
1000cdf8:	5009883a 	mov	r4,r10
1000cdfc:	00016040 	call	10001604 <__mulsi3>
1000ce00:	d9c00517 	ldw	r7,20(sp)
1000ce04:	da400317 	ldw	r9,12(sp)
1000ce08:	d8c00217 	ldw	r3,8(sp)
1000ce0c:	3808d43a 	srli	r4,r7,16
1000ce10:	1245883a 	add	r2,r2,r9
1000ce14:	da000417 	ldw	r8,16(sp)
1000ce18:	2085883a 	add	r2,r4,r2
1000ce1c:	1240022e 	bgeu	r2,r9,1000ce28 <__divdf3+0x4b8>
1000ce20:	01000074 	movhi	r4,1
1000ce24:	8121883a 	add	r16,r16,r4
1000ce28:	1008d43a 	srli	r4,r2,16
1000ce2c:	1004943a 	slli	r2,r2,16
1000ce30:	39ffffcc 	andi	r7,r7,65535
1000ce34:	2409883a 	add	r4,r4,r16
1000ce38:	11c5883a 	add	r2,r2,r7
1000ce3c:	4100bb36 	bltu	r8,r4,1000d12c <__divdf3+0x7bc>
1000ce40:	4100d726 	beq	r8,r4,1000d1a0 <__divdf3+0x830>
1000ce44:	4109c83a 	sub	r4,r8,r4
1000ce48:	a8a1c83a 	sub	r16,r21,r2
1000ce4c:	ac2b803a 	cmpltu	r21,r21,r16
1000ce50:	256bc83a 	sub	r21,r4,r21
1000ce54:	b540d926 	beq	r22,r21,1000d1bc <__divdf3+0x84c>
1000ce58:	a00b883a 	mov	r5,r20
1000ce5c:	a809883a 	mov	r4,r21
1000ce60:	d8c00215 	stw	r3,8(sp)
1000ce64:	000c0080 	call	1000c008 <__udivsi3>
1000ce68:	100b883a 	mov	r5,r2
1000ce6c:	9009883a 	mov	r4,r18
1000ce70:	d8800515 	stw	r2,20(sp)
1000ce74:	00016040 	call	10001604 <__mulsi3>
1000ce78:	a809883a 	mov	r4,r21
1000ce7c:	a00b883a 	mov	r5,r20
1000ce80:	d8800415 	stw	r2,16(sp)
1000ce84:	000c06c0 	call	1000c06c <__umodsi3>
1000ce88:	1004943a 	slli	r2,r2,16
1000ce8c:	8008d43a 	srli	r4,r16,16
1000ce90:	da000417 	ldw	r8,16(sp)
1000ce94:	d8c00217 	ldw	r3,8(sp)
1000ce98:	2084b03a 	or	r2,r4,r2
1000ce9c:	d9c00517 	ldw	r7,20(sp)
1000cea0:	1200062e 	bgeu	r2,r8,1000cebc <__divdf3+0x54c>
1000cea4:	1585883a 	add	r2,r2,r22
1000cea8:	393fffc4 	addi	r4,r7,-1
1000ceac:	1580c536 	bltu	r2,r22,1000d1c4 <__divdf3+0x854>
1000ceb0:	1200c42e 	bgeu	r2,r8,1000d1c4 <__divdf3+0x854>
1000ceb4:	39ffff84 	addi	r7,r7,-2
1000ceb8:	1585883a 	add	r2,r2,r22
1000cebc:	122bc83a 	sub	r21,r2,r8
1000cec0:	a00b883a 	mov	r5,r20
1000cec4:	a809883a 	mov	r4,r21
1000cec8:	d8c00215 	stw	r3,8(sp)
1000cecc:	d9c00515 	stw	r7,20(sp)
1000ced0:	000c0080 	call	1000c008 <__udivsi3>
1000ced4:	9009883a 	mov	r4,r18
1000ced8:	100b883a 	mov	r5,r2
1000cedc:	d8800415 	stw	r2,16(sp)
1000cee0:	00016040 	call	10001604 <__mulsi3>
1000cee4:	a809883a 	mov	r4,r21
1000cee8:	a00b883a 	mov	r5,r20
1000ceec:	1025883a 	mov	r18,r2
1000cef0:	000c06c0 	call	1000c06c <__umodsi3>
1000cef4:	1004943a 	slli	r2,r2,16
1000cef8:	813fffcc 	andi	r4,r16,65535
1000cefc:	d8c00217 	ldw	r3,8(sp)
1000cf00:	20a0b03a 	or	r16,r4,r2
1000cf04:	d9c00517 	ldw	r7,20(sp)
1000cf08:	da000417 	ldw	r8,16(sp)
1000cf0c:	8480062e 	bgeu	r16,r18,1000cf28 <__divdf3+0x5b8>
1000cf10:	85a1883a 	add	r16,r16,r22
1000cf14:	40bfffc4 	addi	r2,r8,-1
1000cf18:	8580ac36 	bltu	r16,r22,1000d1cc <__divdf3+0x85c>
1000cf1c:	8480ab2e 	bgeu	r16,r18,1000d1cc <__divdf3+0x85c>
1000cf20:	423fff84 	addi	r8,r8,-2
1000cf24:	85a1883a 	add	r16,r16,r22
1000cf28:	3804943a 	slli	r2,r7,16
1000cf2c:	84a1c83a 	sub	r16,r16,r18
1000cf30:	e009883a 	mov	r4,fp
1000cf34:	1228b03a 	or	r20,r2,r8
1000cf38:	a1ffffcc 	andi	r7,r20,65535
1000cf3c:	a024d43a 	srli	r18,r20,16
1000cf40:	380b883a 	mov	r5,r7
1000cf44:	d8c00215 	stw	r3,8(sp)
1000cf48:	d9c00515 	stw	r7,20(sp)
1000cf4c:	00016040 	call	10001604 <__mulsi3>
1000cf50:	900b883a 	mov	r5,r18
1000cf54:	e009883a 	mov	r4,fp
1000cf58:	102b883a 	mov	r21,r2
1000cf5c:	00016040 	call	10001604 <__mulsi3>
1000cf60:	900b883a 	mov	r5,r18
1000cf64:	b809883a 	mov	r4,r23
1000cf68:	1039883a 	mov	fp,r2
1000cf6c:	00016040 	call	10001604 <__mulsi3>
1000cf70:	d9c00517 	ldw	r7,20(sp)
1000cf74:	b80b883a 	mov	r5,r23
1000cf78:	1025883a 	mov	r18,r2
1000cf7c:	3809883a 	mov	r4,r7
1000cf80:	00016040 	call	10001604 <__mulsi3>
1000cf84:	a808d43a 	srli	r4,r21,16
1000cf88:	1705883a 	add	r2,r2,fp
1000cf8c:	d8c00217 	ldw	r3,8(sp)
1000cf90:	2085883a 	add	r2,r4,r2
1000cf94:	1700022e 	bgeu	r2,fp,1000cfa0 <__divdf3+0x630>
1000cf98:	01000074 	movhi	r4,1
1000cf9c:	9125883a 	add	r18,r18,r4
1000cfa0:	1008d43a 	srli	r4,r2,16
1000cfa4:	1004943a 	slli	r2,r2,16
1000cfa8:	ad7fffcc 	andi	r21,r21,65535
1000cfac:	2489883a 	add	r4,r4,r18
1000cfb0:	1545883a 	add	r2,r2,r21
1000cfb4:	81003836 	bltu	r16,r4,1000d098 <__divdf3+0x728>
1000cfb8:	81003626 	beq	r16,r4,1000d094 <__divdf3+0x724>
1000cfbc:	a5000054 	ori	r20,r20,1
1000cfc0:	1880ffc4 	addi	r2,r3,1023
1000cfc4:	00bf2e0e 	bge	zero,r2,1000cc80 <__alt_data_end+0xf800cc80>
1000cfc8:	a10001cc 	andi	r4,r20,7
1000cfcc:	20000726 	beq	r4,zero,1000cfec <__divdf3+0x67c>
1000cfd0:	a10003cc 	andi	r4,r20,15
1000cfd4:	01400104 	movi	r5,4
1000cfd8:	21400426 	beq	r4,r5,1000cfec <__divdf3+0x67c>
1000cfdc:	a149883a 	add	r4,r20,r5
1000cfe0:	2529803a 	cmpltu	r20,r4,r20
1000cfe4:	8d23883a 	add	r17,r17,r20
1000cfe8:	2029883a 	mov	r20,r4
1000cfec:	8900402c 	andhi	r4,r17,256
1000cff0:	20000426 	beq	r4,zero,1000d004 <__divdf3+0x694>
1000cff4:	18810004 	addi	r2,r3,1024
1000cff8:	00ffc034 	movhi	r3,65280
1000cffc:	18ffffc4 	addi	r3,r3,-1
1000d000:	88e2703a 	and	r17,r17,r3
1000d004:	00c1ff84 	movi	r3,2046
1000d008:	18beb416 	blt	r3,r2,1000cadc <__alt_data_end+0xf800cadc>
1000d00c:	a028d0fa 	srli	r20,r20,3
1000d010:	882a977a 	slli	r21,r17,29
1000d014:	8820927a 	slli	r16,r17,9
1000d018:	1081ffcc 	andi	r2,r2,2047
1000d01c:	ad2ab03a 	or	r21,r21,r20
1000d020:	8020d33a 	srli	r16,r16,12
1000d024:	9900004c 	andi	r4,r19,1
1000d028:	003eb006 	br	1000caec <__alt_data_end+0xf800caec>
1000d02c:	8080022c 	andhi	r2,r16,8
1000d030:	10001226 	beq	r2,zero,1000d07c <__divdf3+0x70c>
1000d034:	8880022c 	andhi	r2,r17,8
1000d038:	1000101e 	bne	r2,zero,1000d07c <__divdf3+0x70c>
1000d03c:	00800434 	movhi	r2,16
1000d040:	8c000234 	orhi	r16,r17,8
1000d044:	10bfffc4 	addi	r2,r2,-1
1000d048:	b809883a 	mov	r4,r23
1000d04c:	80a0703a 	and	r16,r16,r2
1000d050:	a02b883a 	mov	r21,r20
1000d054:	003f0806 	br	1000cc78 <__alt_data_end+0xf800cc78>
1000d058:	008000c4 	movi	r2,3
1000d05c:	3880b126 	beq	r7,r2,1000d324 <__divdf3+0x9b4>
1000d060:	00800044 	movi	r2,1
1000d064:	38805b1e 	bne	r7,r2,1000d1d4 <__divdf3+0x864>
1000d068:	e009883a 	mov	r4,fp
1000d06c:	0005883a 	mov	r2,zero
1000d070:	0021883a 	mov	r16,zero
1000d074:	002b883a 	mov	r21,zero
1000d078:	003e9c06 	br	1000caec <__alt_data_end+0xf800caec>
1000d07c:	00800434 	movhi	r2,16
1000d080:	84000234 	orhi	r16,r16,8
1000d084:	10bfffc4 	addi	r2,r2,-1
1000d088:	b009883a 	mov	r4,r22
1000d08c:	80a0703a 	and	r16,r16,r2
1000d090:	003ef906 	br	1000cc78 <__alt_data_end+0xf800cc78>
1000d094:	103fca26 	beq	r2,zero,1000cfc0 <__alt_data_end+0xf800cfc0>
1000d098:	b421883a 	add	r16,r22,r16
1000d09c:	a17fffc4 	addi	r5,r20,-1
1000d0a0:	8580422e 	bgeu	r16,r22,1000d1ac <__divdf3+0x83c>
1000d0a4:	2829883a 	mov	r20,r5
1000d0a8:	813fc41e 	bne	r16,r4,1000cfbc <__alt_data_end+0xf800cfbc>
1000d0ac:	d9800017 	ldw	r6,0(sp)
1000d0b0:	30bfc21e 	bne	r6,r2,1000cfbc <__alt_data_end+0xf800cfbc>
1000d0b4:	003fc206 	br	1000cfc0 <__alt_data_end+0xf800cfc0>
1000d0b8:	10bff604 	addi	r2,r2,-40
1000d0bc:	88a0983a 	sll	r16,r17,r2
1000d0c0:	002b883a 	mov	r21,zero
1000d0c4:	003eb406 	br	1000cb98 <__alt_data_end+0xf800cb98>
1000d0c8:	d9800215 	stw	r6,8(sp)
1000d0cc:	d9c00515 	stw	r7,20(sp)
1000d0d0:	da000415 	stw	r8,16(sp)
1000d0d4:	000e9000 	call	1000e900 <__clzsi2>
1000d0d8:	10800804 	addi	r2,r2,32
1000d0dc:	da000417 	ldw	r8,16(sp)
1000d0e0:	d9c00517 	ldw	r7,20(sp)
1000d0e4:	d9800217 	ldw	r6,8(sp)
1000d0e8:	003ea106 	br	1000cb70 <__alt_data_end+0xf800cb70>
1000d0ec:	10bff604 	addi	r2,r2,-40
1000d0f0:	30a2983a 	sll	r17,r6,r2
1000d0f4:	0029883a 	mov	r20,zero
1000d0f8:	003ec906 	br	1000cc20 <__alt_data_end+0xf800cc20>
1000d0fc:	3009883a 	mov	r4,r6
1000d100:	d9400115 	stw	r5,4(sp)
1000d104:	d9800215 	stw	r6,8(sp)
1000d108:	da000415 	stw	r8,16(sp)
1000d10c:	da400315 	stw	r9,12(sp)
1000d110:	000e9000 	call	1000e900 <__clzsi2>
1000d114:	10800804 	addi	r2,r2,32
1000d118:	da400317 	ldw	r9,12(sp)
1000d11c:	da000417 	ldw	r8,16(sp)
1000d120:	d9800217 	ldw	r6,8(sp)
1000d124:	d9400117 	ldw	r5,4(sp)
1000d128:	003eb306 	br	1000cbf8 <__alt_data_end+0xf800cbf8>
1000d12c:	d9800017 	ldw	r6,0(sp)
1000d130:	a9ab883a 	add	r21,r21,r6
1000d134:	a98b803a 	cmpltu	r5,r21,r6
1000d138:	2d8b883a 	add	r5,r5,r22
1000d13c:	2a11883a 	add	r8,r5,r8
1000d140:	897fffc4 	addi	r5,r17,-1
1000d144:	b2000c2e 	bgeu	r22,r8,1000d178 <__divdf3+0x808>
1000d148:	41003f36 	bltu	r8,r4,1000d248 <__divdf3+0x8d8>
1000d14c:	22006c26 	beq	r4,r8,1000d300 <__divdf3+0x990>
1000d150:	4109c83a 	sub	r4,r8,r4
1000d154:	2823883a 	mov	r17,r5
1000d158:	003f3b06 	br	1000ce48 <__alt_data_end+0xf800ce48>
1000d15c:	ad3ed336 	bltu	r21,r20,1000ccac <__alt_data_end+0xf800ccac>
1000d160:	a804d07a 	srli	r2,r21,1
1000d164:	802e97fa 	slli	r23,r16,31
1000d168:	a82a97fa 	slli	r21,r21,31
1000d16c:	8020d07a 	srli	r16,r16,1
1000d170:	b8aeb03a 	or	r23,r23,r2
1000d174:	003ed006 	br	1000ccb8 <__alt_data_end+0xf800ccb8>
1000d178:	b23ff51e 	bne	r22,r8,1000d150 <__alt_data_end+0xf800d150>
1000d17c:	d9800017 	ldw	r6,0(sp)
1000d180:	a9bff12e 	bgeu	r21,r6,1000d148 <__alt_data_end+0xf800d148>
1000d184:	b109c83a 	sub	r4,r22,r4
1000d188:	2823883a 	mov	r17,r5
1000d18c:	003f2e06 	br	1000ce48 <__alt_data_end+0xf800ce48>
1000d190:	2021883a 	mov	r16,r4
1000d194:	003eff06 	br	1000cd94 <__alt_data_end+0xf800cd94>
1000d198:	2023883a 	mov	r17,r4
1000d19c:	003ee406 	br	1000cd30 <__alt_data_end+0xf800cd30>
1000d1a0:	a8bfe236 	bltu	r21,r2,1000d12c <__alt_data_end+0xf800d12c>
1000d1a4:	0009883a 	mov	r4,zero
1000d1a8:	003f2706 	br	1000ce48 <__alt_data_end+0xf800ce48>
1000d1ac:	81002d36 	bltu	r16,r4,1000d264 <__divdf3+0x8f4>
1000d1b0:	24005626 	beq	r4,r16,1000d30c <__divdf3+0x99c>
1000d1b4:	2829883a 	mov	r20,r5
1000d1b8:	003f8006 	br	1000cfbc <__alt_data_end+0xf800cfbc>
1000d1bc:	053fffc4 	movi	r20,-1
1000d1c0:	003f7f06 	br	1000cfc0 <__alt_data_end+0xf800cfc0>
1000d1c4:	200f883a 	mov	r7,r4
1000d1c8:	003f3c06 	br	1000cebc <__alt_data_end+0xf800cebc>
1000d1cc:	1011883a 	mov	r8,r2
1000d1d0:	003f5506 	br	1000cf28 <__alt_data_end+0xf800cf28>
1000d1d4:	e027883a 	mov	r19,fp
1000d1d8:	003f7906 	br	1000cfc0 <__alt_data_end+0xf800cfc0>
1000d1dc:	010007c4 	movi	r4,31
1000d1e0:	20c02816 	blt	r4,r3,1000d284 <__divdf3+0x914>
1000d1e4:	00800804 	movi	r2,32
1000d1e8:	10c5c83a 	sub	r2,r2,r3
1000d1ec:	888a983a 	sll	r5,r17,r2
1000d1f0:	a0c8d83a 	srl	r4,r20,r3
1000d1f4:	a084983a 	sll	r2,r20,r2
1000d1f8:	88e2d83a 	srl	r17,r17,r3
1000d1fc:	2906b03a 	or	r3,r5,r4
1000d200:	1004c03a 	cmpne	r2,r2,zero
1000d204:	1886b03a 	or	r3,r3,r2
1000d208:	188001cc 	andi	r2,r3,7
1000d20c:	10000726 	beq	r2,zero,1000d22c <__divdf3+0x8bc>
1000d210:	188003cc 	andi	r2,r3,15
1000d214:	01000104 	movi	r4,4
1000d218:	11000426 	beq	r2,r4,1000d22c <__divdf3+0x8bc>
1000d21c:	1805883a 	mov	r2,r3
1000d220:	10c00104 	addi	r3,r2,4
1000d224:	1885803a 	cmpltu	r2,r3,r2
1000d228:	88a3883a 	add	r17,r17,r2
1000d22c:	8880202c 	andhi	r2,r17,128
1000d230:	10002926 	beq	r2,zero,1000d2d8 <__divdf3+0x968>
1000d234:	9900004c 	andi	r4,r19,1
1000d238:	00800044 	movi	r2,1
1000d23c:	0021883a 	mov	r16,zero
1000d240:	002b883a 	mov	r21,zero
1000d244:	003e2906 	br	1000caec <__alt_data_end+0xf800caec>
1000d248:	d9800017 	ldw	r6,0(sp)
1000d24c:	8c7fff84 	addi	r17,r17,-2
1000d250:	a9ab883a 	add	r21,r21,r6
1000d254:	a98b803a 	cmpltu	r5,r21,r6
1000d258:	2d8b883a 	add	r5,r5,r22
1000d25c:	2a11883a 	add	r8,r5,r8
1000d260:	003ef806 	br	1000ce44 <__alt_data_end+0xf800ce44>
1000d264:	d9800017 	ldw	r6,0(sp)
1000d268:	318f883a 	add	r7,r6,r6
1000d26c:	398b803a 	cmpltu	r5,r7,r6
1000d270:	2d8d883a 	add	r6,r5,r22
1000d274:	81a1883a 	add	r16,r16,r6
1000d278:	a17fff84 	addi	r5,r20,-2
1000d27c:	d9c00015 	stw	r7,0(sp)
1000d280:	003f8806 	br	1000d0a4 <__alt_data_end+0xf800d0a4>
1000d284:	013ff844 	movi	r4,-31
1000d288:	2085c83a 	sub	r2,r4,r2
1000d28c:	8888d83a 	srl	r4,r17,r2
1000d290:	00800804 	movi	r2,32
1000d294:	18802126 	beq	r3,r2,1000d31c <__divdf3+0x9ac>
1000d298:	04001004 	movi	r16,64
1000d29c:	80c7c83a 	sub	r3,r16,r3
1000d2a0:	88e0983a 	sll	r16,r17,r3
1000d2a4:	8504b03a 	or	r2,r16,r20
1000d2a8:	1004c03a 	cmpne	r2,r2,zero
1000d2ac:	2084b03a 	or	r2,r4,r2
1000d2b0:	144001cc 	andi	r17,r2,7
1000d2b4:	88000d1e 	bne	r17,zero,1000d2ec <__divdf3+0x97c>
1000d2b8:	0021883a 	mov	r16,zero
1000d2bc:	102ad0fa 	srli	r21,r2,3
1000d2c0:	9900004c 	andi	r4,r19,1
1000d2c4:	0005883a 	mov	r2,zero
1000d2c8:	ac6ab03a 	or	r21,r21,r17
1000d2cc:	003e0706 	br	1000caec <__alt_data_end+0xf800caec>
1000d2d0:	1007883a 	mov	r3,r2
1000d2d4:	0023883a 	mov	r17,zero
1000d2d8:	8820927a 	slli	r16,r17,9
1000d2dc:	1805883a 	mov	r2,r3
1000d2e0:	8822977a 	slli	r17,r17,29
1000d2e4:	8020d33a 	srli	r16,r16,12
1000d2e8:	003ff406 	br	1000d2bc <__alt_data_end+0xf800d2bc>
1000d2ec:	10c003cc 	andi	r3,r2,15
1000d2f0:	01000104 	movi	r4,4
1000d2f4:	193ff626 	beq	r3,r4,1000d2d0 <__alt_data_end+0xf800d2d0>
1000d2f8:	0023883a 	mov	r17,zero
1000d2fc:	003fc806 	br	1000d220 <__alt_data_end+0xf800d220>
1000d300:	a8bfd136 	bltu	r21,r2,1000d248 <__alt_data_end+0xf800d248>
1000d304:	2823883a 	mov	r17,r5
1000d308:	003fa606 	br	1000d1a4 <__alt_data_end+0xf800d1a4>
1000d30c:	d9800017 	ldw	r6,0(sp)
1000d310:	30bfd436 	bltu	r6,r2,1000d264 <__alt_data_end+0xf800d264>
1000d314:	2829883a 	mov	r20,r5
1000d318:	003f6406 	br	1000d0ac <__alt_data_end+0xf800d0ac>
1000d31c:	0021883a 	mov	r16,zero
1000d320:	003fe006 	br	1000d2a4 <__alt_data_end+0xf800d2a4>
1000d324:	00800434 	movhi	r2,16
1000d328:	8c000234 	orhi	r16,r17,8
1000d32c:	10bfffc4 	addi	r2,r2,-1
1000d330:	e009883a 	mov	r4,fp
1000d334:	80a0703a 	and	r16,r16,r2
1000d338:	a02b883a 	mov	r21,r20
1000d33c:	003e4e06 	br	1000cc78 <__alt_data_end+0xf800cc78>

1000d340 <__eqdf2>:
1000d340:	2804d53a 	srli	r2,r5,20
1000d344:	3806d53a 	srli	r3,r7,20
1000d348:	02000434 	movhi	r8,16
1000d34c:	423fffc4 	addi	r8,r8,-1
1000d350:	1081ffcc 	andi	r2,r2,2047
1000d354:	0281ffc4 	movi	r10,2047
1000d358:	2a12703a 	and	r9,r5,r8
1000d35c:	18c1ffcc 	andi	r3,r3,2047
1000d360:	3a10703a 	and	r8,r7,r8
1000d364:	280ad7fa 	srli	r5,r5,31
1000d368:	380ed7fa 	srli	r7,r7,31
1000d36c:	12801026 	beq	r2,r10,1000d3b0 <__eqdf2+0x70>
1000d370:	0281ffc4 	movi	r10,2047
1000d374:	1a800a26 	beq	r3,r10,1000d3a0 <__eqdf2+0x60>
1000d378:	10c00226 	beq	r2,r3,1000d384 <__eqdf2+0x44>
1000d37c:	00800044 	movi	r2,1
1000d380:	f800283a 	ret
1000d384:	4a3ffd1e 	bne	r9,r8,1000d37c <__alt_data_end+0xf800d37c>
1000d388:	21bffc1e 	bne	r4,r6,1000d37c <__alt_data_end+0xf800d37c>
1000d38c:	29c00c26 	beq	r5,r7,1000d3c0 <__eqdf2+0x80>
1000d390:	103ffa1e 	bne	r2,zero,1000d37c <__alt_data_end+0xf800d37c>
1000d394:	2244b03a 	or	r2,r4,r9
1000d398:	1004c03a 	cmpne	r2,r2,zero
1000d39c:	f800283a 	ret
1000d3a0:	3214b03a 	or	r10,r6,r8
1000d3a4:	503ff426 	beq	r10,zero,1000d378 <__alt_data_end+0xf800d378>
1000d3a8:	00800044 	movi	r2,1
1000d3ac:	f800283a 	ret
1000d3b0:	2254b03a 	or	r10,r4,r9
1000d3b4:	503fee26 	beq	r10,zero,1000d370 <__alt_data_end+0xf800d370>
1000d3b8:	00800044 	movi	r2,1
1000d3bc:	f800283a 	ret
1000d3c0:	0005883a 	mov	r2,zero
1000d3c4:	f800283a 	ret

1000d3c8 <__gedf2>:
1000d3c8:	2804d53a 	srli	r2,r5,20
1000d3cc:	3806d53a 	srli	r3,r7,20
1000d3d0:	02000434 	movhi	r8,16
1000d3d4:	423fffc4 	addi	r8,r8,-1
1000d3d8:	1081ffcc 	andi	r2,r2,2047
1000d3dc:	0241ffc4 	movi	r9,2047
1000d3e0:	2a14703a 	and	r10,r5,r8
1000d3e4:	18c1ffcc 	andi	r3,r3,2047
1000d3e8:	3a10703a 	and	r8,r7,r8
1000d3ec:	280ad7fa 	srli	r5,r5,31
1000d3f0:	380ed7fa 	srli	r7,r7,31
1000d3f4:	12401d26 	beq	r2,r9,1000d46c <__gedf2+0xa4>
1000d3f8:	0241ffc4 	movi	r9,2047
1000d3fc:	1a401226 	beq	r3,r9,1000d448 <__gedf2+0x80>
1000d400:	1000081e 	bne	r2,zero,1000d424 <__gedf2+0x5c>
1000d404:	2296b03a 	or	r11,r4,r10
1000d408:	5813003a 	cmpeq	r9,r11,zero
1000d40c:	1800091e 	bne	r3,zero,1000d434 <__gedf2+0x6c>
1000d410:	3218b03a 	or	r12,r6,r8
1000d414:	6000071e 	bne	r12,zero,1000d434 <__gedf2+0x6c>
1000d418:	0005883a 	mov	r2,zero
1000d41c:	5800101e 	bne	r11,zero,1000d460 <__gedf2+0x98>
1000d420:	f800283a 	ret
1000d424:	18000c1e 	bne	r3,zero,1000d458 <__gedf2+0x90>
1000d428:	3212b03a 	or	r9,r6,r8
1000d42c:	48000c26 	beq	r9,zero,1000d460 <__gedf2+0x98>
1000d430:	0013883a 	mov	r9,zero
1000d434:	39c03fcc 	andi	r7,r7,255
1000d438:	48000826 	beq	r9,zero,1000d45c <__gedf2+0x94>
1000d43c:	38000926 	beq	r7,zero,1000d464 <__gedf2+0x9c>
1000d440:	00800044 	movi	r2,1
1000d444:	f800283a 	ret
1000d448:	3212b03a 	or	r9,r6,r8
1000d44c:	483fec26 	beq	r9,zero,1000d400 <__alt_data_end+0xf800d400>
1000d450:	00bfff84 	movi	r2,-2
1000d454:	f800283a 	ret
1000d458:	39c03fcc 	andi	r7,r7,255
1000d45c:	29c00626 	beq	r5,r7,1000d478 <__gedf2+0xb0>
1000d460:	283ff726 	beq	r5,zero,1000d440 <__alt_data_end+0xf800d440>
1000d464:	00bfffc4 	movi	r2,-1
1000d468:	f800283a 	ret
1000d46c:	2292b03a 	or	r9,r4,r10
1000d470:	483fe126 	beq	r9,zero,1000d3f8 <__alt_data_end+0xf800d3f8>
1000d474:	003ff606 	br	1000d450 <__alt_data_end+0xf800d450>
1000d478:	18bff916 	blt	r3,r2,1000d460 <__alt_data_end+0xf800d460>
1000d47c:	10c00316 	blt	r2,r3,1000d48c <__gedf2+0xc4>
1000d480:	42bff736 	bltu	r8,r10,1000d460 <__alt_data_end+0xf800d460>
1000d484:	52000326 	beq	r10,r8,1000d494 <__gedf2+0xcc>
1000d488:	5200042e 	bgeu	r10,r8,1000d49c <__gedf2+0xd4>
1000d48c:	283fec1e 	bne	r5,zero,1000d440 <__alt_data_end+0xf800d440>
1000d490:	003ff406 	br	1000d464 <__alt_data_end+0xf800d464>
1000d494:	313ff236 	bltu	r6,r4,1000d460 <__alt_data_end+0xf800d460>
1000d498:	21bffc36 	bltu	r4,r6,1000d48c <__alt_data_end+0xf800d48c>
1000d49c:	0005883a 	mov	r2,zero
1000d4a0:	f800283a 	ret

1000d4a4 <__ledf2>:
1000d4a4:	2804d53a 	srli	r2,r5,20
1000d4a8:	3810d53a 	srli	r8,r7,20
1000d4ac:	00c00434 	movhi	r3,16
1000d4b0:	18ffffc4 	addi	r3,r3,-1
1000d4b4:	1081ffcc 	andi	r2,r2,2047
1000d4b8:	0241ffc4 	movi	r9,2047
1000d4bc:	28d4703a 	and	r10,r5,r3
1000d4c0:	4201ffcc 	andi	r8,r8,2047
1000d4c4:	38c6703a 	and	r3,r7,r3
1000d4c8:	280ad7fa 	srli	r5,r5,31
1000d4cc:	380ed7fa 	srli	r7,r7,31
1000d4d0:	12401f26 	beq	r2,r9,1000d550 <__ledf2+0xac>
1000d4d4:	0241ffc4 	movi	r9,2047
1000d4d8:	42401426 	beq	r8,r9,1000d52c <__ledf2+0x88>
1000d4dc:	1000091e 	bne	r2,zero,1000d504 <__ledf2+0x60>
1000d4e0:	2296b03a 	or	r11,r4,r10
1000d4e4:	5813003a 	cmpeq	r9,r11,zero
1000d4e8:	29403fcc 	andi	r5,r5,255
1000d4ec:	40000a1e 	bne	r8,zero,1000d518 <__ledf2+0x74>
1000d4f0:	30d8b03a 	or	r12,r6,r3
1000d4f4:	6000081e 	bne	r12,zero,1000d518 <__ledf2+0x74>
1000d4f8:	0005883a 	mov	r2,zero
1000d4fc:	5800111e 	bne	r11,zero,1000d544 <__ledf2+0xa0>
1000d500:	f800283a 	ret
1000d504:	29403fcc 	andi	r5,r5,255
1000d508:	40000c1e 	bne	r8,zero,1000d53c <__ledf2+0x98>
1000d50c:	30d2b03a 	or	r9,r6,r3
1000d510:	48000c26 	beq	r9,zero,1000d544 <__ledf2+0xa0>
1000d514:	0013883a 	mov	r9,zero
1000d518:	39c03fcc 	andi	r7,r7,255
1000d51c:	48000826 	beq	r9,zero,1000d540 <__ledf2+0x9c>
1000d520:	38001126 	beq	r7,zero,1000d568 <__ledf2+0xc4>
1000d524:	00800044 	movi	r2,1
1000d528:	f800283a 	ret
1000d52c:	30d2b03a 	or	r9,r6,r3
1000d530:	483fea26 	beq	r9,zero,1000d4dc <__alt_data_end+0xf800d4dc>
1000d534:	00800084 	movi	r2,2
1000d538:	f800283a 	ret
1000d53c:	39c03fcc 	andi	r7,r7,255
1000d540:	39400726 	beq	r7,r5,1000d560 <__ledf2+0xbc>
1000d544:	2800081e 	bne	r5,zero,1000d568 <__ledf2+0xc4>
1000d548:	00800044 	movi	r2,1
1000d54c:	f800283a 	ret
1000d550:	2292b03a 	or	r9,r4,r10
1000d554:	483fdf26 	beq	r9,zero,1000d4d4 <__alt_data_end+0xf800d4d4>
1000d558:	00800084 	movi	r2,2
1000d55c:	f800283a 	ret
1000d560:	4080030e 	bge	r8,r2,1000d570 <__ledf2+0xcc>
1000d564:	383fef26 	beq	r7,zero,1000d524 <__alt_data_end+0xf800d524>
1000d568:	00bfffc4 	movi	r2,-1
1000d56c:	f800283a 	ret
1000d570:	123feb16 	blt	r2,r8,1000d520 <__alt_data_end+0xf800d520>
1000d574:	1abff336 	bltu	r3,r10,1000d544 <__alt_data_end+0xf800d544>
1000d578:	50c00326 	beq	r10,r3,1000d588 <__ledf2+0xe4>
1000d57c:	50c0042e 	bgeu	r10,r3,1000d590 <__ledf2+0xec>
1000d580:	283fe81e 	bne	r5,zero,1000d524 <__alt_data_end+0xf800d524>
1000d584:	003ff806 	br	1000d568 <__alt_data_end+0xf800d568>
1000d588:	313fee36 	bltu	r6,r4,1000d544 <__alt_data_end+0xf800d544>
1000d58c:	21bffc36 	bltu	r4,r6,1000d580 <__alt_data_end+0xf800d580>
1000d590:	0005883a 	mov	r2,zero
1000d594:	f800283a 	ret

1000d598 <__muldf3>:
1000d598:	deffee04 	addi	sp,sp,-72
1000d59c:	dd000c15 	stw	r20,48(sp)
1000d5a0:	2828d53a 	srli	r20,r5,20
1000d5a4:	ddc00f15 	stw	r23,60(sp)
1000d5a8:	282ed7fa 	srli	r23,r5,31
1000d5ac:	dc000815 	stw	r16,32(sp)
1000d5b0:	04000434 	movhi	r16,16
1000d5b4:	dcc00b15 	stw	r19,44(sp)
1000d5b8:	843fffc4 	addi	r16,r16,-1
1000d5bc:	dfc01115 	stw	ra,68(sp)
1000d5c0:	df001015 	stw	fp,64(sp)
1000d5c4:	dd800e15 	stw	r22,56(sp)
1000d5c8:	dd400d15 	stw	r21,52(sp)
1000d5cc:	dc800a15 	stw	r18,40(sp)
1000d5d0:	dc400915 	stw	r17,36(sp)
1000d5d4:	a501ffcc 	andi	r20,r20,2047
1000d5d8:	2c20703a 	and	r16,r5,r16
1000d5dc:	b827883a 	mov	r19,r23
1000d5e0:	ba403fcc 	andi	r9,r23,255
1000d5e4:	a0006026 	beq	r20,zero,1000d768 <__muldf3+0x1d0>
1000d5e8:	0081ffc4 	movi	r2,2047
1000d5ec:	202d883a 	mov	r22,r4
1000d5f0:	a0803626 	beq	r20,r2,1000d6cc <__muldf3+0x134>
1000d5f4:	84000434 	orhi	r16,r16,16
1000d5f8:	200ad77a 	srli	r5,r4,29
1000d5fc:	800690fa 	slli	r3,r16,3
1000d600:	202c90fa 	slli	r22,r4,3
1000d604:	a53f0044 	addi	r20,r20,-1023
1000d608:	28e0b03a 	or	r16,r5,r3
1000d60c:	002b883a 	mov	r21,zero
1000d610:	000b883a 	mov	r5,zero
1000d614:	3806d53a 	srli	r3,r7,20
1000d618:	3838d7fa 	srli	fp,r7,31
1000d61c:	04400434 	movhi	r17,16
1000d620:	8c7fffc4 	addi	r17,r17,-1
1000d624:	18c1ffcc 	andi	r3,r3,2047
1000d628:	3025883a 	mov	r18,r6
1000d62c:	3c62703a 	and	r17,r7,r17
1000d630:	e2803fcc 	andi	r10,fp,255
1000d634:	18006d26 	beq	r3,zero,1000d7ec <__muldf3+0x254>
1000d638:	0081ffc4 	movi	r2,2047
1000d63c:	18806526 	beq	r3,r2,1000d7d4 <__muldf3+0x23c>
1000d640:	8c400434 	orhi	r17,r17,16
1000d644:	300ed77a 	srli	r7,r6,29
1000d648:	880890fa 	slli	r4,r17,3
1000d64c:	302490fa 	slli	r18,r6,3
1000d650:	18ff0044 	addi	r3,r3,-1023
1000d654:	3922b03a 	or	r17,r7,r4
1000d658:	000f883a 	mov	r7,zero
1000d65c:	a0c7883a 	add	r3,r20,r3
1000d660:	3d48b03a 	or	r4,r7,r21
1000d664:	008003c4 	movi	r2,15
1000d668:	e5ccf03a 	xor	r6,fp,r23
1000d66c:	1a000044 	addi	r8,r3,1
1000d670:	11009b36 	bltu	r2,r4,1000d8e0 <__muldf3+0x348>
1000d674:	200890ba 	slli	r4,r4,2
1000d678:	00840074 	movhi	r2,4097
1000d67c:	10b5a304 	addi	r2,r2,-10612
1000d680:	2089883a 	add	r4,r4,r2
1000d684:	20800017 	ldw	r2,0(r4)
1000d688:	1000683a 	jmp	r2
1000d68c:	1000d8e0 	cmpeqi	zero,r2,867
1000d690:	1000d6ec 	andhi	zero,r2,859
1000d694:	1000d6ec 	andhi	zero,r2,859
1000d698:	1000d6e8 	cmpgeui	zero,r2,859
1000d69c:	1000d8bc 	xorhi	zero,r2,866
1000d6a0:	1000d8bc 	xorhi	zero,r2,866
1000d6a4:	1000d8a4 	muli	zero,r2,866
1000d6a8:	1000d6e8 	cmpgeui	zero,r2,859
1000d6ac:	1000d8bc 	xorhi	zero,r2,866
1000d6b0:	1000d8a4 	muli	zero,r2,866
1000d6b4:	1000d8bc 	xorhi	zero,r2,866
1000d6b8:	1000d6e8 	cmpgeui	zero,r2,859
1000d6bc:	1000d8cc 	andi	zero,r2,867
1000d6c0:	1000d8cc 	andi	zero,r2,867
1000d6c4:	1000d8cc 	andi	zero,r2,867
1000d6c8:	1000dc28 	cmpgeui	zero,r2,880
1000d6cc:	2404b03a 	or	r2,r4,r16
1000d6d0:	1000711e 	bne	r2,zero,1000d898 <__muldf3+0x300>
1000d6d4:	05400204 	movi	r21,8
1000d6d8:	0021883a 	mov	r16,zero
1000d6dc:	002d883a 	mov	r22,zero
1000d6e0:	01400084 	movi	r5,2
1000d6e4:	003fcb06 	br	1000d614 <__alt_data_end+0xf800d614>
1000d6e8:	500d883a 	mov	r6,r10
1000d6ec:	00800084 	movi	r2,2
1000d6f0:	38805926 	beq	r7,r2,1000d858 <__muldf3+0x2c0>
1000d6f4:	008000c4 	movi	r2,3
1000d6f8:	3881ba26 	beq	r7,r2,1000dde4 <__muldf3+0x84c>
1000d6fc:	00800044 	movi	r2,1
1000d700:	3881951e 	bne	r7,r2,1000dd58 <__muldf3+0x7c0>
1000d704:	3027883a 	mov	r19,r6
1000d708:	0005883a 	mov	r2,zero
1000d70c:	0021883a 	mov	r16,zero
1000d710:	002d883a 	mov	r22,zero
1000d714:	1004953a 	slli	r2,r2,20
1000d718:	98c03fcc 	andi	r3,r19,255
1000d71c:	04400434 	movhi	r17,16
1000d720:	8c7fffc4 	addi	r17,r17,-1
1000d724:	180697fa 	slli	r3,r3,31
1000d728:	8460703a 	and	r16,r16,r17
1000d72c:	80a0b03a 	or	r16,r16,r2
1000d730:	80c6b03a 	or	r3,r16,r3
1000d734:	b005883a 	mov	r2,r22
1000d738:	dfc01117 	ldw	ra,68(sp)
1000d73c:	df001017 	ldw	fp,64(sp)
1000d740:	ddc00f17 	ldw	r23,60(sp)
1000d744:	dd800e17 	ldw	r22,56(sp)
1000d748:	dd400d17 	ldw	r21,52(sp)
1000d74c:	dd000c17 	ldw	r20,48(sp)
1000d750:	dcc00b17 	ldw	r19,44(sp)
1000d754:	dc800a17 	ldw	r18,40(sp)
1000d758:	dc400917 	ldw	r17,36(sp)
1000d75c:	dc000817 	ldw	r16,32(sp)
1000d760:	dec01204 	addi	sp,sp,72
1000d764:	f800283a 	ret
1000d768:	2404b03a 	or	r2,r4,r16
1000d76c:	202b883a 	mov	r21,r4
1000d770:	10004426 	beq	r2,zero,1000d884 <__muldf3+0x2ec>
1000d774:	80015026 	beq	r16,zero,1000dcb8 <__muldf3+0x720>
1000d778:	8009883a 	mov	r4,r16
1000d77c:	d9800715 	stw	r6,28(sp)
1000d780:	d9c00215 	stw	r7,8(sp)
1000d784:	da400415 	stw	r9,16(sp)
1000d788:	000e9000 	call	1000e900 <__clzsi2>
1000d78c:	d9800717 	ldw	r6,28(sp)
1000d790:	d9c00217 	ldw	r7,8(sp)
1000d794:	da400417 	ldw	r9,16(sp)
1000d798:	10fffd44 	addi	r3,r2,-11
1000d79c:	01000704 	movi	r4,28
1000d7a0:	20c14116 	blt	r4,r3,1000dca8 <__muldf3+0x710>
1000d7a4:	01000744 	movi	r4,29
1000d7a8:	15bffe04 	addi	r22,r2,-8
1000d7ac:	20c9c83a 	sub	r4,r4,r3
1000d7b0:	85a0983a 	sll	r16,r16,r22
1000d7b4:	a908d83a 	srl	r4,r21,r4
1000d7b8:	adac983a 	sll	r22,r21,r22
1000d7bc:	2420b03a 	or	r16,r4,r16
1000d7c0:	053f0084 	movi	r20,-1022
1000d7c4:	a0e9c83a 	sub	r20,r20,r3
1000d7c8:	002b883a 	mov	r21,zero
1000d7cc:	000b883a 	mov	r5,zero
1000d7d0:	003f9006 	br	1000d614 <__alt_data_end+0xf800d614>
1000d7d4:	3444b03a 	or	r2,r6,r17
1000d7d8:	1000281e 	bne	r2,zero,1000d87c <__muldf3+0x2e4>
1000d7dc:	0023883a 	mov	r17,zero
1000d7e0:	0025883a 	mov	r18,zero
1000d7e4:	01c00084 	movi	r7,2
1000d7e8:	003f9c06 	br	1000d65c <__alt_data_end+0xf800d65c>
1000d7ec:	3444b03a 	or	r2,r6,r17
1000d7f0:	10001e26 	beq	r2,zero,1000d86c <__muldf3+0x2d4>
1000d7f4:	88012026 	beq	r17,zero,1000dc78 <__muldf3+0x6e0>
1000d7f8:	8809883a 	mov	r4,r17
1000d7fc:	d9400215 	stw	r5,8(sp)
1000d800:	d9800715 	stw	r6,28(sp)
1000d804:	da400415 	stw	r9,16(sp)
1000d808:	da800315 	stw	r10,12(sp)
1000d80c:	000e9000 	call	1000e900 <__clzsi2>
1000d810:	d9400217 	ldw	r5,8(sp)
1000d814:	d9800717 	ldw	r6,28(sp)
1000d818:	da400417 	ldw	r9,16(sp)
1000d81c:	da800317 	ldw	r10,12(sp)
1000d820:	113ffd44 	addi	r4,r2,-11
1000d824:	00c00704 	movi	r3,28
1000d828:	19010f16 	blt	r3,r4,1000dc68 <__muldf3+0x6d0>
1000d82c:	00c00744 	movi	r3,29
1000d830:	14bffe04 	addi	r18,r2,-8
1000d834:	1907c83a 	sub	r3,r3,r4
1000d838:	8ca2983a 	sll	r17,r17,r18
1000d83c:	30c6d83a 	srl	r3,r6,r3
1000d840:	34a4983a 	sll	r18,r6,r18
1000d844:	1c62b03a 	or	r17,r3,r17
1000d848:	00ff0084 	movi	r3,-1022
1000d84c:	1907c83a 	sub	r3,r3,r4
1000d850:	000f883a 	mov	r7,zero
1000d854:	003f8106 	br	1000d65c <__alt_data_end+0xf800d65c>
1000d858:	3027883a 	mov	r19,r6
1000d85c:	0081ffc4 	movi	r2,2047
1000d860:	0021883a 	mov	r16,zero
1000d864:	002d883a 	mov	r22,zero
1000d868:	003faa06 	br	1000d714 <__alt_data_end+0xf800d714>
1000d86c:	0023883a 	mov	r17,zero
1000d870:	0025883a 	mov	r18,zero
1000d874:	01c00044 	movi	r7,1
1000d878:	003f7806 	br	1000d65c <__alt_data_end+0xf800d65c>
1000d87c:	01c000c4 	movi	r7,3
1000d880:	003f7606 	br	1000d65c <__alt_data_end+0xf800d65c>
1000d884:	05400104 	movi	r21,4
1000d888:	0021883a 	mov	r16,zero
1000d88c:	002d883a 	mov	r22,zero
1000d890:	01400044 	movi	r5,1
1000d894:	003f5f06 	br	1000d614 <__alt_data_end+0xf800d614>
1000d898:	05400304 	movi	r21,12
1000d89c:	014000c4 	movi	r5,3
1000d8a0:	003f5c06 	br	1000d614 <__alt_data_end+0xf800d614>
1000d8a4:	04000434 	movhi	r16,16
1000d8a8:	0027883a 	mov	r19,zero
1000d8ac:	843fffc4 	addi	r16,r16,-1
1000d8b0:	05bfffc4 	movi	r22,-1
1000d8b4:	0081ffc4 	movi	r2,2047
1000d8b8:	003f9606 	br	1000d714 <__alt_data_end+0xf800d714>
1000d8bc:	8023883a 	mov	r17,r16
1000d8c0:	b025883a 	mov	r18,r22
1000d8c4:	280f883a 	mov	r7,r5
1000d8c8:	003f8806 	br	1000d6ec <__alt_data_end+0xf800d6ec>
1000d8cc:	8023883a 	mov	r17,r16
1000d8d0:	b025883a 	mov	r18,r22
1000d8d4:	480d883a 	mov	r6,r9
1000d8d8:	280f883a 	mov	r7,r5
1000d8dc:	003f8306 	br	1000d6ec <__alt_data_end+0xf800d6ec>
1000d8e0:	b028d43a 	srli	r20,r22,16
1000d8e4:	902ed43a 	srli	r23,r18,16
1000d8e8:	b5bfffcc 	andi	r22,r22,65535
1000d8ec:	94bfffcc 	andi	r18,r18,65535
1000d8f0:	b00b883a 	mov	r5,r22
1000d8f4:	9009883a 	mov	r4,r18
1000d8f8:	d8c00515 	stw	r3,20(sp)
1000d8fc:	d9800715 	stw	r6,28(sp)
1000d900:	da000615 	stw	r8,24(sp)
1000d904:	00016040 	call	10001604 <__mulsi3>
1000d908:	a00b883a 	mov	r5,r20
1000d90c:	9009883a 	mov	r4,r18
1000d910:	1027883a 	mov	r19,r2
1000d914:	00016040 	call	10001604 <__mulsi3>
1000d918:	b80b883a 	mov	r5,r23
1000d91c:	a009883a 	mov	r4,r20
1000d920:	102b883a 	mov	r21,r2
1000d924:	00016040 	call	10001604 <__mulsi3>
1000d928:	b809883a 	mov	r4,r23
1000d92c:	b00b883a 	mov	r5,r22
1000d930:	1039883a 	mov	fp,r2
1000d934:	00016040 	call	10001604 <__mulsi3>
1000d938:	9808d43a 	srli	r4,r19,16
1000d93c:	1545883a 	add	r2,r2,r21
1000d940:	d8c00517 	ldw	r3,20(sp)
1000d944:	2085883a 	add	r2,r4,r2
1000d948:	d9800717 	ldw	r6,28(sp)
1000d94c:	da000617 	ldw	r8,24(sp)
1000d950:	1540022e 	bgeu	r2,r21,1000d95c <__muldf3+0x3c4>
1000d954:	01000074 	movhi	r4,1
1000d958:	e139883a 	add	fp,fp,r4
1000d95c:	100e943a 	slli	r7,r2,16
1000d960:	1004d43a 	srli	r2,r2,16
1000d964:	882ad43a 	srli	r21,r17,16
1000d968:	9cffffcc 	andi	r19,r19,65535
1000d96c:	8c7fffcc 	andi	r17,r17,65535
1000d970:	3ce7883a 	add	r19,r7,r19
1000d974:	b00b883a 	mov	r5,r22
1000d978:	8809883a 	mov	r4,r17
1000d97c:	d8c00515 	stw	r3,20(sp)
1000d980:	d9800715 	stw	r6,28(sp)
1000d984:	da000615 	stw	r8,24(sp)
1000d988:	dcc00115 	stw	r19,4(sp)
1000d98c:	d8800015 	stw	r2,0(sp)
1000d990:	00016040 	call	10001604 <__mulsi3>
1000d994:	a00b883a 	mov	r5,r20
1000d998:	8809883a 	mov	r4,r17
1000d99c:	d8800215 	stw	r2,8(sp)
1000d9a0:	00016040 	call	10001604 <__mulsi3>
1000d9a4:	a009883a 	mov	r4,r20
1000d9a8:	a80b883a 	mov	r5,r21
1000d9ac:	1027883a 	mov	r19,r2
1000d9b0:	00016040 	call	10001604 <__mulsi3>
1000d9b4:	a809883a 	mov	r4,r21
1000d9b8:	b00b883a 	mov	r5,r22
1000d9bc:	1029883a 	mov	r20,r2
1000d9c0:	00016040 	call	10001604 <__mulsi3>
1000d9c4:	d9c00217 	ldw	r7,8(sp)
1000d9c8:	14c5883a 	add	r2,r2,r19
1000d9cc:	d8c00517 	ldw	r3,20(sp)
1000d9d0:	3808d43a 	srli	r4,r7,16
1000d9d4:	d9800717 	ldw	r6,28(sp)
1000d9d8:	da000617 	ldw	r8,24(sp)
1000d9dc:	2085883a 	add	r2,r4,r2
1000d9e0:	14c0022e 	bgeu	r2,r19,1000d9ec <__muldf3+0x454>
1000d9e4:	01000074 	movhi	r4,1
1000d9e8:	a129883a 	add	r20,r20,r4
1000d9ec:	1012d43a 	srli	r9,r2,16
1000d9f0:	1004943a 	slli	r2,r2,16
1000d9f4:	802cd43a 	srli	r22,r16,16
1000d9f8:	843fffcc 	andi	r16,r16,65535
1000d9fc:	3cffffcc 	andi	r19,r7,65535
1000da00:	9009883a 	mov	r4,r18
1000da04:	800b883a 	mov	r5,r16
1000da08:	4d29883a 	add	r20,r9,r20
1000da0c:	d8c00515 	stw	r3,20(sp)
1000da10:	d9800715 	stw	r6,28(sp)
1000da14:	da000615 	stw	r8,24(sp)
1000da18:	14e7883a 	add	r19,r2,r19
1000da1c:	00016040 	call	10001604 <__mulsi3>
1000da20:	9009883a 	mov	r4,r18
1000da24:	b00b883a 	mov	r5,r22
1000da28:	d8800315 	stw	r2,12(sp)
1000da2c:	00016040 	call	10001604 <__mulsi3>
1000da30:	b809883a 	mov	r4,r23
1000da34:	b00b883a 	mov	r5,r22
1000da38:	d8800215 	stw	r2,8(sp)
1000da3c:	00016040 	call	10001604 <__mulsi3>
1000da40:	b80b883a 	mov	r5,r23
1000da44:	8009883a 	mov	r4,r16
1000da48:	d8800415 	stw	r2,16(sp)
1000da4c:	00016040 	call	10001604 <__mulsi3>
1000da50:	da800317 	ldw	r10,12(sp)
1000da54:	d9c00217 	ldw	r7,8(sp)
1000da58:	d9000017 	ldw	r4,0(sp)
1000da5c:	502ed43a 	srli	r23,r10,16
1000da60:	11c5883a 	add	r2,r2,r7
1000da64:	24e5883a 	add	r18,r4,r19
1000da68:	b885883a 	add	r2,r23,r2
1000da6c:	d8c00517 	ldw	r3,20(sp)
1000da70:	d9800717 	ldw	r6,28(sp)
1000da74:	da000617 	ldw	r8,24(sp)
1000da78:	da400417 	ldw	r9,16(sp)
1000da7c:	11c0022e 	bgeu	r2,r7,1000da88 <__muldf3+0x4f0>
1000da80:	01000074 	movhi	r4,1
1000da84:	4913883a 	add	r9,r9,r4
1000da88:	100ed43a 	srli	r7,r2,16
1000da8c:	1004943a 	slli	r2,r2,16
1000da90:	55ffffcc 	andi	r23,r10,65535
1000da94:	3a53883a 	add	r9,r7,r9
1000da98:	8809883a 	mov	r4,r17
1000da9c:	800b883a 	mov	r5,r16
1000daa0:	d8c00515 	stw	r3,20(sp)
1000daa4:	d9800715 	stw	r6,28(sp)
1000daa8:	da000615 	stw	r8,24(sp)
1000daac:	da400415 	stw	r9,16(sp)
1000dab0:	15ef883a 	add	r23,r2,r23
1000dab4:	00016040 	call	10001604 <__mulsi3>
1000dab8:	8809883a 	mov	r4,r17
1000dabc:	b00b883a 	mov	r5,r22
1000dac0:	d8800215 	stw	r2,8(sp)
1000dac4:	00016040 	call	10001604 <__mulsi3>
1000dac8:	b00b883a 	mov	r5,r22
1000dacc:	a809883a 	mov	r4,r21
1000dad0:	d8800315 	stw	r2,12(sp)
1000dad4:	00016040 	call	10001604 <__mulsi3>
1000dad8:	8009883a 	mov	r4,r16
1000dadc:	a80b883a 	mov	r5,r21
1000dae0:	1023883a 	mov	r17,r2
1000dae4:	00016040 	call	10001604 <__mulsi3>
1000dae8:	d9c00217 	ldw	r7,8(sp)
1000daec:	da800317 	ldw	r10,12(sp)
1000daf0:	d8c00517 	ldw	r3,20(sp)
1000daf4:	3808d43a 	srli	r4,r7,16
1000daf8:	1285883a 	add	r2,r2,r10
1000dafc:	d9800717 	ldw	r6,28(sp)
1000db00:	2085883a 	add	r2,r4,r2
1000db04:	da000617 	ldw	r8,24(sp)
1000db08:	da400417 	ldw	r9,16(sp)
1000db0c:	1280022e 	bgeu	r2,r10,1000db18 <__muldf3+0x580>
1000db10:	01000074 	movhi	r4,1
1000db14:	8923883a 	add	r17,r17,r4
1000db18:	1008943a 	slli	r4,r2,16
1000db1c:	39ffffcc 	andi	r7,r7,65535
1000db20:	e4b9883a 	add	fp,fp,r18
1000db24:	21cf883a 	add	r7,r4,r7
1000db28:	e4e7803a 	cmpltu	r19,fp,r19
1000db2c:	3d0f883a 	add	r7,r7,r20
1000db30:	bf39883a 	add	fp,r23,fp
1000db34:	99c9883a 	add	r4,r19,r7
1000db38:	e5ef803a 	cmpltu	r23,fp,r23
1000db3c:	490b883a 	add	r5,r9,r4
1000db40:	1004d43a 	srli	r2,r2,16
1000db44:	b965883a 	add	r18,r23,r5
1000db48:	24c9803a 	cmpltu	r4,r4,r19
1000db4c:	3d29803a 	cmpltu	r20,r7,r20
1000db50:	a128b03a 	or	r20,r20,r4
1000db54:	95ef803a 	cmpltu	r23,r18,r23
1000db58:	2a53803a 	cmpltu	r9,r5,r9
1000db5c:	a0a9883a 	add	r20,r20,r2
1000db60:	4deeb03a 	or	r23,r9,r23
1000db64:	a5ef883a 	add	r23,r20,r23
1000db68:	bc63883a 	add	r17,r23,r17
1000db6c:	e004927a 	slli	r2,fp,9
1000db70:	d9000117 	ldw	r4,4(sp)
1000db74:	882e927a 	slli	r23,r17,9
1000db78:	9022d5fa 	srli	r17,r18,23
1000db7c:	e038d5fa 	srli	fp,fp,23
1000db80:	1104b03a 	or	r2,r2,r4
1000db84:	9024927a 	slli	r18,r18,9
1000db88:	1004c03a 	cmpne	r2,r2,zero
1000db8c:	bc62b03a 	or	r17,r23,r17
1000db90:	1738b03a 	or	fp,r2,fp
1000db94:	8880402c 	andhi	r2,r17,256
1000db98:	e4a4b03a 	or	r18,fp,r18
1000db9c:	10000726 	beq	r2,zero,1000dbbc <__muldf3+0x624>
1000dba0:	9006d07a 	srli	r3,r18,1
1000dba4:	880497fa 	slli	r2,r17,31
1000dba8:	9480004c 	andi	r18,r18,1
1000dbac:	8822d07a 	srli	r17,r17,1
1000dbb0:	1ca4b03a 	or	r18,r3,r18
1000dbb4:	14a4b03a 	or	r18,r2,r18
1000dbb8:	4007883a 	mov	r3,r8
1000dbbc:	1880ffc4 	addi	r2,r3,1023
1000dbc0:	0080460e 	bge	zero,r2,1000dcdc <__muldf3+0x744>
1000dbc4:	910001cc 	andi	r4,r18,7
1000dbc8:	20000726 	beq	r4,zero,1000dbe8 <__muldf3+0x650>
1000dbcc:	910003cc 	andi	r4,r18,15
1000dbd0:	01400104 	movi	r5,4
1000dbd4:	21400426 	beq	r4,r5,1000dbe8 <__muldf3+0x650>
1000dbd8:	9149883a 	add	r4,r18,r5
1000dbdc:	24a5803a 	cmpltu	r18,r4,r18
1000dbe0:	8ca3883a 	add	r17,r17,r18
1000dbe4:	2025883a 	mov	r18,r4
1000dbe8:	8900402c 	andhi	r4,r17,256
1000dbec:	20000426 	beq	r4,zero,1000dc00 <__muldf3+0x668>
1000dbf0:	18810004 	addi	r2,r3,1024
1000dbf4:	00ffc034 	movhi	r3,65280
1000dbf8:	18ffffc4 	addi	r3,r3,-1
1000dbfc:	88e2703a 	and	r17,r17,r3
1000dc00:	00c1ff84 	movi	r3,2046
1000dc04:	18bf1416 	blt	r3,r2,1000d858 <__alt_data_end+0xf800d858>
1000dc08:	882c977a 	slli	r22,r17,29
1000dc0c:	9024d0fa 	srli	r18,r18,3
1000dc10:	8822927a 	slli	r17,r17,9
1000dc14:	1081ffcc 	andi	r2,r2,2047
1000dc18:	b4acb03a 	or	r22,r22,r18
1000dc1c:	8820d33a 	srli	r16,r17,12
1000dc20:	3027883a 	mov	r19,r6
1000dc24:	003ebb06 	br	1000d714 <__alt_data_end+0xf800d714>
1000dc28:	8080022c 	andhi	r2,r16,8
1000dc2c:	10000926 	beq	r2,zero,1000dc54 <__muldf3+0x6bc>
1000dc30:	8880022c 	andhi	r2,r17,8
1000dc34:	1000071e 	bne	r2,zero,1000dc54 <__muldf3+0x6bc>
1000dc38:	00800434 	movhi	r2,16
1000dc3c:	8c000234 	orhi	r16,r17,8
1000dc40:	10bfffc4 	addi	r2,r2,-1
1000dc44:	e027883a 	mov	r19,fp
1000dc48:	80a0703a 	and	r16,r16,r2
1000dc4c:	902d883a 	mov	r22,r18
1000dc50:	003f1806 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000dc54:	00800434 	movhi	r2,16
1000dc58:	84000234 	orhi	r16,r16,8
1000dc5c:	10bfffc4 	addi	r2,r2,-1
1000dc60:	80a0703a 	and	r16,r16,r2
1000dc64:	003f1306 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000dc68:	147ff604 	addi	r17,r2,-40
1000dc6c:	3462983a 	sll	r17,r6,r17
1000dc70:	0025883a 	mov	r18,zero
1000dc74:	003ef406 	br	1000d848 <__alt_data_end+0xf800d848>
1000dc78:	3009883a 	mov	r4,r6
1000dc7c:	d9400215 	stw	r5,8(sp)
1000dc80:	d9800715 	stw	r6,28(sp)
1000dc84:	da400415 	stw	r9,16(sp)
1000dc88:	da800315 	stw	r10,12(sp)
1000dc8c:	000e9000 	call	1000e900 <__clzsi2>
1000dc90:	10800804 	addi	r2,r2,32
1000dc94:	da800317 	ldw	r10,12(sp)
1000dc98:	da400417 	ldw	r9,16(sp)
1000dc9c:	d9800717 	ldw	r6,28(sp)
1000dca0:	d9400217 	ldw	r5,8(sp)
1000dca4:	003ede06 	br	1000d820 <__alt_data_end+0xf800d820>
1000dca8:	143ff604 	addi	r16,r2,-40
1000dcac:	ac20983a 	sll	r16,r21,r16
1000dcb0:	002d883a 	mov	r22,zero
1000dcb4:	003ec206 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000dcb8:	d9800715 	stw	r6,28(sp)
1000dcbc:	d9c00215 	stw	r7,8(sp)
1000dcc0:	da400415 	stw	r9,16(sp)
1000dcc4:	000e9000 	call	1000e900 <__clzsi2>
1000dcc8:	10800804 	addi	r2,r2,32
1000dccc:	da400417 	ldw	r9,16(sp)
1000dcd0:	d9c00217 	ldw	r7,8(sp)
1000dcd4:	d9800717 	ldw	r6,28(sp)
1000dcd8:	003eaf06 	br	1000d798 <__alt_data_end+0xf800d798>
1000dcdc:	00c00044 	movi	r3,1
1000dce0:	1887c83a 	sub	r3,r3,r2
1000dce4:	01000e04 	movi	r4,56
1000dce8:	20fe8616 	blt	r4,r3,1000d704 <__alt_data_end+0xf800d704>
1000dcec:	010007c4 	movi	r4,31
1000dcf0:	20c01b16 	blt	r4,r3,1000dd60 <__muldf3+0x7c8>
1000dcf4:	00800804 	movi	r2,32
1000dcf8:	10c5c83a 	sub	r2,r2,r3
1000dcfc:	888a983a 	sll	r5,r17,r2
1000dd00:	90c8d83a 	srl	r4,r18,r3
1000dd04:	9084983a 	sll	r2,r18,r2
1000dd08:	88e2d83a 	srl	r17,r17,r3
1000dd0c:	2906b03a 	or	r3,r5,r4
1000dd10:	1004c03a 	cmpne	r2,r2,zero
1000dd14:	1886b03a 	or	r3,r3,r2
1000dd18:	188001cc 	andi	r2,r3,7
1000dd1c:	10000726 	beq	r2,zero,1000dd3c <__muldf3+0x7a4>
1000dd20:	188003cc 	andi	r2,r3,15
1000dd24:	01000104 	movi	r4,4
1000dd28:	11000426 	beq	r2,r4,1000dd3c <__muldf3+0x7a4>
1000dd2c:	1805883a 	mov	r2,r3
1000dd30:	10c00104 	addi	r3,r2,4
1000dd34:	1885803a 	cmpltu	r2,r3,r2
1000dd38:	88a3883a 	add	r17,r17,r2
1000dd3c:	8880202c 	andhi	r2,r17,128
1000dd40:	10001c26 	beq	r2,zero,1000ddb4 <__muldf3+0x81c>
1000dd44:	3027883a 	mov	r19,r6
1000dd48:	00800044 	movi	r2,1
1000dd4c:	0021883a 	mov	r16,zero
1000dd50:	002d883a 	mov	r22,zero
1000dd54:	003e6f06 	br	1000d714 <__alt_data_end+0xf800d714>
1000dd58:	4007883a 	mov	r3,r8
1000dd5c:	003f9706 	br	1000dbbc <__alt_data_end+0xf800dbbc>
1000dd60:	017ff844 	movi	r5,-31
1000dd64:	2885c83a 	sub	r2,r5,r2
1000dd68:	888ad83a 	srl	r5,r17,r2
1000dd6c:	00800804 	movi	r2,32
1000dd70:	18801a26 	beq	r3,r2,1000dddc <__muldf3+0x844>
1000dd74:	01001004 	movi	r4,64
1000dd78:	20c7c83a 	sub	r3,r4,r3
1000dd7c:	88e2983a 	sll	r17,r17,r3
1000dd80:	8ca4b03a 	or	r18,r17,r18
1000dd84:	9004c03a 	cmpne	r2,r18,zero
1000dd88:	2884b03a 	or	r2,r5,r2
1000dd8c:	144001cc 	andi	r17,r2,7
1000dd90:	88000d1e 	bne	r17,zero,1000ddc8 <__muldf3+0x830>
1000dd94:	0021883a 	mov	r16,zero
1000dd98:	102cd0fa 	srli	r22,r2,3
1000dd9c:	3027883a 	mov	r19,r6
1000dda0:	0005883a 	mov	r2,zero
1000dda4:	b46cb03a 	or	r22,r22,r17
1000dda8:	003e5a06 	br	1000d714 <__alt_data_end+0xf800d714>
1000ddac:	1007883a 	mov	r3,r2
1000ddb0:	0023883a 	mov	r17,zero
1000ddb4:	8820927a 	slli	r16,r17,9
1000ddb8:	1805883a 	mov	r2,r3
1000ddbc:	8822977a 	slli	r17,r17,29
1000ddc0:	8020d33a 	srli	r16,r16,12
1000ddc4:	003ff406 	br	1000dd98 <__alt_data_end+0xf800dd98>
1000ddc8:	10c003cc 	andi	r3,r2,15
1000ddcc:	01000104 	movi	r4,4
1000ddd0:	193ff626 	beq	r3,r4,1000ddac <__alt_data_end+0xf800ddac>
1000ddd4:	0023883a 	mov	r17,zero
1000ddd8:	003fd506 	br	1000dd30 <__alt_data_end+0xf800dd30>
1000dddc:	0023883a 	mov	r17,zero
1000dde0:	003fe706 	br	1000dd80 <__alt_data_end+0xf800dd80>
1000dde4:	00800434 	movhi	r2,16
1000dde8:	8c000234 	orhi	r16,r17,8
1000ddec:	10bfffc4 	addi	r2,r2,-1
1000ddf0:	3027883a 	mov	r19,r6
1000ddf4:	80a0703a 	and	r16,r16,r2
1000ddf8:	902d883a 	mov	r22,r18
1000ddfc:	003ead06 	br	1000d8b4 <__alt_data_end+0xf800d8b4>

1000de00 <__subdf3>:
1000de00:	02000434 	movhi	r8,16
1000de04:	423fffc4 	addi	r8,r8,-1
1000de08:	defffb04 	addi	sp,sp,-20
1000de0c:	2a14703a 	and	r10,r5,r8
1000de10:	3812d53a 	srli	r9,r7,20
1000de14:	3a10703a 	and	r8,r7,r8
1000de18:	2006d77a 	srli	r3,r4,29
1000de1c:	3004d77a 	srli	r2,r6,29
1000de20:	dc000015 	stw	r16,0(sp)
1000de24:	501490fa 	slli	r10,r10,3
1000de28:	2820d53a 	srli	r16,r5,20
1000de2c:	401090fa 	slli	r8,r8,3
1000de30:	dc800215 	stw	r18,8(sp)
1000de34:	dc400115 	stw	r17,4(sp)
1000de38:	dfc00415 	stw	ra,16(sp)
1000de3c:	202290fa 	slli	r17,r4,3
1000de40:	dcc00315 	stw	r19,12(sp)
1000de44:	4a41ffcc 	andi	r9,r9,2047
1000de48:	0101ffc4 	movi	r4,2047
1000de4c:	2824d7fa 	srli	r18,r5,31
1000de50:	8401ffcc 	andi	r16,r16,2047
1000de54:	50c6b03a 	or	r3,r10,r3
1000de58:	380ed7fa 	srli	r7,r7,31
1000de5c:	408ab03a 	or	r5,r8,r2
1000de60:	300c90fa 	slli	r6,r6,3
1000de64:	49009626 	beq	r9,r4,1000e0c0 <__subdf3+0x2c0>
1000de68:	39c0005c 	xori	r7,r7,1
1000de6c:	8245c83a 	sub	r2,r16,r9
1000de70:	3c807426 	beq	r7,r18,1000e044 <__subdf3+0x244>
1000de74:	0080af0e 	bge	zero,r2,1000e134 <__subdf3+0x334>
1000de78:	48002a1e 	bne	r9,zero,1000df24 <__subdf3+0x124>
1000de7c:	2988b03a 	or	r4,r5,r6
1000de80:	20009a1e 	bne	r4,zero,1000e0ec <__subdf3+0x2ec>
1000de84:	888001cc 	andi	r2,r17,7
1000de88:	10000726 	beq	r2,zero,1000dea8 <__subdf3+0xa8>
1000de8c:	888003cc 	andi	r2,r17,15
1000de90:	01000104 	movi	r4,4
1000de94:	11000426 	beq	r2,r4,1000dea8 <__subdf3+0xa8>
1000de98:	890b883a 	add	r5,r17,r4
1000de9c:	2c63803a 	cmpltu	r17,r5,r17
1000dea0:	1c47883a 	add	r3,r3,r17
1000dea4:	2823883a 	mov	r17,r5
1000dea8:	1880202c 	andhi	r2,r3,128
1000deac:	10005926 	beq	r2,zero,1000e014 <__subdf3+0x214>
1000deb0:	84000044 	addi	r16,r16,1
1000deb4:	0081ffc4 	movi	r2,2047
1000deb8:	8080be26 	beq	r16,r2,1000e1b4 <__subdf3+0x3b4>
1000debc:	017fe034 	movhi	r5,65408
1000dec0:	297fffc4 	addi	r5,r5,-1
1000dec4:	1946703a 	and	r3,r3,r5
1000dec8:	1804977a 	slli	r2,r3,29
1000decc:	1806927a 	slli	r3,r3,9
1000ded0:	8822d0fa 	srli	r17,r17,3
1000ded4:	8401ffcc 	andi	r16,r16,2047
1000ded8:	180ad33a 	srli	r5,r3,12
1000dedc:	9100004c 	andi	r4,r18,1
1000dee0:	1444b03a 	or	r2,r2,r17
1000dee4:	80c1ffcc 	andi	r3,r16,2047
1000dee8:	1820953a 	slli	r16,r3,20
1000deec:	20c03fcc 	andi	r3,r4,255
1000def0:	180897fa 	slli	r4,r3,31
1000def4:	00c00434 	movhi	r3,16
1000def8:	18ffffc4 	addi	r3,r3,-1
1000defc:	28c6703a 	and	r3,r5,r3
1000df00:	1c06b03a 	or	r3,r3,r16
1000df04:	1906b03a 	or	r3,r3,r4
1000df08:	dfc00417 	ldw	ra,16(sp)
1000df0c:	dcc00317 	ldw	r19,12(sp)
1000df10:	dc800217 	ldw	r18,8(sp)
1000df14:	dc400117 	ldw	r17,4(sp)
1000df18:	dc000017 	ldw	r16,0(sp)
1000df1c:	dec00504 	addi	sp,sp,20
1000df20:	f800283a 	ret
1000df24:	0101ffc4 	movi	r4,2047
1000df28:	813fd626 	beq	r16,r4,1000de84 <__alt_data_end+0xf800de84>
1000df2c:	29402034 	orhi	r5,r5,128
1000df30:	01000e04 	movi	r4,56
1000df34:	2080a316 	blt	r4,r2,1000e1c4 <__subdf3+0x3c4>
1000df38:	010007c4 	movi	r4,31
1000df3c:	2080c616 	blt	r4,r2,1000e258 <__subdf3+0x458>
1000df40:	01000804 	movi	r4,32
1000df44:	2089c83a 	sub	r4,r4,r2
1000df48:	2910983a 	sll	r8,r5,r4
1000df4c:	308ed83a 	srl	r7,r6,r2
1000df50:	3108983a 	sll	r4,r6,r4
1000df54:	2884d83a 	srl	r2,r5,r2
1000df58:	41ccb03a 	or	r6,r8,r7
1000df5c:	2008c03a 	cmpne	r4,r4,zero
1000df60:	310cb03a 	or	r6,r6,r4
1000df64:	898dc83a 	sub	r6,r17,r6
1000df68:	89a3803a 	cmpltu	r17,r17,r6
1000df6c:	1887c83a 	sub	r3,r3,r2
1000df70:	1c47c83a 	sub	r3,r3,r17
1000df74:	3023883a 	mov	r17,r6
1000df78:	1880202c 	andhi	r2,r3,128
1000df7c:	10002326 	beq	r2,zero,1000e00c <__subdf3+0x20c>
1000df80:	04c02034 	movhi	r19,128
1000df84:	9cffffc4 	addi	r19,r19,-1
1000df88:	1ce6703a 	and	r19,r3,r19
1000df8c:	98007a26 	beq	r19,zero,1000e178 <__subdf3+0x378>
1000df90:	9809883a 	mov	r4,r19
1000df94:	000e9000 	call	1000e900 <__clzsi2>
1000df98:	113ffe04 	addi	r4,r2,-8
1000df9c:	00c007c4 	movi	r3,31
1000dfa0:	19007b16 	blt	r3,r4,1000e190 <__subdf3+0x390>
1000dfa4:	00800804 	movi	r2,32
1000dfa8:	1105c83a 	sub	r2,r2,r4
1000dfac:	8884d83a 	srl	r2,r17,r2
1000dfb0:	9906983a 	sll	r3,r19,r4
1000dfb4:	8922983a 	sll	r17,r17,r4
1000dfb8:	10c4b03a 	or	r2,r2,r3
1000dfbc:	24007816 	blt	r4,r16,1000e1a0 <__subdf3+0x3a0>
1000dfc0:	2421c83a 	sub	r16,r4,r16
1000dfc4:	80c00044 	addi	r3,r16,1
1000dfc8:	010007c4 	movi	r4,31
1000dfcc:	20c09516 	blt	r4,r3,1000e224 <__subdf3+0x424>
1000dfd0:	01400804 	movi	r5,32
1000dfd4:	28cbc83a 	sub	r5,r5,r3
1000dfd8:	88c8d83a 	srl	r4,r17,r3
1000dfdc:	8962983a 	sll	r17,r17,r5
1000dfe0:	114a983a 	sll	r5,r2,r5
1000dfe4:	10c6d83a 	srl	r3,r2,r3
1000dfe8:	8804c03a 	cmpne	r2,r17,zero
1000dfec:	290ab03a 	or	r5,r5,r4
1000dff0:	28a2b03a 	or	r17,r5,r2
1000dff4:	0021883a 	mov	r16,zero
1000dff8:	003fa206 	br	1000de84 <__alt_data_end+0xf800de84>
1000dffc:	2090b03a 	or	r8,r4,r2
1000e000:	40018e26 	beq	r8,zero,1000e63c <__subdf3+0x83c>
1000e004:	1007883a 	mov	r3,r2
1000e008:	2023883a 	mov	r17,r4
1000e00c:	888001cc 	andi	r2,r17,7
1000e010:	103f9e1e 	bne	r2,zero,1000de8c <__alt_data_end+0xf800de8c>
1000e014:	1804977a 	slli	r2,r3,29
1000e018:	8822d0fa 	srli	r17,r17,3
1000e01c:	1810d0fa 	srli	r8,r3,3
1000e020:	9100004c 	andi	r4,r18,1
1000e024:	1444b03a 	or	r2,r2,r17
1000e028:	00c1ffc4 	movi	r3,2047
1000e02c:	80c02826 	beq	r16,r3,1000e0d0 <__subdf3+0x2d0>
1000e030:	01400434 	movhi	r5,16
1000e034:	297fffc4 	addi	r5,r5,-1
1000e038:	80e0703a 	and	r16,r16,r3
1000e03c:	414a703a 	and	r5,r8,r5
1000e040:	003fa806 	br	1000dee4 <__alt_data_end+0xf800dee4>
1000e044:	0080630e 	bge	zero,r2,1000e1d4 <__subdf3+0x3d4>
1000e048:	48003026 	beq	r9,zero,1000e10c <__subdf3+0x30c>
1000e04c:	0101ffc4 	movi	r4,2047
1000e050:	813f8c26 	beq	r16,r4,1000de84 <__alt_data_end+0xf800de84>
1000e054:	29402034 	orhi	r5,r5,128
1000e058:	01000e04 	movi	r4,56
1000e05c:	2080a90e 	bge	r4,r2,1000e304 <__subdf3+0x504>
1000e060:	298cb03a 	or	r6,r5,r6
1000e064:	3012c03a 	cmpne	r9,r6,zero
1000e068:	0005883a 	mov	r2,zero
1000e06c:	4c53883a 	add	r9,r9,r17
1000e070:	4c63803a 	cmpltu	r17,r9,r17
1000e074:	10c7883a 	add	r3,r2,r3
1000e078:	88c7883a 	add	r3,r17,r3
1000e07c:	4823883a 	mov	r17,r9
1000e080:	1880202c 	andhi	r2,r3,128
1000e084:	1000d026 	beq	r2,zero,1000e3c8 <__subdf3+0x5c8>
1000e088:	84000044 	addi	r16,r16,1
1000e08c:	0081ffc4 	movi	r2,2047
1000e090:	8080fe26 	beq	r16,r2,1000e48c <__subdf3+0x68c>
1000e094:	00bfe034 	movhi	r2,65408
1000e098:	10bfffc4 	addi	r2,r2,-1
1000e09c:	1886703a 	and	r3,r3,r2
1000e0a0:	880ad07a 	srli	r5,r17,1
1000e0a4:	180497fa 	slli	r2,r3,31
1000e0a8:	8900004c 	andi	r4,r17,1
1000e0ac:	2922b03a 	or	r17,r5,r4
1000e0b0:	1806d07a 	srli	r3,r3,1
1000e0b4:	1462b03a 	or	r17,r2,r17
1000e0b8:	3825883a 	mov	r18,r7
1000e0bc:	003f7106 	br	1000de84 <__alt_data_end+0xf800de84>
1000e0c0:	2984b03a 	or	r2,r5,r6
1000e0c4:	103f6826 	beq	r2,zero,1000de68 <__alt_data_end+0xf800de68>
1000e0c8:	39c03fcc 	andi	r7,r7,255
1000e0cc:	003f6706 	br	1000de6c <__alt_data_end+0xf800de6c>
1000e0d0:	4086b03a 	or	r3,r8,r2
1000e0d4:	18015226 	beq	r3,zero,1000e620 <__subdf3+0x820>
1000e0d8:	00c00434 	movhi	r3,16
1000e0dc:	41400234 	orhi	r5,r8,8
1000e0e0:	18ffffc4 	addi	r3,r3,-1
1000e0e4:	28ca703a 	and	r5,r5,r3
1000e0e8:	003f7e06 	br	1000dee4 <__alt_data_end+0xf800dee4>
1000e0ec:	10bfffc4 	addi	r2,r2,-1
1000e0f0:	1000491e 	bne	r2,zero,1000e218 <__subdf3+0x418>
1000e0f4:	898fc83a 	sub	r7,r17,r6
1000e0f8:	89e3803a 	cmpltu	r17,r17,r7
1000e0fc:	1947c83a 	sub	r3,r3,r5
1000e100:	1c47c83a 	sub	r3,r3,r17
1000e104:	3823883a 	mov	r17,r7
1000e108:	003f9b06 	br	1000df78 <__alt_data_end+0xf800df78>
1000e10c:	2988b03a 	or	r4,r5,r6
1000e110:	203f5c26 	beq	r4,zero,1000de84 <__alt_data_end+0xf800de84>
1000e114:	10bfffc4 	addi	r2,r2,-1
1000e118:	1000931e 	bne	r2,zero,1000e368 <__subdf3+0x568>
1000e11c:	898d883a 	add	r6,r17,r6
1000e120:	3463803a 	cmpltu	r17,r6,r17
1000e124:	1947883a 	add	r3,r3,r5
1000e128:	88c7883a 	add	r3,r17,r3
1000e12c:	3023883a 	mov	r17,r6
1000e130:	003fd306 	br	1000e080 <__alt_data_end+0xf800e080>
1000e134:	1000541e 	bne	r2,zero,1000e288 <__subdf3+0x488>
1000e138:	80800044 	addi	r2,r16,1
1000e13c:	1081ffcc 	andi	r2,r2,2047
1000e140:	01000044 	movi	r4,1
1000e144:	2080a20e 	bge	r4,r2,1000e3d0 <__subdf3+0x5d0>
1000e148:	8989c83a 	sub	r4,r17,r6
1000e14c:	8905803a 	cmpltu	r2,r17,r4
1000e150:	1967c83a 	sub	r19,r3,r5
1000e154:	98a7c83a 	sub	r19,r19,r2
1000e158:	9880202c 	andhi	r2,r19,128
1000e15c:	10006326 	beq	r2,zero,1000e2ec <__subdf3+0x4ec>
1000e160:	3463c83a 	sub	r17,r6,r17
1000e164:	28c7c83a 	sub	r3,r5,r3
1000e168:	344d803a 	cmpltu	r6,r6,r17
1000e16c:	19a7c83a 	sub	r19,r3,r6
1000e170:	3825883a 	mov	r18,r7
1000e174:	983f861e 	bne	r19,zero,1000df90 <__alt_data_end+0xf800df90>
1000e178:	8809883a 	mov	r4,r17
1000e17c:	000e9000 	call	1000e900 <__clzsi2>
1000e180:	10800804 	addi	r2,r2,32
1000e184:	113ffe04 	addi	r4,r2,-8
1000e188:	00c007c4 	movi	r3,31
1000e18c:	193f850e 	bge	r3,r4,1000dfa4 <__alt_data_end+0xf800dfa4>
1000e190:	10bff604 	addi	r2,r2,-40
1000e194:	8884983a 	sll	r2,r17,r2
1000e198:	0023883a 	mov	r17,zero
1000e19c:	243f880e 	bge	r4,r16,1000dfc0 <__alt_data_end+0xf800dfc0>
1000e1a0:	00ffe034 	movhi	r3,65408
1000e1a4:	18ffffc4 	addi	r3,r3,-1
1000e1a8:	8121c83a 	sub	r16,r16,r4
1000e1ac:	10c6703a 	and	r3,r2,r3
1000e1b0:	003f3406 	br	1000de84 <__alt_data_end+0xf800de84>
1000e1b4:	9100004c 	andi	r4,r18,1
1000e1b8:	000b883a 	mov	r5,zero
1000e1bc:	0005883a 	mov	r2,zero
1000e1c0:	003f4806 	br	1000dee4 <__alt_data_end+0xf800dee4>
1000e1c4:	298cb03a 	or	r6,r5,r6
1000e1c8:	300cc03a 	cmpne	r6,r6,zero
1000e1cc:	0005883a 	mov	r2,zero
1000e1d0:	003f6406 	br	1000df64 <__alt_data_end+0xf800df64>
1000e1d4:	10009a1e 	bne	r2,zero,1000e440 <__subdf3+0x640>
1000e1d8:	82400044 	addi	r9,r16,1
1000e1dc:	4881ffcc 	andi	r2,r9,2047
1000e1e0:	02800044 	movi	r10,1
1000e1e4:	5080670e 	bge	r10,r2,1000e384 <__subdf3+0x584>
1000e1e8:	0081ffc4 	movi	r2,2047
1000e1ec:	4880af26 	beq	r9,r2,1000e4ac <__subdf3+0x6ac>
1000e1f0:	898d883a 	add	r6,r17,r6
1000e1f4:	1945883a 	add	r2,r3,r5
1000e1f8:	3447803a 	cmpltu	r3,r6,r17
1000e1fc:	1887883a 	add	r3,r3,r2
1000e200:	182297fa 	slli	r17,r3,31
1000e204:	300cd07a 	srli	r6,r6,1
1000e208:	1806d07a 	srli	r3,r3,1
1000e20c:	4821883a 	mov	r16,r9
1000e210:	89a2b03a 	or	r17,r17,r6
1000e214:	003f1b06 	br	1000de84 <__alt_data_end+0xf800de84>
1000e218:	0101ffc4 	movi	r4,2047
1000e21c:	813f441e 	bne	r16,r4,1000df30 <__alt_data_end+0xf800df30>
1000e220:	003f1806 	br	1000de84 <__alt_data_end+0xf800de84>
1000e224:	843ff844 	addi	r16,r16,-31
1000e228:	01400804 	movi	r5,32
1000e22c:	1408d83a 	srl	r4,r2,r16
1000e230:	19405026 	beq	r3,r5,1000e374 <__subdf3+0x574>
1000e234:	01401004 	movi	r5,64
1000e238:	28c7c83a 	sub	r3,r5,r3
1000e23c:	10c4983a 	sll	r2,r2,r3
1000e240:	88a2b03a 	or	r17,r17,r2
1000e244:	8822c03a 	cmpne	r17,r17,zero
1000e248:	2462b03a 	or	r17,r4,r17
1000e24c:	0007883a 	mov	r3,zero
1000e250:	0021883a 	mov	r16,zero
1000e254:	003f6d06 	br	1000e00c <__alt_data_end+0xf800e00c>
1000e258:	11fff804 	addi	r7,r2,-32
1000e25c:	01000804 	movi	r4,32
1000e260:	29ced83a 	srl	r7,r5,r7
1000e264:	11004526 	beq	r2,r4,1000e37c <__subdf3+0x57c>
1000e268:	01001004 	movi	r4,64
1000e26c:	2089c83a 	sub	r4,r4,r2
1000e270:	2904983a 	sll	r2,r5,r4
1000e274:	118cb03a 	or	r6,r2,r6
1000e278:	300cc03a 	cmpne	r6,r6,zero
1000e27c:	398cb03a 	or	r6,r7,r6
1000e280:	0005883a 	mov	r2,zero
1000e284:	003f3706 	br	1000df64 <__alt_data_end+0xf800df64>
1000e288:	80002a26 	beq	r16,zero,1000e334 <__subdf3+0x534>
1000e28c:	0101ffc4 	movi	r4,2047
1000e290:	49006626 	beq	r9,r4,1000e42c <__subdf3+0x62c>
1000e294:	0085c83a 	sub	r2,zero,r2
1000e298:	18c02034 	orhi	r3,r3,128
1000e29c:	01000e04 	movi	r4,56
1000e2a0:	20807e16 	blt	r4,r2,1000e49c <__subdf3+0x69c>
1000e2a4:	010007c4 	movi	r4,31
1000e2a8:	2080e716 	blt	r4,r2,1000e648 <__subdf3+0x848>
1000e2ac:	01000804 	movi	r4,32
1000e2b0:	2089c83a 	sub	r4,r4,r2
1000e2b4:	1914983a 	sll	r10,r3,r4
1000e2b8:	8890d83a 	srl	r8,r17,r2
1000e2bc:	8908983a 	sll	r4,r17,r4
1000e2c0:	1884d83a 	srl	r2,r3,r2
1000e2c4:	5222b03a 	or	r17,r10,r8
1000e2c8:	2006c03a 	cmpne	r3,r4,zero
1000e2cc:	88e2b03a 	or	r17,r17,r3
1000e2d0:	3463c83a 	sub	r17,r6,r17
1000e2d4:	2885c83a 	sub	r2,r5,r2
1000e2d8:	344d803a 	cmpltu	r6,r6,r17
1000e2dc:	1187c83a 	sub	r3,r2,r6
1000e2e0:	4821883a 	mov	r16,r9
1000e2e4:	3825883a 	mov	r18,r7
1000e2e8:	003f2306 	br	1000df78 <__alt_data_end+0xf800df78>
1000e2ec:	24d0b03a 	or	r8,r4,r19
1000e2f0:	40001b1e 	bne	r8,zero,1000e360 <__subdf3+0x560>
1000e2f4:	0005883a 	mov	r2,zero
1000e2f8:	0009883a 	mov	r4,zero
1000e2fc:	0021883a 	mov	r16,zero
1000e300:	003f4906 	br	1000e028 <__alt_data_end+0xf800e028>
1000e304:	010007c4 	movi	r4,31
1000e308:	20803a16 	blt	r4,r2,1000e3f4 <__subdf3+0x5f4>
1000e30c:	01000804 	movi	r4,32
1000e310:	2089c83a 	sub	r4,r4,r2
1000e314:	2912983a 	sll	r9,r5,r4
1000e318:	3090d83a 	srl	r8,r6,r2
1000e31c:	3108983a 	sll	r4,r6,r4
1000e320:	2884d83a 	srl	r2,r5,r2
1000e324:	4a12b03a 	or	r9,r9,r8
1000e328:	2008c03a 	cmpne	r4,r4,zero
1000e32c:	4912b03a 	or	r9,r9,r4
1000e330:	003f4e06 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e334:	1c48b03a 	or	r4,r3,r17
1000e338:	20003c26 	beq	r4,zero,1000e42c <__subdf3+0x62c>
1000e33c:	0084303a 	nor	r2,zero,r2
1000e340:	1000381e 	bne	r2,zero,1000e424 <__subdf3+0x624>
1000e344:	3463c83a 	sub	r17,r6,r17
1000e348:	28c5c83a 	sub	r2,r5,r3
1000e34c:	344d803a 	cmpltu	r6,r6,r17
1000e350:	1187c83a 	sub	r3,r2,r6
1000e354:	4821883a 	mov	r16,r9
1000e358:	3825883a 	mov	r18,r7
1000e35c:	003f0606 	br	1000df78 <__alt_data_end+0xf800df78>
1000e360:	2023883a 	mov	r17,r4
1000e364:	003f0906 	br	1000df8c <__alt_data_end+0xf800df8c>
1000e368:	0101ffc4 	movi	r4,2047
1000e36c:	813f3a1e 	bne	r16,r4,1000e058 <__alt_data_end+0xf800e058>
1000e370:	003ec406 	br	1000de84 <__alt_data_end+0xf800de84>
1000e374:	0005883a 	mov	r2,zero
1000e378:	003fb106 	br	1000e240 <__alt_data_end+0xf800e240>
1000e37c:	0005883a 	mov	r2,zero
1000e380:	003fbc06 	br	1000e274 <__alt_data_end+0xf800e274>
1000e384:	1c44b03a 	or	r2,r3,r17
1000e388:	80008e1e 	bne	r16,zero,1000e5c4 <__subdf3+0x7c4>
1000e38c:	1000c826 	beq	r2,zero,1000e6b0 <__subdf3+0x8b0>
1000e390:	2984b03a 	or	r2,r5,r6
1000e394:	103ebb26 	beq	r2,zero,1000de84 <__alt_data_end+0xf800de84>
1000e398:	8989883a 	add	r4,r17,r6
1000e39c:	1945883a 	add	r2,r3,r5
1000e3a0:	2447803a 	cmpltu	r3,r4,r17
1000e3a4:	1887883a 	add	r3,r3,r2
1000e3a8:	1880202c 	andhi	r2,r3,128
1000e3ac:	2023883a 	mov	r17,r4
1000e3b0:	103f1626 	beq	r2,zero,1000e00c <__alt_data_end+0xf800e00c>
1000e3b4:	00bfe034 	movhi	r2,65408
1000e3b8:	10bfffc4 	addi	r2,r2,-1
1000e3bc:	5021883a 	mov	r16,r10
1000e3c0:	1886703a 	and	r3,r3,r2
1000e3c4:	003eaf06 	br	1000de84 <__alt_data_end+0xf800de84>
1000e3c8:	3825883a 	mov	r18,r7
1000e3cc:	003f0f06 	br	1000e00c <__alt_data_end+0xf800e00c>
1000e3d0:	1c44b03a 	or	r2,r3,r17
1000e3d4:	8000251e 	bne	r16,zero,1000e46c <__subdf3+0x66c>
1000e3d8:	1000661e 	bne	r2,zero,1000e574 <__subdf3+0x774>
1000e3dc:	2990b03a 	or	r8,r5,r6
1000e3e0:	40009626 	beq	r8,zero,1000e63c <__subdf3+0x83c>
1000e3e4:	2807883a 	mov	r3,r5
1000e3e8:	3023883a 	mov	r17,r6
1000e3ec:	3825883a 	mov	r18,r7
1000e3f0:	003ea406 	br	1000de84 <__alt_data_end+0xf800de84>
1000e3f4:	127ff804 	addi	r9,r2,-32
1000e3f8:	01000804 	movi	r4,32
1000e3fc:	2a52d83a 	srl	r9,r5,r9
1000e400:	11008c26 	beq	r2,r4,1000e634 <__subdf3+0x834>
1000e404:	01001004 	movi	r4,64
1000e408:	2085c83a 	sub	r2,r4,r2
1000e40c:	2884983a 	sll	r2,r5,r2
1000e410:	118cb03a 	or	r6,r2,r6
1000e414:	300cc03a 	cmpne	r6,r6,zero
1000e418:	4992b03a 	or	r9,r9,r6
1000e41c:	0005883a 	mov	r2,zero
1000e420:	003f1206 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e424:	0101ffc4 	movi	r4,2047
1000e428:	493f9c1e 	bne	r9,r4,1000e29c <__alt_data_end+0xf800e29c>
1000e42c:	2807883a 	mov	r3,r5
1000e430:	3023883a 	mov	r17,r6
1000e434:	4821883a 	mov	r16,r9
1000e438:	3825883a 	mov	r18,r7
1000e43c:	003e9106 	br	1000de84 <__alt_data_end+0xf800de84>
1000e440:	80001f1e 	bne	r16,zero,1000e4c0 <__subdf3+0x6c0>
1000e444:	1c48b03a 	or	r4,r3,r17
1000e448:	20005a26 	beq	r4,zero,1000e5b4 <__subdf3+0x7b4>
1000e44c:	0084303a 	nor	r2,zero,r2
1000e450:	1000561e 	bne	r2,zero,1000e5ac <__subdf3+0x7ac>
1000e454:	89a3883a 	add	r17,r17,r6
1000e458:	1945883a 	add	r2,r3,r5
1000e45c:	898d803a 	cmpltu	r6,r17,r6
1000e460:	3087883a 	add	r3,r6,r2
1000e464:	4821883a 	mov	r16,r9
1000e468:	003f0506 	br	1000e080 <__alt_data_end+0xf800e080>
1000e46c:	10002b1e 	bne	r2,zero,1000e51c <__subdf3+0x71c>
1000e470:	2984b03a 	or	r2,r5,r6
1000e474:	10008026 	beq	r2,zero,1000e678 <__subdf3+0x878>
1000e478:	2807883a 	mov	r3,r5
1000e47c:	3023883a 	mov	r17,r6
1000e480:	3825883a 	mov	r18,r7
1000e484:	0401ffc4 	movi	r16,2047
1000e488:	003e7e06 	br	1000de84 <__alt_data_end+0xf800de84>
1000e48c:	3809883a 	mov	r4,r7
1000e490:	0011883a 	mov	r8,zero
1000e494:	0005883a 	mov	r2,zero
1000e498:	003ee306 	br	1000e028 <__alt_data_end+0xf800e028>
1000e49c:	1c62b03a 	or	r17,r3,r17
1000e4a0:	8822c03a 	cmpne	r17,r17,zero
1000e4a4:	0005883a 	mov	r2,zero
1000e4a8:	003f8906 	br	1000e2d0 <__alt_data_end+0xf800e2d0>
1000e4ac:	3809883a 	mov	r4,r7
1000e4b0:	4821883a 	mov	r16,r9
1000e4b4:	0011883a 	mov	r8,zero
1000e4b8:	0005883a 	mov	r2,zero
1000e4bc:	003eda06 	br	1000e028 <__alt_data_end+0xf800e028>
1000e4c0:	0101ffc4 	movi	r4,2047
1000e4c4:	49003b26 	beq	r9,r4,1000e5b4 <__subdf3+0x7b4>
1000e4c8:	0085c83a 	sub	r2,zero,r2
1000e4cc:	18c02034 	orhi	r3,r3,128
1000e4d0:	01000e04 	movi	r4,56
1000e4d4:	20806e16 	blt	r4,r2,1000e690 <__subdf3+0x890>
1000e4d8:	010007c4 	movi	r4,31
1000e4dc:	20807716 	blt	r4,r2,1000e6bc <__subdf3+0x8bc>
1000e4e0:	01000804 	movi	r4,32
1000e4e4:	2089c83a 	sub	r4,r4,r2
1000e4e8:	1914983a 	sll	r10,r3,r4
1000e4ec:	8890d83a 	srl	r8,r17,r2
1000e4f0:	8908983a 	sll	r4,r17,r4
1000e4f4:	1884d83a 	srl	r2,r3,r2
1000e4f8:	5222b03a 	or	r17,r10,r8
1000e4fc:	2006c03a 	cmpne	r3,r4,zero
1000e500:	88e2b03a 	or	r17,r17,r3
1000e504:	89a3883a 	add	r17,r17,r6
1000e508:	1145883a 	add	r2,r2,r5
1000e50c:	898d803a 	cmpltu	r6,r17,r6
1000e510:	3087883a 	add	r3,r6,r2
1000e514:	4821883a 	mov	r16,r9
1000e518:	003ed906 	br	1000e080 <__alt_data_end+0xf800e080>
1000e51c:	2984b03a 	or	r2,r5,r6
1000e520:	10004226 	beq	r2,zero,1000e62c <__subdf3+0x82c>
1000e524:	1808d0fa 	srli	r4,r3,3
1000e528:	8822d0fa 	srli	r17,r17,3
1000e52c:	1806977a 	slli	r3,r3,29
1000e530:	2080022c 	andhi	r2,r4,8
1000e534:	1c62b03a 	or	r17,r3,r17
1000e538:	10000826 	beq	r2,zero,1000e55c <__subdf3+0x75c>
1000e53c:	2812d0fa 	srli	r9,r5,3
1000e540:	4880022c 	andhi	r2,r9,8
1000e544:	1000051e 	bne	r2,zero,1000e55c <__subdf3+0x75c>
1000e548:	300cd0fa 	srli	r6,r6,3
1000e54c:	2804977a 	slli	r2,r5,29
1000e550:	4809883a 	mov	r4,r9
1000e554:	3825883a 	mov	r18,r7
1000e558:	11a2b03a 	or	r17,r2,r6
1000e55c:	8806d77a 	srli	r3,r17,29
1000e560:	200890fa 	slli	r4,r4,3
1000e564:	882290fa 	slli	r17,r17,3
1000e568:	0401ffc4 	movi	r16,2047
1000e56c:	1906b03a 	or	r3,r3,r4
1000e570:	003e4406 	br	1000de84 <__alt_data_end+0xf800de84>
1000e574:	2984b03a 	or	r2,r5,r6
1000e578:	103e4226 	beq	r2,zero,1000de84 <__alt_data_end+0xf800de84>
1000e57c:	8989c83a 	sub	r4,r17,r6
1000e580:	8911803a 	cmpltu	r8,r17,r4
1000e584:	1945c83a 	sub	r2,r3,r5
1000e588:	1205c83a 	sub	r2,r2,r8
1000e58c:	1200202c 	andhi	r8,r2,128
1000e590:	403e9a26 	beq	r8,zero,1000dffc <__alt_data_end+0xf800dffc>
1000e594:	3463c83a 	sub	r17,r6,r17
1000e598:	28c5c83a 	sub	r2,r5,r3
1000e59c:	344d803a 	cmpltu	r6,r6,r17
1000e5a0:	1187c83a 	sub	r3,r2,r6
1000e5a4:	3825883a 	mov	r18,r7
1000e5a8:	003e3606 	br	1000de84 <__alt_data_end+0xf800de84>
1000e5ac:	0101ffc4 	movi	r4,2047
1000e5b0:	493fc71e 	bne	r9,r4,1000e4d0 <__alt_data_end+0xf800e4d0>
1000e5b4:	2807883a 	mov	r3,r5
1000e5b8:	3023883a 	mov	r17,r6
1000e5bc:	4821883a 	mov	r16,r9
1000e5c0:	003e3006 	br	1000de84 <__alt_data_end+0xf800de84>
1000e5c4:	10003626 	beq	r2,zero,1000e6a0 <__subdf3+0x8a0>
1000e5c8:	2984b03a 	or	r2,r5,r6
1000e5cc:	10001726 	beq	r2,zero,1000e62c <__subdf3+0x82c>
1000e5d0:	1808d0fa 	srli	r4,r3,3
1000e5d4:	8822d0fa 	srli	r17,r17,3
1000e5d8:	1806977a 	slli	r3,r3,29
1000e5dc:	2080022c 	andhi	r2,r4,8
1000e5e0:	1c62b03a 	or	r17,r3,r17
1000e5e4:	10000726 	beq	r2,zero,1000e604 <__subdf3+0x804>
1000e5e8:	2812d0fa 	srli	r9,r5,3
1000e5ec:	4880022c 	andhi	r2,r9,8
1000e5f0:	1000041e 	bne	r2,zero,1000e604 <__subdf3+0x804>
1000e5f4:	300cd0fa 	srli	r6,r6,3
1000e5f8:	2804977a 	slli	r2,r5,29
1000e5fc:	4809883a 	mov	r4,r9
1000e600:	11a2b03a 	or	r17,r2,r6
1000e604:	8806d77a 	srli	r3,r17,29
1000e608:	200890fa 	slli	r4,r4,3
1000e60c:	882290fa 	slli	r17,r17,3
1000e610:	3825883a 	mov	r18,r7
1000e614:	1906b03a 	or	r3,r3,r4
1000e618:	0401ffc4 	movi	r16,2047
1000e61c:	003e1906 	br	1000de84 <__alt_data_end+0xf800de84>
1000e620:	000b883a 	mov	r5,zero
1000e624:	0005883a 	mov	r2,zero
1000e628:	003e2e06 	br	1000dee4 <__alt_data_end+0xf800dee4>
1000e62c:	0401ffc4 	movi	r16,2047
1000e630:	003e1406 	br	1000de84 <__alt_data_end+0xf800de84>
1000e634:	0005883a 	mov	r2,zero
1000e638:	003f7506 	br	1000e410 <__alt_data_end+0xf800e410>
1000e63c:	0005883a 	mov	r2,zero
1000e640:	0009883a 	mov	r4,zero
1000e644:	003e7806 	br	1000e028 <__alt_data_end+0xf800e028>
1000e648:	123ff804 	addi	r8,r2,-32
1000e64c:	01000804 	movi	r4,32
1000e650:	1a10d83a 	srl	r8,r3,r8
1000e654:	11002526 	beq	r2,r4,1000e6ec <__subdf3+0x8ec>
1000e658:	01001004 	movi	r4,64
1000e65c:	2085c83a 	sub	r2,r4,r2
1000e660:	1884983a 	sll	r2,r3,r2
1000e664:	1444b03a 	or	r2,r2,r17
1000e668:	1004c03a 	cmpne	r2,r2,zero
1000e66c:	40a2b03a 	or	r17,r8,r2
1000e670:	0005883a 	mov	r2,zero
1000e674:	003f1606 	br	1000e2d0 <__alt_data_end+0xf800e2d0>
1000e678:	02000434 	movhi	r8,16
1000e67c:	0009883a 	mov	r4,zero
1000e680:	423fffc4 	addi	r8,r8,-1
1000e684:	00bfffc4 	movi	r2,-1
1000e688:	0401ffc4 	movi	r16,2047
1000e68c:	003e6606 	br	1000e028 <__alt_data_end+0xf800e028>
1000e690:	1c62b03a 	or	r17,r3,r17
1000e694:	8822c03a 	cmpne	r17,r17,zero
1000e698:	0005883a 	mov	r2,zero
1000e69c:	003f9906 	br	1000e504 <__alt_data_end+0xf800e504>
1000e6a0:	2807883a 	mov	r3,r5
1000e6a4:	3023883a 	mov	r17,r6
1000e6a8:	0401ffc4 	movi	r16,2047
1000e6ac:	003df506 	br	1000de84 <__alt_data_end+0xf800de84>
1000e6b0:	2807883a 	mov	r3,r5
1000e6b4:	3023883a 	mov	r17,r6
1000e6b8:	003df206 	br	1000de84 <__alt_data_end+0xf800de84>
1000e6bc:	123ff804 	addi	r8,r2,-32
1000e6c0:	01000804 	movi	r4,32
1000e6c4:	1a10d83a 	srl	r8,r3,r8
1000e6c8:	11000a26 	beq	r2,r4,1000e6f4 <__subdf3+0x8f4>
1000e6cc:	01001004 	movi	r4,64
1000e6d0:	2085c83a 	sub	r2,r4,r2
1000e6d4:	1884983a 	sll	r2,r3,r2
1000e6d8:	1444b03a 	or	r2,r2,r17
1000e6dc:	1004c03a 	cmpne	r2,r2,zero
1000e6e0:	40a2b03a 	or	r17,r8,r2
1000e6e4:	0005883a 	mov	r2,zero
1000e6e8:	003f8606 	br	1000e504 <__alt_data_end+0xf800e504>
1000e6ec:	0005883a 	mov	r2,zero
1000e6f0:	003fdc06 	br	1000e664 <__alt_data_end+0xf800e664>
1000e6f4:	0005883a 	mov	r2,zero
1000e6f8:	003ff706 	br	1000e6d8 <__alt_data_end+0xf800e6d8>

1000e6fc <__fixdfsi>:
1000e6fc:	280cd53a 	srli	r6,r5,20
1000e700:	00c00434 	movhi	r3,16
1000e704:	18ffffc4 	addi	r3,r3,-1
1000e708:	3181ffcc 	andi	r6,r6,2047
1000e70c:	01c0ff84 	movi	r7,1022
1000e710:	28c6703a 	and	r3,r5,r3
1000e714:	280ad7fa 	srli	r5,r5,31
1000e718:	3980120e 	bge	r7,r6,1000e764 <__fixdfsi+0x68>
1000e71c:	00810744 	movi	r2,1053
1000e720:	11800c16 	blt	r2,r6,1000e754 <__fixdfsi+0x58>
1000e724:	00810cc4 	movi	r2,1075
1000e728:	1185c83a 	sub	r2,r2,r6
1000e72c:	01c007c4 	movi	r7,31
1000e730:	18c00434 	orhi	r3,r3,16
1000e734:	38800d16 	blt	r7,r2,1000e76c <__fixdfsi+0x70>
1000e738:	31befb44 	addi	r6,r6,-1043
1000e73c:	2084d83a 	srl	r2,r4,r2
1000e740:	1986983a 	sll	r3,r3,r6
1000e744:	1884b03a 	or	r2,r3,r2
1000e748:	28000726 	beq	r5,zero,1000e768 <__fixdfsi+0x6c>
1000e74c:	0085c83a 	sub	r2,zero,r2
1000e750:	f800283a 	ret
1000e754:	00a00034 	movhi	r2,32768
1000e758:	10bfffc4 	addi	r2,r2,-1
1000e75c:	2885883a 	add	r2,r5,r2
1000e760:	f800283a 	ret
1000e764:	0005883a 	mov	r2,zero
1000e768:	f800283a 	ret
1000e76c:	008104c4 	movi	r2,1043
1000e770:	1185c83a 	sub	r2,r2,r6
1000e774:	1884d83a 	srl	r2,r3,r2
1000e778:	003ff306 	br	1000e748 <__alt_data_end+0xf800e748>

1000e77c <__floatsidf>:
1000e77c:	defffd04 	addi	sp,sp,-12
1000e780:	dfc00215 	stw	ra,8(sp)
1000e784:	dc400115 	stw	r17,4(sp)
1000e788:	dc000015 	stw	r16,0(sp)
1000e78c:	20002b26 	beq	r4,zero,1000e83c <__floatsidf+0xc0>
1000e790:	2023883a 	mov	r17,r4
1000e794:	2020d7fa 	srli	r16,r4,31
1000e798:	20002d16 	blt	r4,zero,1000e850 <__floatsidf+0xd4>
1000e79c:	8809883a 	mov	r4,r17
1000e7a0:	000e9000 	call	1000e900 <__clzsi2>
1000e7a4:	01410784 	movi	r5,1054
1000e7a8:	288bc83a 	sub	r5,r5,r2
1000e7ac:	01010cc4 	movi	r4,1075
1000e7b0:	2149c83a 	sub	r4,r4,r5
1000e7b4:	00c007c4 	movi	r3,31
1000e7b8:	1900160e 	bge	r3,r4,1000e814 <__floatsidf+0x98>
1000e7bc:	00c104c4 	movi	r3,1043
1000e7c0:	1947c83a 	sub	r3,r3,r5
1000e7c4:	88c6983a 	sll	r3,r17,r3
1000e7c8:	00800434 	movhi	r2,16
1000e7cc:	10bfffc4 	addi	r2,r2,-1
1000e7d0:	1886703a 	and	r3,r3,r2
1000e7d4:	2941ffcc 	andi	r5,r5,2047
1000e7d8:	800d883a 	mov	r6,r16
1000e7dc:	0005883a 	mov	r2,zero
1000e7e0:	280a953a 	slli	r5,r5,20
1000e7e4:	31803fcc 	andi	r6,r6,255
1000e7e8:	01000434 	movhi	r4,16
1000e7ec:	300c97fa 	slli	r6,r6,31
1000e7f0:	213fffc4 	addi	r4,r4,-1
1000e7f4:	1906703a 	and	r3,r3,r4
1000e7f8:	1946b03a 	or	r3,r3,r5
1000e7fc:	1986b03a 	or	r3,r3,r6
1000e800:	dfc00217 	ldw	ra,8(sp)
1000e804:	dc400117 	ldw	r17,4(sp)
1000e808:	dc000017 	ldw	r16,0(sp)
1000e80c:	dec00304 	addi	sp,sp,12
1000e810:	f800283a 	ret
1000e814:	00c002c4 	movi	r3,11
1000e818:	1887c83a 	sub	r3,r3,r2
1000e81c:	88c6d83a 	srl	r3,r17,r3
1000e820:	8904983a 	sll	r2,r17,r4
1000e824:	01000434 	movhi	r4,16
1000e828:	213fffc4 	addi	r4,r4,-1
1000e82c:	2941ffcc 	andi	r5,r5,2047
1000e830:	1906703a 	and	r3,r3,r4
1000e834:	800d883a 	mov	r6,r16
1000e838:	003fe906 	br	1000e7e0 <__alt_data_end+0xf800e7e0>
1000e83c:	000d883a 	mov	r6,zero
1000e840:	000b883a 	mov	r5,zero
1000e844:	0007883a 	mov	r3,zero
1000e848:	0005883a 	mov	r2,zero
1000e84c:	003fe406 	br	1000e7e0 <__alt_data_end+0xf800e7e0>
1000e850:	0123c83a 	sub	r17,zero,r4
1000e854:	003fd106 	br	1000e79c <__alt_data_end+0xf800e79c>

1000e858 <__floatunsidf>:
1000e858:	defffe04 	addi	sp,sp,-8
1000e85c:	dc000015 	stw	r16,0(sp)
1000e860:	dfc00115 	stw	ra,4(sp)
1000e864:	2021883a 	mov	r16,r4
1000e868:	20002226 	beq	r4,zero,1000e8f4 <__floatunsidf+0x9c>
1000e86c:	000e9000 	call	1000e900 <__clzsi2>
1000e870:	01010784 	movi	r4,1054
1000e874:	2089c83a 	sub	r4,r4,r2
1000e878:	01810cc4 	movi	r6,1075
1000e87c:	310dc83a 	sub	r6,r6,r4
1000e880:	00c007c4 	movi	r3,31
1000e884:	1980120e 	bge	r3,r6,1000e8d0 <__floatunsidf+0x78>
1000e888:	00c104c4 	movi	r3,1043
1000e88c:	1907c83a 	sub	r3,r3,r4
1000e890:	80ca983a 	sll	r5,r16,r3
1000e894:	00800434 	movhi	r2,16
1000e898:	10bfffc4 	addi	r2,r2,-1
1000e89c:	2101ffcc 	andi	r4,r4,2047
1000e8a0:	0021883a 	mov	r16,zero
1000e8a4:	288a703a 	and	r5,r5,r2
1000e8a8:	2008953a 	slli	r4,r4,20
1000e8ac:	00c00434 	movhi	r3,16
1000e8b0:	18ffffc4 	addi	r3,r3,-1
1000e8b4:	28c6703a 	and	r3,r5,r3
1000e8b8:	8005883a 	mov	r2,r16
1000e8bc:	1906b03a 	or	r3,r3,r4
1000e8c0:	dfc00117 	ldw	ra,4(sp)
1000e8c4:	dc000017 	ldw	r16,0(sp)
1000e8c8:	dec00204 	addi	sp,sp,8
1000e8cc:	f800283a 	ret
1000e8d0:	00c002c4 	movi	r3,11
1000e8d4:	188bc83a 	sub	r5,r3,r2
1000e8d8:	814ad83a 	srl	r5,r16,r5
1000e8dc:	00c00434 	movhi	r3,16
1000e8e0:	18ffffc4 	addi	r3,r3,-1
1000e8e4:	81a0983a 	sll	r16,r16,r6
1000e8e8:	2101ffcc 	andi	r4,r4,2047
1000e8ec:	28ca703a 	and	r5,r5,r3
1000e8f0:	003fed06 	br	1000e8a8 <__alt_data_end+0xf800e8a8>
1000e8f4:	0009883a 	mov	r4,zero
1000e8f8:	000b883a 	mov	r5,zero
1000e8fc:	003fea06 	br	1000e8a8 <__alt_data_end+0xf800e8a8>

1000e900 <__clzsi2>:
1000e900:	00bfffd4 	movui	r2,65535
1000e904:	11000536 	bltu	r2,r4,1000e91c <__clzsi2+0x1c>
1000e908:	00803fc4 	movi	r2,255
1000e90c:	11000f36 	bltu	r2,r4,1000e94c <__clzsi2+0x4c>
1000e910:	00800804 	movi	r2,32
1000e914:	0007883a 	mov	r3,zero
1000e918:	00000506 	br	1000e930 <__clzsi2+0x30>
1000e91c:	00804034 	movhi	r2,256
1000e920:	10bfffc4 	addi	r2,r2,-1
1000e924:	11000c2e 	bgeu	r2,r4,1000e958 <__clzsi2+0x58>
1000e928:	00800204 	movi	r2,8
1000e92c:	00c00604 	movi	r3,24
1000e930:	20c8d83a 	srl	r4,r4,r3
1000e934:	00c40074 	movhi	r3,4097
1000e938:	18c6cd04 	addi	r3,r3,6964
1000e93c:	1909883a 	add	r4,r3,r4
1000e940:	20c00003 	ldbu	r3,0(r4)
1000e944:	10c5c83a 	sub	r2,r2,r3
1000e948:	f800283a 	ret
1000e94c:	00800604 	movi	r2,24
1000e950:	00c00204 	movi	r3,8
1000e954:	003ff606 	br	1000e930 <__alt_data_end+0xf800e930>
1000e958:	00800404 	movi	r2,16
1000e95c:	1007883a 	mov	r3,r2
1000e960:	003ff306 	br	1000e930 <__alt_data_end+0xf800e930>

1000e964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e964:	defffe04 	addi	sp,sp,-8
1000e968:	dfc00115 	stw	ra,4(sp)
1000e96c:	df000015 	stw	fp,0(sp)
1000e970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e974:	00840074 	movhi	r2,4097
1000e978:	108e1004 	addi	r2,r2,14400
1000e97c:	10800017 	ldw	r2,0(r2)
1000e980:	10000526 	beq	r2,zero,1000e998 <alt_get_errno+0x34>
1000e984:	00840074 	movhi	r2,4097
1000e988:	108e1004 	addi	r2,r2,14400
1000e98c:	10800017 	ldw	r2,0(r2)
1000e990:	103ee83a 	callr	r2
1000e994:	00000206 	br	1000e9a0 <alt_get_errno+0x3c>
1000e998:	00840074 	movhi	r2,4097
1000e99c:	10951604 	addi	r2,r2,21592
}
1000e9a0:	e037883a 	mov	sp,fp
1000e9a4:	dfc00117 	ldw	ra,4(sp)
1000e9a8:	df000017 	ldw	fp,0(sp)
1000e9ac:	dec00204 	addi	sp,sp,8
1000e9b0:	f800283a 	ret

1000e9b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000e9b4:	defffb04 	addi	sp,sp,-20
1000e9b8:	dfc00415 	stw	ra,16(sp)
1000e9bc:	df000315 	stw	fp,12(sp)
1000e9c0:	df000304 	addi	fp,sp,12
1000e9c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000e9c8:	e0bfff17 	ldw	r2,-4(fp)
1000e9cc:	10000816 	blt	r2,zero,1000e9f0 <close+0x3c>
1000e9d0:	01400304 	movi	r5,12
1000e9d4:	e13fff17 	ldw	r4,-4(fp)
1000e9d8:	00016040 	call	10001604 <__mulsi3>
1000e9dc:	1007883a 	mov	r3,r2
1000e9e0:	00840074 	movhi	r2,4097
1000e9e4:	10898d04 	addi	r2,r2,9780
1000e9e8:	1885883a 	add	r2,r3,r2
1000e9ec:	00000106 	br	1000e9f4 <close+0x40>
1000e9f0:	0005883a 	mov	r2,zero
1000e9f4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000e9f8:	e0bffd17 	ldw	r2,-12(fp)
1000e9fc:	10001926 	beq	r2,zero,1000ea64 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000ea00:	e0bffd17 	ldw	r2,-12(fp)
1000ea04:	10800017 	ldw	r2,0(r2)
1000ea08:	10800417 	ldw	r2,16(r2)
1000ea0c:	10000626 	beq	r2,zero,1000ea28 <close+0x74>
1000ea10:	e0bffd17 	ldw	r2,-12(fp)
1000ea14:	10800017 	ldw	r2,0(r2)
1000ea18:	10800417 	ldw	r2,16(r2)
1000ea1c:	e13ffd17 	ldw	r4,-12(fp)
1000ea20:	103ee83a 	callr	r2
1000ea24:	00000106 	br	1000ea2c <close+0x78>
1000ea28:	0005883a 	mov	r2,zero
1000ea2c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000ea30:	e13fff17 	ldw	r4,-4(fp)
1000ea34:	000f0ec0 	call	1000f0ec <alt_release_fd>
    if (rval < 0)
1000ea38:	e0bffe17 	ldw	r2,-8(fp)
1000ea3c:	1000070e 	bge	r2,zero,1000ea5c <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000ea40:	000e9640 	call	1000e964 <alt_get_errno>
1000ea44:	1007883a 	mov	r3,r2
1000ea48:	e0bffe17 	ldw	r2,-8(fp)
1000ea4c:	0085c83a 	sub	r2,zero,r2
1000ea50:	18800015 	stw	r2,0(r3)
      return -1;
1000ea54:	00bfffc4 	movi	r2,-1
1000ea58:	00000706 	br	1000ea78 <close+0xc4>
    }
    return 0;
1000ea5c:	0005883a 	mov	r2,zero
1000ea60:	00000506 	br	1000ea78 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ea64:	000e9640 	call	1000e964 <alt_get_errno>
1000ea68:	1007883a 	mov	r3,r2
1000ea6c:	00801444 	movi	r2,81
1000ea70:	18800015 	stw	r2,0(r3)
    return -1;
1000ea74:	00bfffc4 	movi	r2,-1
  }
}
1000ea78:	e037883a 	mov	sp,fp
1000ea7c:	dfc00117 	ldw	ra,4(sp)
1000ea80:	df000017 	ldw	fp,0(sp)
1000ea84:	dec00204 	addi	sp,sp,8
1000ea88:	f800283a 	ret

1000ea8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000ea8c:	defffc04 	addi	sp,sp,-16
1000ea90:	df000315 	stw	fp,12(sp)
1000ea94:	df000304 	addi	fp,sp,12
1000ea98:	e13ffd15 	stw	r4,-12(fp)
1000ea9c:	e17ffe15 	stw	r5,-8(fp)
1000eaa0:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000eaa4:	e0bfff17 	ldw	r2,-4(fp)
}
1000eaa8:	e037883a 	mov	sp,fp
1000eaac:	df000017 	ldw	fp,0(sp)
1000eab0:	dec00104 	addi	sp,sp,4
1000eab4:	f800283a 	ret

1000eab8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000eab8:	defffe04 	addi	sp,sp,-8
1000eabc:	dfc00115 	stw	ra,4(sp)
1000eac0:	df000015 	stw	fp,0(sp)
1000eac4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eac8:	00840074 	movhi	r2,4097
1000eacc:	108e1004 	addi	r2,r2,14400
1000ead0:	10800017 	ldw	r2,0(r2)
1000ead4:	10000526 	beq	r2,zero,1000eaec <alt_get_errno+0x34>
1000ead8:	00840074 	movhi	r2,4097
1000eadc:	108e1004 	addi	r2,r2,14400
1000eae0:	10800017 	ldw	r2,0(r2)
1000eae4:	103ee83a 	callr	r2
1000eae8:	00000206 	br	1000eaf4 <alt_get_errno+0x3c>
1000eaec:	00840074 	movhi	r2,4097
1000eaf0:	10951604 	addi	r2,r2,21592
}
1000eaf4:	e037883a 	mov	sp,fp
1000eaf8:	dfc00117 	ldw	ra,4(sp)
1000eafc:	df000017 	ldw	fp,0(sp)
1000eb00:	dec00204 	addi	sp,sp,8
1000eb04:	f800283a 	ret

1000eb08 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000eb08:	defffb04 	addi	sp,sp,-20
1000eb0c:	dfc00415 	stw	ra,16(sp)
1000eb10:	df000315 	stw	fp,12(sp)
1000eb14:	df000304 	addi	fp,sp,12
1000eb18:	e13ffe15 	stw	r4,-8(fp)
1000eb1c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000eb20:	e0bffe17 	ldw	r2,-8(fp)
1000eb24:	10000816 	blt	r2,zero,1000eb48 <fstat+0x40>
1000eb28:	01400304 	movi	r5,12
1000eb2c:	e13ffe17 	ldw	r4,-8(fp)
1000eb30:	00016040 	call	10001604 <__mulsi3>
1000eb34:	1007883a 	mov	r3,r2
1000eb38:	00840074 	movhi	r2,4097
1000eb3c:	10898d04 	addi	r2,r2,9780
1000eb40:	1885883a 	add	r2,r3,r2
1000eb44:	00000106 	br	1000eb4c <fstat+0x44>
1000eb48:	0005883a 	mov	r2,zero
1000eb4c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000eb50:	e0bffd17 	ldw	r2,-12(fp)
1000eb54:	10001026 	beq	r2,zero,1000eb98 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000eb58:	e0bffd17 	ldw	r2,-12(fp)
1000eb5c:	10800017 	ldw	r2,0(r2)
1000eb60:	10800817 	ldw	r2,32(r2)
1000eb64:	10000726 	beq	r2,zero,1000eb84 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000eb68:	e0bffd17 	ldw	r2,-12(fp)
1000eb6c:	10800017 	ldw	r2,0(r2)
1000eb70:	10800817 	ldw	r2,32(r2)
1000eb74:	e17fff17 	ldw	r5,-4(fp)
1000eb78:	e13ffd17 	ldw	r4,-12(fp)
1000eb7c:	103ee83a 	callr	r2
1000eb80:	00000a06 	br	1000ebac <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000eb84:	e0bfff17 	ldw	r2,-4(fp)
1000eb88:	00c80004 	movi	r3,8192
1000eb8c:	10c00115 	stw	r3,4(r2)
      return 0;
1000eb90:	0005883a 	mov	r2,zero
1000eb94:	00000506 	br	1000ebac <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000eb98:	000eab80 	call	1000eab8 <alt_get_errno>
1000eb9c:	1007883a 	mov	r3,r2
1000eba0:	00801444 	movi	r2,81
1000eba4:	18800015 	stw	r2,0(r3)
    return -1;
1000eba8:	00bfffc4 	movi	r2,-1
  }
}
1000ebac:	e037883a 	mov	sp,fp
1000ebb0:	dfc00117 	ldw	ra,4(sp)
1000ebb4:	df000017 	ldw	fp,0(sp)
1000ebb8:	dec00204 	addi	sp,sp,8
1000ebbc:	f800283a 	ret

1000ebc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ebc0:	defffe04 	addi	sp,sp,-8
1000ebc4:	dfc00115 	stw	ra,4(sp)
1000ebc8:	df000015 	stw	fp,0(sp)
1000ebcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ebd0:	00840074 	movhi	r2,4097
1000ebd4:	108e1004 	addi	r2,r2,14400
1000ebd8:	10800017 	ldw	r2,0(r2)
1000ebdc:	10000526 	beq	r2,zero,1000ebf4 <alt_get_errno+0x34>
1000ebe0:	00840074 	movhi	r2,4097
1000ebe4:	108e1004 	addi	r2,r2,14400
1000ebe8:	10800017 	ldw	r2,0(r2)
1000ebec:	103ee83a 	callr	r2
1000ebf0:	00000206 	br	1000ebfc <alt_get_errno+0x3c>
1000ebf4:	00840074 	movhi	r2,4097
1000ebf8:	10951604 	addi	r2,r2,21592
}
1000ebfc:	e037883a 	mov	sp,fp
1000ec00:	dfc00117 	ldw	ra,4(sp)
1000ec04:	df000017 	ldw	fp,0(sp)
1000ec08:	dec00204 	addi	sp,sp,8
1000ec0c:	f800283a 	ret

1000ec10 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000ec10:	deffed04 	addi	sp,sp,-76
1000ec14:	dfc01215 	stw	ra,72(sp)
1000ec18:	df001115 	stw	fp,68(sp)
1000ec1c:	df001104 	addi	fp,sp,68
1000ec20:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ec24:	e0bfff17 	ldw	r2,-4(fp)
1000ec28:	10000816 	blt	r2,zero,1000ec4c <isatty+0x3c>
1000ec2c:	01400304 	movi	r5,12
1000ec30:	e13fff17 	ldw	r4,-4(fp)
1000ec34:	00016040 	call	10001604 <__mulsi3>
1000ec38:	1007883a 	mov	r3,r2
1000ec3c:	00840074 	movhi	r2,4097
1000ec40:	10898d04 	addi	r2,r2,9780
1000ec44:	1885883a 	add	r2,r3,r2
1000ec48:	00000106 	br	1000ec50 <isatty+0x40>
1000ec4c:	0005883a 	mov	r2,zero
1000ec50:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000ec54:	e0bfef17 	ldw	r2,-68(fp)
1000ec58:	10000e26 	beq	r2,zero,1000ec94 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000ec5c:	e0bfef17 	ldw	r2,-68(fp)
1000ec60:	10800017 	ldw	r2,0(r2)
1000ec64:	10800817 	ldw	r2,32(r2)
1000ec68:	1000021e 	bne	r2,zero,1000ec74 <isatty+0x64>
    {
      return 1;
1000ec6c:	00800044 	movi	r2,1
1000ec70:	00000d06 	br	1000eca8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000ec74:	e0bff004 	addi	r2,fp,-64
1000ec78:	100b883a 	mov	r5,r2
1000ec7c:	e13fff17 	ldw	r4,-4(fp)
1000ec80:	000eb080 	call	1000eb08 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000ec84:	e0bff117 	ldw	r2,-60(fp)
1000ec88:	10880020 	cmpeqi	r2,r2,8192
1000ec8c:	10803fcc 	andi	r2,r2,255
1000ec90:	00000506 	br	1000eca8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ec94:	000ebc00 	call	1000ebc0 <alt_get_errno>
1000ec98:	1007883a 	mov	r3,r2
1000ec9c:	00801444 	movi	r2,81
1000eca0:	18800015 	stw	r2,0(r3)
    return 0;
1000eca4:	0005883a 	mov	r2,zero
  }
}
1000eca8:	e037883a 	mov	sp,fp
1000ecac:	dfc00117 	ldw	ra,4(sp)
1000ecb0:	df000017 	ldw	fp,0(sp)
1000ecb4:	dec00204 	addi	sp,sp,8
1000ecb8:	f800283a 	ret

1000ecbc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000ecbc:	defffc04 	addi	sp,sp,-16
1000ecc0:	df000315 	stw	fp,12(sp)
1000ecc4:	df000304 	addi	fp,sp,12
1000ecc8:	e13ffd15 	stw	r4,-12(fp)
1000eccc:	e17ffe15 	stw	r5,-8(fp)
1000ecd0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000ecd4:	e0fffe17 	ldw	r3,-8(fp)
1000ecd8:	e0bffd17 	ldw	r2,-12(fp)
1000ecdc:	18800c26 	beq	r3,r2,1000ed10 <alt_load_section+0x54>
  {
    while( to != end )
1000ece0:	00000806 	br	1000ed04 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000ece4:	e0bffe17 	ldw	r2,-8(fp)
1000ece8:	10c00104 	addi	r3,r2,4
1000ecec:	e0fffe15 	stw	r3,-8(fp)
1000ecf0:	e0fffd17 	ldw	r3,-12(fp)
1000ecf4:	19000104 	addi	r4,r3,4
1000ecf8:	e13ffd15 	stw	r4,-12(fp)
1000ecfc:	18c00017 	ldw	r3,0(r3)
1000ed00:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000ed04:	e0fffe17 	ldw	r3,-8(fp)
1000ed08:	e0bfff17 	ldw	r2,-4(fp)
1000ed0c:	18bff51e 	bne	r3,r2,1000ece4 <__alt_data_end+0xf800ece4>
    {
      *to++ = *from++;
    }
  }
}
1000ed10:	0001883a 	nop
1000ed14:	e037883a 	mov	sp,fp
1000ed18:	df000017 	ldw	fp,0(sp)
1000ed1c:	dec00104 	addi	sp,sp,4
1000ed20:	f800283a 	ret

1000ed24 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000ed24:	defffe04 	addi	sp,sp,-8
1000ed28:	dfc00115 	stw	ra,4(sp)
1000ed2c:	df000015 	stw	fp,0(sp)
1000ed30:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000ed34:	01840074 	movhi	r6,4097
1000ed38:	318e1504 	addi	r6,r6,14420
1000ed3c:	01440074 	movhi	r5,4097
1000ed40:	29471a04 	addi	r5,r5,7272
1000ed44:	01040074 	movhi	r4,4097
1000ed48:	210e1504 	addi	r4,r4,14420
1000ed4c:	000ecbc0 	call	1000ecbc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000ed50:	01840034 	movhi	r6,4096
1000ed54:	31808c04 	addi	r6,r6,560
1000ed58:	01440034 	movhi	r5,4096
1000ed5c:	29400804 	addi	r5,r5,32
1000ed60:	01040034 	movhi	r4,4096
1000ed64:	21000804 	addi	r4,r4,32
1000ed68:	000ecbc0 	call	1000ecbc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000ed6c:	01840074 	movhi	r6,4097
1000ed70:	31871a04 	addi	r6,r6,7272
1000ed74:	01440074 	movhi	r5,4097
1000ed78:	29444704 	addi	r5,r5,4380
1000ed7c:	01040074 	movhi	r4,4097
1000ed80:	21044704 	addi	r4,r4,4380
1000ed84:	000ecbc0 	call	1000ecbc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000ed88:	000ffe40 	call	1000ffe4 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000ed8c:	00101b80 	call	100101b8 <alt_icache_flush_all>
}
1000ed90:	0001883a 	nop
1000ed94:	e037883a 	mov	sp,fp
1000ed98:	dfc00117 	ldw	ra,4(sp)
1000ed9c:	df000017 	ldw	fp,0(sp)
1000eda0:	dec00204 	addi	sp,sp,8
1000eda4:	f800283a 	ret

1000eda8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000eda8:	defffe04 	addi	sp,sp,-8
1000edac:	dfc00115 	stw	ra,4(sp)
1000edb0:	df000015 	stw	fp,0(sp)
1000edb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000edb8:	00840074 	movhi	r2,4097
1000edbc:	108e1004 	addi	r2,r2,14400
1000edc0:	10800017 	ldw	r2,0(r2)
1000edc4:	10000526 	beq	r2,zero,1000eddc <alt_get_errno+0x34>
1000edc8:	00840074 	movhi	r2,4097
1000edcc:	108e1004 	addi	r2,r2,14400
1000edd0:	10800017 	ldw	r2,0(r2)
1000edd4:	103ee83a 	callr	r2
1000edd8:	00000206 	br	1000ede4 <alt_get_errno+0x3c>
1000eddc:	00840074 	movhi	r2,4097
1000ede0:	10951604 	addi	r2,r2,21592
}
1000ede4:	e037883a 	mov	sp,fp
1000ede8:	dfc00117 	ldw	ra,4(sp)
1000edec:	df000017 	ldw	fp,0(sp)
1000edf0:	dec00204 	addi	sp,sp,8
1000edf4:	f800283a 	ret

1000edf8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000edf8:	defff904 	addi	sp,sp,-28
1000edfc:	dfc00615 	stw	ra,24(sp)
1000ee00:	df000515 	stw	fp,20(sp)
1000ee04:	df000504 	addi	fp,sp,20
1000ee08:	e13ffd15 	stw	r4,-12(fp)
1000ee0c:	e17ffe15 	stw	r5,-8(fp)
1000ee10:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000ee14:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ee18:	e0bffd17 	ldw	r2,-12(fp)
1000ee1c:	10000816 	blt	r2,zero,1000ee40 <lseek+0x48>
1000ee20:	01400304 	movi	r5,12
1000ee24:	e13ffd17 	ldw	r4,-12(fp)
1000ee28:	00016040 	call	10001604 <__mulsi3>
1000ee2c:	1007883a 	mov	r3,r2
1000ee30:	00840074 	movhi	r2,4097
1000ee34:	10898d04 	addi	r2,r2,9780
1000ee38:	1885883a 	add	r2,r3,r2
1000ee3c:	00000106 	br	1000ee44 <lseek+0x4c>
1000ee40:	0005883a 	mov	r2,zero
1000ee44:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000ee48:	e0bffc17 	ldw	r2,-16(fp)
1000ee4c:	10001026 	beq	r2,zero,1000ee90 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000ee50:	e0bffc17 	ldw	r2,-16(fp)
1000ee54:	10800017 	ldw	r2,0(r2)
1000ee58:	10800717 	ldw	r2,28(r2)
1000ee5c:	10000926 	beq	r2,zero,1000ee84 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000ee60:	e0bffc17 	ldw	r2,-16(fp)
1000ee64:	10800017 	ldw	r2,0(r2)
1000ee68:	10800717 	ldw	r2,28(r2)
1000ee6c:	e1bfff17 	ldw	r6,-4(fp)
1000ee70:	e17ffe17 	ldw	r5,-8(fp)
1000ee74:	e13ffc17 	ldw	r4,-16(fp)
1000ee78:	103ee83a 	callr	r2
1000ee7c:	e0bffb15 	stw	r2,-20(fp)
1000ee80:	00000506 	br	1000ee98 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000ee84:	00bfde84 	movi	r2,-134
1000ee88:	e0bffb15 	stw	r2,-20(fp)
1000ee8c:	00000206 	br	1000ee98 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000ee90:	00bfebc4 	movi	r2,-81
1000ee94:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000ee98:	e0bffb17 	ldw	r2,-20(fp)
1000ee9c:	1000070e 	bge	r2,zero,1000eebc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000eea0:	000eda80 	call	1000eda8 <alt_get_errno>
1000eea4:	1007883a 	mov	r3,r2
1000eea8:	e0bffb17 	ldw	r2,-20(fp)
1000eeac:	0085c83a 	sub	r2,zero,r2
1000eeb0:	18800015 	stw	r2,0(r3)
    rc = -1;
1000eeb4:	00bfffc4 	movi	r2,-1
1000eeb8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000eebc:	e0bffb17 	ldw	r2,-20(fp)
}
1000eec0:	e037883a 	mov	sp,fp
1000eec4:	dfc00117 	ldw	ra,4(sp)
1000eec8:	df000017 	ldw	fp,0(sp)
1000eecc:	dec00204 	addi	sp,sp,8
1000eed0:	f800283a 	ret

1000eed4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000eed4:	defffd04 	addi	sp,sp,-12
1000eed8:	dfc00215 	stw	ra,8(sp)
1000eedc:	df000115 	stw	fp,4(sp)
1000eee0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000eee4:	0009883a 	mov	r4,zero
1000eee8:	000f3a80 	call	1000f3a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000eeec:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000eef0:	000f3e00 	call	1000f3e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000eef4:	01840074 	movhi	r6,4097
1000eef8:	31871004 	addi	r6,r6,7232
1000eefc:	01440074 	movhi	r5,4097
1000ef00:	29471004 	addi	r5,r5,7232
1000ef04:	01040074 	movhi	r4,4097
1000ef08:	21071004 	addi	r4,r4,7232
1000ef0c:	001058c0 	call	1001058c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000ef10:	00100f80 	call	100100f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000ef14:	01040074 	movhi	r4,4097
1000ef18:	21005604 	addi	r4,r4,344
1000ef1c:	0010d880 	call	10010d88 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000ef20:	d0a71217 	ldw	r2,-25528(gp)
1000ef24:	d0e71317 	ldw	r3,-25524(gp)
1000ef28:	d1271417 	ldw	r4,-25520(gp)
1000ef2c:	200d883a 	mov	r6,r4
1000ef30:	180b883a 	mov	r5,r3
1000ef34:	1009883a 	mov	r4,r2
1000ef38:	000120c0 	call	1000120c <main>
1000ef3c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000ef40:	01000044 	movi	r4,1
1000ef44:	000e9b40 	call	1000e9b4 <close>
  exit (result);
1000ef48:	e13fff17 	ldw	r4,-4(fp)
1000ef4c:	0010d9c0 	call	10010d9c <exit>

1000ef50 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000ef50:	defffe04 	addi	sp,sp,-8
1000ef54:	df000115 	stw	fp,4(sp)
1000ef58:	df000104 	addi	fp,sp,4
1000ef5c:	e13fff15 	stw	r4,-4(fp)
}
1000ef60:	0001883a 	nop
1000ef64:	e037883a 	mov	sp,fp
1000ef68:	df000017 	ldw	fp,0(sp)
1000ef6c:	dec00104 	addi	sp,sp,4
1000ef70:	f800283a 	ret

1000ef74 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000ef74:	defffe04 	addi	sp,sp,-8
1000ef78:	df000115 	stw	fp,4(sp)
1000ef7c:	df000104 	addi	fp,sp,4
1000ef80:	e13fff15 	stw	r4,-4(fp)
}
1000ef84:	0001883a 	nop
1000ef88:	e037883a 	mov	sp,fp
1000ef8c:	df000017 	ldw	fp,0(sp)
1000ef90:	dec00104 	addi	sp,sp,4
1000ef94:	f800283a 	ret

1000ef98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ef98:	defffe04 	addi	sp,sp,-8
1000ef9c:	dfc00115 	stw	ra,4(sp)
1000efa0:	df000015 	stw	fp,0(sp)
1000efa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000efa8:	00840074 	movhi	r2,4097
1000efac:	108e1004 	addi	r2,r2,14400
1000efb0:	10800017 	ldw	r2,0(r2)
1000efb4:	10000526 	beq	r2,zero,1000efcc <alt_get_errno+0x34>
1000efb8:	00840074 	movhi	r2,4097
1000efbc:	108e1004 	addi	r2,r2,14400
1000efc0:	10800017 	ldw	r2,0(r2)
1000efc4:	103ee83a 	callr	r2
1000efc8:	00000206 	br	1000efd4 <alt_get_errno+0x3c>
1000efcc:	00840074 	movhi	r2,4097
1000efd0:	10951604 	addi	r2,r2,21592
}
1000efd4:	e037883a 	mov	sp,fp
1000efd8:	dfc00117 	ldw	ra,4(sp)
1000efdc:	df000017 	ldw	fp,0(sp)
1000efe0:	dec00204 	addi	sp,sp,8
1000efe4:	f800283a 	ret

1000efe8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000efe8:	defff904 	addi	sp,sp,-28
1000efec:	dfc00615 	stw	ra,24(sp)
1000eff0:	df000515 	stw	fp,20(sp)
1000eff4:	df000504 	addi	fp,sp,20
1000eff8:	e13ffd15 	stw	r4,-12(fp)
1000effc:	e17ffe15 	stw	r5,-8(fp)
1000f000:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f004:	e0bffd17 	ldw	r2,-12(fp)
1000f008:	10000816 	blt	r2,zero,1000f02c <read+0x44>
1000f00c:	01400304 	movi	r5,12
1000f010:	e13ffd17 	ldw	r4,-12(fp)
1000f014:	00016040 	call	10001604 <__mulsi3>
1000f018:	1007883a 	mov	r3,r2
1000f01c:	00840074 	movhi	r2,4097
1000f020:	10898d04 	addi	r2,r2,9780
1000f024:	1885883a 	add	r2,r3,r2
1000f028:	00000106 	br	1000f030 <read+0x48>
1000f02c:	0005883a 	mov	r2,zero
1000f030:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f034:	e0bffb17 	ldw	r2,-20(fp)
1000f038:	10002226 	beq	r2,zero,1000f0c4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f03c:	e0bffb17 	ldw	r2,-20(fp)
1000f040:	10800217 	ldw	r2,8(r2)
1000f044:	108000cc 	andi	r2,r2,3
1000f048:	10800060 	cmpeqi	r2,r2,1
1000f04c:	1000181e 	bne	r2,zero,1000f0b0 <read+0xc8>
        (fd->dev->read))
1000f050:	e0bffb17 	ldw	r2,-20(fp)
1000f054:	10800017 	ldw	r2,0(r2)
1000f058:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f05c:	10001426 	beq	r2,zero,1000f0b0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f060:	e0bffb17 	ldw	r2,-20(fp)
1000f064:	10800017 	ldw	r2,0(r2)
1000f068:	10800517 	ldw	r2,20(r2)
1000f06c:	e0ffff17 	ldw	r3,-4(fp)
1000f070:	180d883a 	mov	r6,r3
1000f074:	e17ffe17 	ldw	r5,-8(fp)
1000f078:	e13ffb17 	ldw	r4,-20(fp)
1000f07c:	103ee83a 	callr	r2
1000f080:	e0bffc15 	stw	r2,-16(fp)
1000f084:	e0bffc17 	ldw	r2,-16(fp)
1000f088:	1000070e 	bge	r2,zero,1000f0a8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f08c:	000ef980 	call	1000ef98 <alt_get_errno>
1000f090:	1007883a 	mov	r3,r2
1000f094:	e0bffc17 	ldw	r2,-16(fp)
1000f098:	0085c83a 	sub	r2,zero,r2
1000f09c:	18800015 	stw	r2,0(r3)
          return -1;
1000f0a0:	00bfffc4 	movi	r2,-1
1000f0a4:	00000c06 	br	1000f0d8 <read+0xf0>
        }
        return rval;
1000f0a8:	e0bffc17 	ldw	r2,-16(fp)
1000f0ac:	00000a06 	br	1000f0d8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f0b0:	000ef980 	call	1000ef98 <alt_get_errno>
1000f0b4:	1007883a 	mov	r3,r2
1000f0b8:	00800344 	movi	r2,13
1000f0bc:	18800015 	stw	r2,0(r3)
1000f0c0:	00000406 	br	1000f0d4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f0c4:	000ef980 	call	1000ef98 <alt_get_errno>
1000f0c8:	1007883a 	mov	r3,r2
1000f0cc:	00801444 	movi	r2,81
1000f0d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f0d4:	00bfffc4 	movi	r2,-1
}
1000f0d8:	e037883a 	mov	sp,fp
1000f0dc:	dfc00117 	ldw	ra,4(sp)
1000f0e0:	df000017 	ldw	fp,0(sp)
1000f0e4:	dec00204 	addi	sp,sp,8
1000f0e8:	f800283a 	ret

1000f0ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f0ec:	defffc04 	addi	sp,sp,-16
1000f0f0:	dfc00315 	stw	ra,12(sp)
1000f0f4:	df000215 	stw	fp,8(sp)
1000f0f8:	dc000115 	stw	r16,4(sp)
1000f0fc:	df000204 	addi	fp,sp,8
1000f100:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f104:	e0bffe17 	ldw	r2,-8(fp)
1000f108:	108000d0 	cmplti	r2,r2,3
1000f10c:	1000111e 	bne	r2,zero,1000f154 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f110:	04040074 	movhi	r16,4097
1000f114:	84098d04 	addi	r16,r16,9780
1000f118:	e0bffe17 	ldw	r2,-8(fp)
1000f11c:	01400304 	movi	r5,12
1000f120:	1009883a 	mov	r4,r2
1000f124:	00016040 	call	10001604 <__mulsi3>
1000f128:	8085883a 	add	r2,r16,r2
1000f12c:	10800204 	addi	r2,r2,8
1000f130:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f134:	04040074 	movhi	r16,4097
1000f138:	84098d04 	addi	r16,r16,9780
1000f13c:	e0bffe17 	ldw	r2,-8(fp)
1000f140:	01400304 	movi	r5,12
1000f144:	1009883a 	mov	r4,r2
1000f148:	00016040 	call	10001604 <__mulsi3>
1000f14c:	8085883a 	add	r2,r16,r2
1000f150:	10000015 	stw	zero,0(r2)
  }
}
1000f154:	0001883a 	nop
1000f158:	e6ffff04 	addi	sp,fp,-4
1000f15c:	dfc00217 	ldw	ra,8(sp)
1000f160:	df000117 	ldw	fp,4(sp)
1000f164:	dc000017 	ldw	r16,0(sp)
1000f168:	dec00304 	addi	sp,sp,12
1000f16c:	f800283a 	ret

1000f170 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f170:	defff904 	addi	sp,sp,-28
1000f174:	df000615 	stw	fp,24(sp)
1000f178:	df000604 	addi	fp,sp,24
1000f17c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f180:	0005303a 	rdctl	r2,status
1000f184:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f188:	e0fffe17 	ldw	r3,-8(fp)
1000f18c:	00bfff84 	movi	r2,-2
1000f190:	1884703a 	and	r2,r3,r2
1000f194:	1001703a 	wrctl	status,r2
  
  return context;
1000f198:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f19c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f1a0:	d0a00c17 	ldw	r2,-32720(gp)
1000f1a4:	10c000c4 	addi	r3,r2,3
1000f1a8:	00bfff04 	movi	r2,-4
1000f1ac:	1884703a 	and	r2,r3,r2
1000f1b0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f1b4:	d0e00c17 	ldw	r3,-32720(gp)
1000f1b8:	e0bfff17 	ldw	r2,-4(fp)
1000f1bc:	1887883a 	add	r3,r3,r2
1000f1c0:	00860034 	movhi	r2,6144
1000f1c4:	10800004 	addi	r2,r2,0
1000f1c8:	10c0062e 	bgeu	r2,r3,1000f1e4 <sbrk+0x74>
1000f1cc:	e0bffb17 	ldw	r2,-20(fp)
1000f1d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f1d4:	e0bffa17 	ldw	r2,-24(fp)
1000f1d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f1dc:	00bfffc4 	movi	r2,-1
1000f1e0:	00000b06 	br	1000f210 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f1e4:	d0a00c17 	ldw	r2,-32720(gp)
1000f1e8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000f1ec:	d0e00c17 	ldw	r3,-32720(gp)
1000f1f0:	e0bfff17 	ldw	r2,-4(fp)
1000f1f4:	1885883a 	add	r2,r3,r2
1000f1f8:	d0a00c15 	stw	r2,-32720(gp)
1000f1fc:	e0bffb17 	ldw	r2,-20(fp)
1000f200:	e0bffc15 	stw	r2,-16(fp)
1000f204:	e0bffc17 	ldw	r2,-16(fp)
1000f208:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f20c:	e0bffd17 	ldw	r2,-12(fp)
} 
1000f210:	e037883a 	mov	sp,fp
1000f214:	df000017 	ldw	fp,0(sp)
1000f218:	dec00104 	addi	sp,sp,4
1000f21c:	f800283a 	ret

1000f220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f220:	defffe04 	addi	sp,sp,-8
1000f224:	dfc00115 	stw	ra,4(sp)
1000f228:	df000015 	stw	fp,0(sp)
1000f22c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f230:	00840074 	movhi	r2,4097
1000f234:	108e1004 	addi	r2,r2,14400
1000f238:	10800017 	ldw	r2,0(r2)
1000f23c:	10000526 	beq	r2,zero,1000f254 <alt_get_errno+0x34>
1000f240:	00840074 	movhi	r2,4097
1000f244:	108e1004 	addi	r2,r2,14400
1000f248:	10800017 	ldw	r2,0(r2)
1000f24c:	103ee83a 	callr	r2
1000f250:	00000206 	br	1000f25c <alt_get_errno+0x3c>
1000f254:	00840074 	movhi	r2,4097
1000f258:	10951604 	addi	r2,r2,21592
}
1000f25c:	e037883a 	mov	sp,fp
1000f260:	dfc00117 	ldw	ra,4(sp)
1000f264:	df000017 	ldw	fp,0(sp)
1000f268:	dec00204 	addi	sp,sp,8
1000f26c:	f800283a 	ret

1000f270 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f270:	defff904 	addi	sp,sp,-28
1000f274:	dfc00615 	stw	ra,24(sp)
1000f278:	df000515 	stw	fp,20(sp)
1000f27c:	df000504 	addi	fp,sp,20
1000f280:	e13ffd15 	stw	r4,-12(fp)
1000f284:	e17ffe15 	stw	r5,-8(fp)
1000f288:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f28c:	e0bffd17 	ldw	r2,-12(fp)
1000f290:	10000816 	blt	r2,zero,1000f2b4 <write+0x44>
1000f294:	01400304 	movi	r5,12
1000f298:	e13ffd17 	ldw	r4,-12(fp)
1000f29c:	00016040 	call	10001604 <__mulsi3>
1000f2a0:	1007883a 	mov	r3,r2
1000f2a4:	00840074 	movhi	r2,4097
1000f2a8:	10898d04 	addi	r2,r2,9780
1000f2ac:	1885883a 	add	r2,r3,r2
1000f2b0:	00000106 	br	1000f2b8 <write+0x48>
1000f2b4:	0005883a 	mov	r2,zero
1000f2b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f2bc:	e0bffb17 	ldw	r2,-20(fp)
1000f2c0:	10002126 	beq	r2,zero,1000f348 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f2c4:	e0bffb17 	ldw	r2,-20(fp)
1000f2c8:	10800217 	ldw	r2,8(r2)
1000f2cc:	108000cc 	andi	r2,r2,3
1000f2d0:	10001826 	beq	r2,zero,1000f334 <write+0xc4>
1000f2d4:	e0bffb17 	ldw	r2,-20(fp)
1000f2d8:	10800017 	ldw	r2,0(r2)
1000f2dc:	10800617 	ldw	r2,24(r2)
1000f2e0:	10001426 	beq	r2,zero,1000f334 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000f2e4:	e0bffb17 	ldw	r2,-20(fp)
1000f2e8:	10800017 	ldw	r2,0(r2)
1000f2ec:	10800617 	ldw	r2,24(r2)
1000f2f0:	e0ffff17 	ldw	r3,-4(fp)
1000f2f4:	180d883a 	mov	r6,r3
1000f2f8:	e17ffe17 	ldw	r5,-8(fp)
1000f2fc:	e13ffb17 	ldw	r4,-20(fp)
1000f300:	103ee83a 	callr	r2
1000f304:	e0bffc15 	stw	r2,-16(fp)
1000f308:	e0bffc17 	ldw	r2,-16(fp)
1000f30c:	1000070e 	bge	r2,zero,1000f32c <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000f310:	000f2200 	call	1000f220 <alt_get_errno>
1000f314:	1007883a 	mov	r3,r2
1000f318:	e0bffc17 	ldw	r2,-16(fp)
1000f31c:	0085c83a 	sub	r2,zero,r2
1000f320:	18800015 	stw	r2,0(r3)
        return -1;
1000f324:	00bfffc4 	movi	r2,-1
1000f328:	00000c06 	br	1000f35c <write+0xec>
      }
      return rval;
1000f32c:	e0bffc17 	ldw	r2,-16(fp)
1000f330:	00000a06 	br	1000f35c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000f334:	000f2200 	call	1000f220 <alt_get_errno>
1000f338:	1007883a 	mov	r3,r2
1000f33c:	00800344 	movi	r2,13
1000f340:	18800015 	stw	r2,0(r3)
1000f344:	00000406 	br	1000f358 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000f348:	000f2200 	call	1000f220 <alt_get_errno>
1000f34c:	1007883a 	mov	r3,r2
1000f350:	00801444 	movi	r2,81
1000f354:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f358:	00bfffc4 	movi	r2,-1
}
1000f35c:	e037883a 	mov	sp,fp
1000f360:	dfc00117 	ldw	ra,4(sp)
1000f364:	df000017 	ldw	fp,0(sp)
1000f368:	dec00204 	addi	sp,sp,8
1000f36c:	f800283a 	ret

1000f370 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000f370:	defffd04 	addi	sp,sp,-12
1000f374:	dfc00215 	stw	ra,8(sp)
1000f378:	df000115 	stw	fp,4(sp)
1000f37c:	df000104 	addi	fp,sp,4
1000f380:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000f384:	01440074 	movhi	r5,4097
1000f388:	294e0d04 	addi	r5,r5,14388
1000f38c:	e13fff17 	ldw	r4,-4(fp)
1000f390:	00100540 	call	10010054 <alt_dev_llist_insert>
}
1000f394:	e037883a 	mov	sp,fp
1000f398:	dfc00117 	ldw	ra,4(sp)
1000f39c:	df000017 	ldw	fp,0(sp)
1000f3a0:	dec00204 	addi	sp,sp,8
1000f3a4:	f800283a 	ret

1000f3a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000f3a8:	defffd04 	addi	sp,sp,-12
1000f3ac:	dfc00215 	stw	ra,8(sp)
1000f3b0:	df000115 	stw	fp,4(sp)
1000f3b4:	df000104 	addi	fp,sp,4
1000f3b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000f3bc:	0010a500 	call	10010a50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000f3c0:	00800044 	movi	r2,1
1000f3c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000f3c8:	0001883a 	nop
1000f3cc:	e037883a 	mov	sp,fp
1000f3d0:	dfc00117 	ldw	ra,4(sp)
1000f3d4:	df000017 	ldw	fp,0(sp)
1000f3d8:	dec00204 	addi	sp,sp,8
1000f3dc:	f800283a 	ret

1000f3e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000f3e0:	defffe04 	addi	sp,sp,-8
1000f3e4:	dfc00115 	stw	ra,4(sp)
1000f3e8:	df000015 	stw	fp,0(sp)
1000f3ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000f3f0:	01800144 	movi	r6,5
1000f3f4:	000b883a 	mov	r5,zero
1000f3f8:	01040074 	movhi	r4,4097
1000f3fc:	2109f704 	addi	r4,r4,10204
1000f400:	000f5900 	call	1000f590 <altera_avalon_jtag_uart_init>
1000f404:	01040074 	movhi	r4,4097
1000f408:	2109ed04 	addi	r4,r4,10164
1000f40c:	000f3700 	call	1000f370 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000f410:	0001883a 	nop
}
1000f414:	0001883a 	nop
1000f418:	e037883a 	mov	sp,fp
1000f41c:	dfc00117 	ldw	ra,4(sp)
1000f420:	df000017 	ldw	fp,0(sp)
1000f424:	dec00204 	addi	sp,sp,8
1000f428:	f800283a 	ret

1000f42c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000f42c:	defffa04 	addi	sp,sp,-24
1000f430:	dfc00515 	stw	ra,20(sp)
1000f434:	df000415 	stw	fp,16(sp)
1000f438:	df000404 	addi	fp,sp,16
1000f43c:	e13ffd15 	stw	r4,-12(fp)
1000f440:	e17ffe15 	stw	r5,-8(fp)
1000f444:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f448:	e0bffd17 	ldw	r2,-12(fp)
1000f44c:	10800017 	ldw	r2,0(r2)
1000f450:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000f454:	e0bffc17 	ldw	r2,-16(fp)
1000f458:	10c00a04 	addi	r3,r2,40
1000f45c:	e0bffd17 	ldw	r2,-12(fp)
1000f460:	10800217 	ldw	r2,8(r2)
1000f464:	100f883a 	mov	r7,r2
1000f468:	e1bfff17 	ldw	r6,-4(fp)
1000f46c:	e17ffe17 	ldw	r5,-8(fp)
1000f470:	1809883a 	mov	r4,r3
1000f474:	000fa640 	call	1000fa64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000f478:	e037883a 	mov	sp,fp
1000f47c:	dfc00117 	ldw	ra,4(sp)
1000f480:	df000017 	ldw	fp,0(sp)
1000f484:	dec00204 	addi	sp,sp,8
1000f488:	f800283a 	ret

1000f48c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000f48c:	defffa04 	addi	sp,sp,-24
1000f490:	dfc00515 	stw	ra,20(sp)
1000f494:	df000415 	stw	fp,16(sp)
1000f498:	df000404 	addi	fp,sp,16
1000f49c:	e13ffd15 	stw	r4,-12(fp)
1000f4a0:	e17ffe15 	stw	r5,-8(fp)
1000f4a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f4a8:	e0bffd17 	ldw	r2,-12(fp)
1000f4ac:	10800017 	ldw	r2,0(r2)
1000f4b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000f4b4:	e0bffc17 	ldw	r2,-16(fp)
1000f4b8:	10c00a04 	addi	r3,r2,40
1000f4bc:	e0bffd17 	ldw	r2,-12(fp)
1000f4c0:	10800217 	ldw	r2,8(r2)
1000f4c4:	100f883a 	mov	r7,r2
1000f4c8:	e1bfff17 	ldw	r6,-4(fp)
1000f4cc:	e17ffe17 	ldw	r5,-8(fp)
1000f4d0:	1809883a 	mov	r4,r3
1000f4d4:	000fc800 	call	1000fc80 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000f4d8:	e037883a 	mov	sp,fp
1000f4dc:	dfc00117 	ldw	ra,4(sp)
1000f4e0:	df000017 	ldw	fp,0(sp)
1000f4e4:	dec00204 	addi	sp,sp,8
1000f4e8:	f800283a 	ret

1000f4ec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000f4ec:	defffc04 	addi	sp,sp,-16
1000f4f0:	dfc00315 	stw	ra,12(sp)
1000f4f4:	df000215 	stw	fp,8(sp)
1000f4f8:	df000204 	addi	fp,sp,8
1000f4fc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f500:	e0bfff17 	ldw	r2,-4(fp)
1000f504:	10800017 	ldw	r2,0(r2)
1000f508:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000f50c:	e0bffe17 	ldw	r2,-8(fp)
1000f510:	10c00a04 	addi	r3,r2,40
1000f514:	e0bfff17 	ldw	r2,-4(fp)
1000f518:	10800217 	ldw	r2,8(r2)
1000f51c:	100b883a 	mov	r5,r2
1000f520:	1809883a 	mov	r4,r3
1000f524:	000f90c0 	call	1000f90c <altera_avalon_jtag_uart_close>
}
1000f528:	e037883a 	mov	sp,fp
1000f52c:	dfc00117 	ldw	ra,4(sp)
1000f530:	df000017 	ldw	fp,0(sp)
1000f534:	dec00204 	addi	sp,sp,8
1000f538:	f800283a 	ret

1000f53c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000f53c:	defffa04 	addi	sp,sp,-24
1000f540:	dfc00515 	stw	ra,20(sp)
1000f544:	df000415 	stw	fp,16(sp)
1000f548:	df000404 	addi	fp,sp,16
1000f54c:	e13ffd15 	stw	r4,-12(fp)
1000f550:	e17ffe15 	stw	r5,-8(fp)
1000f554:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000f558:	e0bffd17 	ldw	r2,-12(fp)
1000f55c:	10800017 	ldw	r2,0(r2)
1000f560:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000f564:	e0bffc17 	ldw	r2,-16(fp)
1000f568:	10800a04 	addi	r2,r2,40
1000f56c:	e1bfff17 	ldw	r6,-4(fp)
1000f570:	e17ffe17 	ldw	r5,-8(fp)
1000f574:	1009883a 	mov	r4,r2
1000f578:	000f9740 	call	1000f974 <altera_avalon_jtag_uart_ioctl>
}
1000f57c:	e037883a 	mov	sp,fp
1000f580:	dfc00117 	ldw	ra,4(sp)
1000f584:	df000017 	ldw	fp,0(sp)
1000f588:	dec00204 	addi	sp,sp,8
1000f58c:	f800283a 	ret

1000f590 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000f590:	defffa04 	addi	sp,sp,-24
1000f594:	dfc00515 	stw	ra,20(sp)
1000f598:	df000415 	stw	fp,16(sp)
1000f59c:	df000404 	addi	fp,sp,16
1000f5a0:	e13ffd15 	stw	r4,-12(fp)
1000f5a4:	e17ffe15 	stw	r5,-8(fp)
1000f5a8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f5ac:	e0bffd17 	ldw	r2,-12(fp)
1000f5b0:	00c00044 	movi	r3,1
1000f5b4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000f5b8:	e0bffd17 	ldw	r2,-12(fp)
1000f5bc:	10800017 	ldw	r2,0(r2)
1000f5c0:	10800104 	addi	r2,r2,4
1000f5c4:	1007883a 	mov	r3,r2
1000f5c8:	e0bffd17 	ldw	r2,-12(fp)
1000f5cc:	10800817 	ldw	r2,32(r2)
1000f5d0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000f5d4:	e0bffe17 	ldw	r2,-8(fp)
1000f5d8:	e0ffff17 	ldw	r3,-4(fp)
1000f5dc:	d8000015 	stw	zero,0(sp)
1000f5e0:	e1fffd17 	ldw	r7,-12(fp)
1000f5e4:	01840074 	movhi	r6,4097
1000f5e8:	31bd9604 	addi	r6,r6,-2472
1000f5ec:	180b883a 	mov	r5,r3
1000f5f0:	1009883a 	mov	r4,r2
1000f5f4:	00101d80 	call	100101d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000f5f8:	e0bffd17 	ldw	r2,-12(fp)
1000f5fc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000f600:	e0bffd17 	ldw	r2,-12(fp)
1000f604:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000f608:	00840074 	movhi	r2,4097
1000f60c:	10951b04 	addi	r2,r2,21612
1000f610:	10800017 	ldw	r2,0(r2)
1000f614:	e1fffd17 	ldw	r7,-12(fp)
1000f618:	01840074 	movhi	r6,4097
1000f61c:	31be1904 	addi	r6,r6,-1948
1000f620:	100b883a 	mov	r5,r2
1000f624:	1809883a 	mov	r4,r3
1000f628:	000fea40 	call	1000fea4 <alt_alarm_start>
1000f62c:	1000040e 	bge	r2,zero,1000f640 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000f630:	e0fffd17 	ldw	r3,-12(fp)
1000f634:	00a00034 	movhi	r2,32768
1000f638:	10bfffc4 	addi	r2,r2,-1
1000f63c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000f640:	0001883a 	nop
1000f644:	e037883a 	mov	sp,fp
1000f648:	dfc00117 	ldw	ra,4(sp)
1000f64c:	df000017 	ldw	fp,0(sp)
1000f650:	dec00204 	addi	sp,sp,8
1000f654:	f800283a 	ret

1000f658 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000f658:	defff804 	addi	sp,sp,-32
1000f65c:	df000715 	stw	fp,28(sp)
1000f660:	df000704 	addi	fp,sp,28
1000f664:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000f668:	e0bfff17 	ldw	r2,-4(fp)
1000f66c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000f670:	e0bffb17 	ldw	r2,-20(fp)
1000f674:	10800017 	ldw	r2,0(r2)
1000f678:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f67c:	e0bffc17 	ldw	r2,-16(fp)
1000f680:	10800104 	addi	r2,r2,4
1000f684:	10800037 	ldwio	r2,0(r2)
1000f688:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000f68c:	e0bffd17 	ldw	r2,-12(fp)
1000f690:	1080c00c 	andi	r2,r2,768
1000f694:	10006d26 	beq	r2,zero,1000f84c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000f698:	e0bffd17 	ldw	r2,-12(fp)
1000f69c:	1080400c 	andi	r2,r2,256
1000f6a0:	10003526 	beq	r2,zero,1000f778 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000f6a4:	00800074 	movhi	r2,1
1000f6a8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f6ac:	e0bffb17 	ldw	r2,-20(fp)
1000f6b0:	10800a17 	ldw	r2,40(r2)
1000f6b4:	10800044 	addi	r2,r2,1
1000f6b8:	1081ffcc 	andi	r2,r2,2047
1000f6bc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000f6c0:	e0bffb17 	ldw	r2,-20(fp)
1000f6c4:	10c00b17 	ldw	r3,44(r2)
1000f6c8:	e0bffe17 	ldw	r2,-8(fp)
1000f6cc:	18801526 	beq	r3,r2,1000f724 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000f6d0:	e0bffc17 	ldw	r2,-16(fp)
1000f6d4:	10800037 	ldwio	r2,0(r2)
1000f6d8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000f6dc:	e0bff917 	ldw	r2,-28(fp)
1000f6e0:	10a0000c 	andi	r2,r2,32768
1000f6e4:	10001126 	beq	r2,zero,1000f72c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000f6e8:	e0bffb17 	ldw	r2,-20(fp)
1000f6ec:	10800a17 	ldw	r2,40(r2)
1000f6f0:	e0fff917 	ldw	r3,-28(fp)
1000f6f4:	1809883a 	mov	r4,r3
1000f6f8:	e0fffb17 	ldw	r3,-20(fp)
1000f6fc:	1885883a 	add	r2,r3,r2
1000f700:	10800e04 	addi	r2,r2,56
1000f704:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f708:	e0bffb17 	ldw	r2,-20(fp)
1000f70c:	10800a17 	ldw	r2,40(r2)
1000f710:	10800044 	addi	r2,r2,1
1000f714:	10c1ffcc 	andi	r3,r2,2047
1000f718:	e0bffb17 	ldw	r2,-20(fp)
1000f71c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000f720:	003fe206 	br	1000f6ac <__alt_data_end+0xf800f6ac>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1000f724:	0001883a 	nop
1000f728:	00000106 	br	1000f730 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1000f72c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000f730:	e0bff917 	ldw	r2,-28(fp)
1000f734:	10bfffec 	andhi	r2,r2,65535
1000f738:	10000f26 	beq	r2,zero,1000f778 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f73c:	e0bffb17 	ldw	r2,-20(fp)
1000f740:	10c00817 	ldw	r3,32(r2)
1000f744:	00bfff84 	movi	r2,-2
1000f748:	1886703a 	and	r3,r3,r2
1000f74c:	e0bffb17 	ldw	r2,-20(fp)
1000f750:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000f754:	e0bffc17 	ldw	r2,-16(fp)
1000f758:	10800104 	addi	r2,r2,4
1000f75c:	1007883a 	mov	r3,r2
1000f760:	e0bffb17 	ldw	r2,-20(fp)
1000f764:	10800817 	ldw	r2,32(r2)
1000f768:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f76c:	e0bffc17 	ldw	r2,-16(fp)
1000f770:	10800104 	addi	r2,r2,4
1000f774:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000f778:	e0bffd17 	ldw	r2,-12(fp)
1000f77c:	1080800c 	andi	r2,r2,512
1000f780:	103fbe26 	beq	r2,zero,1000f67c <__alt_data_end+0xf800f67c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000f784:	e0bffd17 	ldw	r2,-12(fp)
1000f788:	1004d43a 	srli	r2,r2,16
1000f78c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f790:	00001406 	br	1000f7e4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000f794:	e0bffc17 	ldw	r2,-16(fp)
1000f798:	e0fffb17 	ldw	r3,-20(fp)
1000f79c:	18c00d17 	ldw	r3,52(r3)
1000f7a0:	e13ffb17 	ldw	r4,-20(fp)
1000f7a4:	20c7883a 	add	r3,r4,r3
1000f7a8:	18c20e04 	addi	r3,r3,2104
1000f7ac:	18c00003 	ldbu	r3,0(r3)
1000f7b0:	18c03fcc 	andi	r3,r3,255
1000f7b4:	18c0201c 	xori	r3,r3,128
1000f7b8:	18ffe004 	addi	r3,r3,-128
1000f7bc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f7c0:	e0bffb17 	ldw	r2,-20(fp)
1000f7c4:	10800d17 	ldw	r2,52(r2)
1000f7c8:	10800044 	addi	r2,r2,1
1000f7cc:	10c1ffcc 	andi	r3,r2,2047
1000f7d0:	e0bffb17 	ldw	r2,-20(fp)
1000f7d4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000f7d8:	e0bffa17 	ldw	r2,-24(fp)
1000f7dc:	10bfffc4 	addi	r2,r2,-1
1000f7e0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f7e4:	e0bffa17 	ldw	r2,-24(fp)
1000f7e8:	10000526 	beq	r2,zero,1000f800 <altera_avalon_jtag_uart_irq+0x1a8>
1000f7ec:	e0bffb17 	ldw	r2,-20(fp)
1000f7f0:	10c00d17 	ldw	r3,52(r2)
1000f7f4:	e0bffb17 	ldw	r2,-20(fp)
1000f7f8:	10800c17 	ldw	r2,48(r2)
1000f7fc:	18bfe51e 	bne	r3,r2,1000f794 <__alt_data_end+0xf800f794>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000f800:	e0bffa17 	ldw	r2,-24(fp)
1000f804:	103f9d26 	beq	r2,zero,1000f67c <__alt_data_end+0xf800f67c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f808:	e0bffb17 	ldw	r2,-20(fp)
1000f80c:	10c00817 	ldw	r3,32(r2)
1000f810:	00bfff44 	movi	r2,-3
1000f814:	1886703a 	and	r3,r3,r2
1000f818:	e0bffb17 	ldw	r2,-20(fp)
1000f81c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f820:	e0bffb17 	ldw	r2,-20(fp)
1000f824:	10800017 	ldw	r2,0(r2)
1000f828:	10800104 	addi	r2,r2,4
1000f82c:	1007883a 	mov	r3,r2
1000f830:	e0bffb17 	ldw	r2,-20(fp)
1000f834:	10800817 	ldw	r2,32(r2)
1000f838:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f83c:	e0bffc17 	ldw	r2,-16(fp)
1000f840:	10800104 	addi	r2,r2,4
1000f844:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000f848:	003f8c06 	br	1000f67c <__alt_data_end+0xf800f67c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1000f84c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1000f850:	0001883a 	nop
1000f854:	e037883a 	mov	sp,fp
1000f858:	df000017 	ldw	fp,0(sp)
1000f85c:	dec00104 	addi	sp,sp,4
1000f860:	f800283a 	ret

1000f864 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000f864:	defff804 	addi	sp,sp,-32
1000f868:	df000715 	stw	fp,28(sp)
1000f86c:	df000704 	addi	fp,sp,28
1000f870:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000f874:	e0bffb17 	ldw	r2,-20(fp)
1000f878:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000f87c:	e0bff917 	ldw	r2,-28(fp)
1000f880:	10800017 	ldw	r2,0(r2)
1000f884:	10800104 	addi	r2,r2,4
1000f888:	10800037 	ldwio	r2,0(r2)
1000f88c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000f890:	e0bffa17 	ldw	r2,-24(fp)
1000f894:	1081000c 	andi	r2,r2,1024
1000f898:	10000b26 	beq	r2,zero,1000f8c8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000f89c:	e0bff917 	ldw	r2,-28(fp)
1000f8a0:	10800017 	ldw	r2,0(r2)
1000f8a4:	10800104 	addi	r2,r2,4
1000f8a8:	1007883a 	mov	r3,r2
1000f8ac:	e0bff917 	ldw	r2,-28(fp)
1000f8b0:	10800817 	ldw	r2,32(r2)
1000f8b4:	10810014 	ori	r2,r2,1024
1000f8b8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000f8bc:	e0bff917 	ldw	r2,-28(fp)
1000f8c0:	10000915 	stw	zero,36(r2)
1000f8c4:	00000a06 	br	1000f8f0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000f8c8:	e0bff917 	ldw	r2,-28(fp)
1000f8cc:	10c00917 	ldw	r3,36(r2)
1000f8d0:	00a00034 	movhi	r2,32768
1000f8d4:	10bfff04 	addi	r2,r2,-4
1000f8d8:	10c00536 	bltu	r2,r3,1000f8f0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000f8dc:	e0bff917 	ldw	r2,-28(fp)
1000f8e0:	10800917 	ldw	r2,36(r2)
1000f8e4:	10c00044 	addi	r3,r2,1
1000f8e8:	e0bff917 	ldw	r2,-28(fp)
1000f8ec:	10c00915 	stw	r3,36(r2)
1000f8f0:	00840074 	movhi	r2,4097
1000f8f4:	10951b04 	addi	r2,r2,21612
1000f8f8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000f8fc:	e037883a 	mov	sp,fp
1000f900:	df000017 	ldw	fp,0(sp)
1000f904:	dec00104 	addi	sp,sp,4
1000f908:	f800283a 	ret

1000f90c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000f90c:	defffd04 	addi	sp,sp,-12
1000f910:	df000215 	stw	fp,8(sp)
1000f914:	df000204 	addi	fp,sp,8
1000f918:	e13ffe15 	stw	r4,-8(fp)
1000f91c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f920:	00000506 	br	1000f938 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000f924:	e0bfff17 	ldw	r2,-4(fp)
1000f928:	1090000c 	andi	r2,r2,16384
1000f92c:	10000226 	beq	r2,zero,1000f938 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000f930:	00bffd44 	movi	r2,-11
1000f934:	00000b06 	br	1000f964 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f938:	e0bffe17 	ldw	r2,-8(fp)
1000f93c:	10c00d17 	ldw	r3,52(r2)
1000f940:	e0bffe17 	ldw	r2,-8(fp)
1000f944:	10800c17 	ldw	r2,48(r2)
1000f948:	18800526 	beq	r3,r2,1000f960 <altera_avalon_jtag_uart_close+0x54>
1000f94c:	e0bffe17 	ldw	r2,-8(fp)
1000f950:	10c00917 	ldw	r3,36(r2)
1000f954:	e0bffe17 	ldw	r2,-8(fp)
1000f958:	10800117 	ldw	r2,4(r2)
1000f95c:	18bff136 	bltu	r3,r2,1000f924 <__alt_data_end+0xf800f924>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000f960:	0005883a 	mov	r2,zero
}
1000f964:	e037883a 	mov	sp,fp
1000f968:	df000017 	ldw	fp,0(sp)
1000f96c:	dec00104 	addi	sp,sp,4
1000f970:	f800283a 	ret

1000f974 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000f974:	defffa04 	addi	sp,sp,-24
1000f978:	df000515 	stw	fp,20(sp)
1000f97c:	df000504 	addi	fp,sp,20
1000f980:	e13ffd15 	stw	r4,-12(fp)
1000f984:	e17ffe15 	stw	r5,-8(fp)
1000f988:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000f98c:	00bff9c4 	movi	r2,-25
1000f990:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000f994:	e0bffe17 	ldw	r2,-8(fp)
1000f998:	10da8060 	cmpeqi	r3,r2,27137
1000f99c:	1800031e 	bne	r3,zero,1000f9ac <altera_avalon_jtag_uart_ioctl+0x38>
1000f9a0:	109a80a0 	cmpeqi	r2,r2,27138
1000f9a4:	1000181e 	bne	r2,zero,1000fa08 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1000f9a8:	00002906 	br	1000fa50 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000f9ac:	e0bffd17 	ldw	r2,-12(fp)
1000f9b0:	10c00117 	ldw	r3,4(r2)
1000f9b4:	00a00034 	movhi	r2,32768
1000f9b8:	10bfffc4 	addi	r2,r2,-1
1000f9bc:	18802126 	beq	r3,r2,1000fa44 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1000f9c0:	e0bfff17 	ldw	r2,-4(fp)
1000f9c4:	10800017 	ldw	r2,0(r2)
1000f9c8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000f9cc:	e0bffc17 	ldw	r2,-16(fp)
1000f9d0:	10800090 	cmplti	r2,r2,2
1000f9d4:	1000061e 	bne	r2,zero,1000f9f0 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f9d8:	e0fffc17 	ldw	r3,-16(fp)
1000f9dc:	00a00034 	movhi	r2,32768
1000f9e0:	10bfffc4 	addi	r2,r2,-1
1000f9e4:	18800226 	beq	r3,r2,1000f9f0 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f9e8:	e0bffc17 	ldw	r2,-16(fp)
1000f9ec:	00000206 	br	1000f9f8 <altera_avalon_jtag_uart_ioctl+0x84>
1000f9f0:	00a00034 	movhi	r2,32768
1000f9f4:	10bfff84 	addi	r2,r2,-2
1000f9f8:	e0fffd17 	ldw	r3,-12(fp)
1000f9fc:	18800115 	stw	r2,4(r3)
      rc = 0;
1000fa00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000fa04:	00000f06 	br	1000fa44 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000fa08:	e0bffd17 	ldw	r2,-12(fp)
1000fa0c:	10c00117 	ldw	r3,4(r2)
1000fa10:	00a00034 	movhi	r2,32768
1000fa14:	10bfffc4 	addi	r2,r2,-1
1000fa18:	18800c26 	beq	r3,r2,1000fa4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000fa1c:	e0bffd17 	ldw	r2,-12(fp)
1000fa20:	10c00917 	ldw	r3,36(r2)
1000fa24:	e0bffd17 	ldw	r2,-12(fp)
1000fa28:	10800117 	ldw	r2,4(r2)
1000fa2c:	1885803a 	cmpltu	r2,r3,r2
1000fa30:	10c03fcc 	andi	r3,r2,255
1000fa34:	e0bfff17 	ldw	r2,-4(fp)
1000fa38:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000fa3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000fa40:	00000206 	br	1000fa4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1000fa44:	0001883a 	nop
1000fa48:	00000106 	br	1000fa50 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1000fa4c:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000fa50:	e0bffb17 	ldw	r2,-20(fp)
}
1000fa54:	e037883a 	mov	sp,fp
1000fa58:	df000017 	ldw	fp,0(sp)
1000fa5c:	dec00104 	addi	sp,sp,4
1000fa60:	f800283a 	ret

1000fa64 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000fa64:	defff304 	addi	sp,sp,-52
1000fa68:	dfc00c15 	stw	ra,48(sp)
1000fa6c:	df000b15 	stw	fp,44(sp)
1000fa70:	df000b04 	addi	fp,sp,44
1000fa74:	e13ffc15 	stw	r4,-16(fp)
1000fa78:	e17ffd15 	stw	r5,-12(fp)
1000fa7c:	e1bffe15 	stw	r6,-8(fp)
1000fa80:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000fa84:	e0bffd17 	ldw	r2,-12(fp)
1000fa88:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fa8c:	00004706 	br	1000fbac <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000fa90:	e0bffc17 	ldw	r2,-16(fp)
1000fa94:	10800a17 	ldw	r2,40(r2)
1000fa98:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000fa9c:	e0bffc17 	ldw	r2,-16(fp)
1000faa0:	10800b17 	ldw	r2,44(r2)
1000faa4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000faa8:	e0fff717 	ldw	r3,-36(fp)
1000faac:	e0bff817 	ldw	r2,-32(fp)
1000fab0:	18800536 	bltu	r3,r2,1000fac8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000fab4:	e0fff717 	ldw	r3,-36(fp)
1000fab8:	e0bff817 	ldw	r2,-32(fp)
1000fabc:	1885c83a 	sub	r2,r3,r2
1000fac0:	e0bff615 	stw	r2,-40(fp)
1000fac4:	00000406 	br	1000fad8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000fac8:	00c20004 	movi	r3,2048
1000facc:	e0bff817 	ldw	r2,-32(fp)
1000fad0:	1885c83a 	sub	r2,r3,r2
1000fad4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fad8:	e0bff617 	ldw	r2,-40(fp)
1000fadc:	10001e26 	beq	r2,zero,1000fb58 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1000fae0:	e0fffe17 	ldw	r3,-8(fp)
1000fae4:	e0bff617 	ldw	r2,-40(fp)
1000fae8:	1880022e 	bgeu	r3,r2,1000faf4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1000faec:	e0bffe17 	ldw	r2,-8(fp)
1000faf0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000faf4:	e0bffc17 	ldw	r2,-16(fp)
1000faf8:	10c00e04 	addi	r3,r2,56
1000fafc:	e0bff817 	ldw	r2,-32(fp)
1000fb00:	1885883a 	add	r2,r3,r2
1000fb04:	e1bff617 	ldw	r6,-40(fp)
1000fb08:	100b883a 	mov	r5,r2
1000fb0c:	e13ff517 	ldw	r4,-44(fp)
1000fb10:	00017240 	call	10001724 <memcpy>
      ptr   += n;
1000fb14:	e0fff517 	ldw	r3,-44(fp)
1000fb18:	e0bff617 	ldw	r2,-40(fp)
1000fb1c:	1885883a 	add	r2,r3,r2
1000fb20:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000fb24:	e0fffe17 	ldw	r3,-8(fp)
1000fb28:	e0bff617 	ldw	r2,-40(fp)
1000fb2c:	1885c83a 	sub	r2,r3,r2
1000fb30:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fb34:	e0fff817 	ldw	r3,-32(fp)
1000fb38:	e0bff617 	ldw	r2,-40(fp)
1000fb3c:	1885883a 	add	r2,r3,r2
1000fb40:	10c1ffcc 	andi	r3,r2,2047
1000fb44:	e0bffc17 	ldw	r2,-16(fp)
1000fb48:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000fb4c:	e0bffe17 	ldw	r2,-8(fp)
1000fb50:	00bfcf16 	blt	zero,r2,1000fa90 <__alt_data_end+0xf800fa90>
1000fb54:	00000106 	br	1000fb5c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1000fb58:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1000fb5c:	e0fff517 	ldw	r3,-44(fp)
1000fb60:	e0bffd17 	ldw	r2,-12(fp)
1000fb64:	1880141e 	bne	r3,r2,1000fbb8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000fb68:	e0bfff17 	ldw	r2,-4(fp)
1000fb6c:	1090000c 	andi	r2,r2,16384
1000fb70:	1000131e 	bne	r2,zero,1000fbc0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000fb74:	0001883a 	nop
1000fb78:	e0bffc17 	ldw	r2,-16(fp)
1000fb7c:	10c00a17 	ldw	r3,40(r2)
1000fb80:	e0bff717 	ldw	r2,-36(fp)
1000fb84:	1880051e 	bne	r3,r2,1000fb9c <altera_avalon_jtag_uart_read+0x138>
1000fb88:	e0bffc17 	ldw	r2,-16(fp)
1000fb8c:	10c00917 	ldw	r3,36(r2)
1000fb90:	e0bffc17 	ldw	r2,-16(fp)
1000fb94:	10800117 	ldw	r2,4(r2)
1000fb98:	18bff736 	bltu	r3,r2,1000fb78 <__alt_data_end+0xf800fb78>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000fb9c:	e0bffc17 	ldw	r2,-16(fp)
1000fba0:	10c00a17 	ldw	r3,40(r2)
1000fba4:	e0bff717 	ldw	r2,-36(fp)
1000fba8:	18800726 	beq	r3,r2,1000fbc8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fbac:	e0bffe17 	ldw	r2,-8(fp)
1000fbb0:	00bfb716 	blt	zero,r2,1000fa90 <__alt_data_end+0xf800fa90>
1000fbb4:	00000506 	br	1000fbcc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1000fbb8:	0001883a 	nop
1000fbbc:	00000306 	br	1000fbcc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1000fbc0:	0001883a 	nop
1000fbc4:	00000106 	br	1000fbcc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1000fbc8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000fbcc:	e0fff517 	ldw	r3,-44(fp)
1000fbd0:	e0bffd17 	ldw	r2,-12(fp)
1000fbd4:	18801826 	beq	r3,r2,1000fc38 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fbd8:	0005303a 	rdctl	r2,status
1000fbdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fbe0:	e0fffb17 	ldw	r3,-20(fp)
1000fbe4:	00bfff84 	movi	r2,-2
1000fbe8:	1884703a 	and	r2,r3,r2
1000fbec:	1001703a 	wrctl	status,r2
  
  return context;
1000fbf0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000fbf4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fbf8:	e0bffc17 	ldw	r2,-16(fp)
1000fbfc:	10800817 	ldw	r2,32(r2)
1000fc00:	10c00054 	ori	r3,r2,1
1000fc04:	e0bffc17 	ldw	r2,-16(fp)
1000fc08:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fc0c:	e0bffc17 	ldw	r2,-16(fp)
1000fc10:	10800017 	ldw	r2,0(r2)
1000fc14:	10800104 	addi	r2,r2,4
1000fc18:	1007883a 	mov	r3,r2
1000fc1c:	e0bffc17 	ldw	r2,-16(fp)
1000fc20:	10800817 	ldw	r2,32(r2)
1000fc24:	18800035 	stwio	r2,0(r3)
1000fc28:	e0bffa17 	ldw	r2,-24(fp)
1000fc2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fc30:	e0bff917 	ldw	r2,-28(fp)
1000fc34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000fc38:	e0fff517 	ldw	r3,-44(fp)
1000fc3c:	e0bffd17 	ldw	r2,-12(fp)
1000fc40:	18800426 	beq	r3,r2,1000fc54 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1000fc44:	e0fff517 	ldw	r3,-44(fp)
1000fc48:	e0bffd17 	ldw	r2,-12(fp)
1000fc4c:	1885c83a 	sub	r2,r3,r2
1000fc50:	00000606 	br	1000fc6c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1000fc54:	e0bfff17 	ldw	r2,-4(fp)
1000fc58:	1090000c 	andi	r2,r2,16384
1000fc5c:	10000226 	beq	r2,zero,1000fc68 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1000fc60:	00bffd44 	movi	r2,-11
1000fc64:	00000106 	br	1000fc6c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1000fc68:	00bffec4 	movi	r2,-5
}
1000fc6c:	e037883a 	mov	sp,fp
1000fc70:	dfc00117 	ldw	ra,4(sp)
1000fc74:	df000017 	ldw	fp,0(sp)
1000fc78:	dec00204 	addi	sp,sp,8
1000fc7c:	f800283a 	ret

1000fc80 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000fc80:	defff304 	addi	sp,sp,-52
1000fc84:	dfc00c15 	stw	ra,48(sp)
1000fc88:	df000b15 	stw	fp,44(sp)
1000fc8c:	df000b04 	addi	fp,sp,44
1000fc90:	e13ffc15 	stw	r4,-16(fp)
1000fc94:	e17ffd15 	stw	r5,-12(fp)
1000fc98:	e1bffe15 	stw	r6,-8(fp)
1000fc9c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000fca0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000fca4:	e0bffd17 	ldw	r2,-12(fp)
1000fca8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fcac:	00003706 	br	1000fd8c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000fcb0:	e0bffc17 	ldw	r2,-16(fp)
1000fcb4:	10800c17 	ldw	r2,48(r2)
1000fcb8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1000fcbc:	e0bffc17 	ldw	r2,-16(fp)
1000fcc0:	10800d17 	ldw	r2,52(r2)
1000fcc4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000fcc8:	e0fff917 	ldw	r3,-28(fp)
1000fccc:	e0bff517 	ldw	r2,-44(fp)
1000fcd0:	1880062e 	bgeu	r3,r2,1000fcec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000fcd4:	e0fff517 	ldw	r3,-44(fp)
1000fcd8:	e0bff917 	ldw	r2,-28(fp)
1000fcdc:	1885c83a 	sub	r2,r3,r2
1000fce0:	10bfffc4 	addi	r2,r2,-1
1000fce4:	e0bff615 	stw	r2,-40(fp)
1000fce8:	00000b06 	br	1000fd18 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000fcec:	e0bff517 	ldw	r2,-44(fp)
1000fcf0:	10000526 	beq	r2,zero,1000fd08 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000fcf4:	00c20004 	movi	r3,2048
1000fcf8:	e0bff917 	ldw	r2,-28(fp)
1000fcfc:	1885c83a 	sub	r2,r3,r2
1000fd00:	e0bff615 	stw	r2,-40(fp)
1000fd04:	00000406 	br	1000fd18 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000fd08:	00c1ffc4 	movi	r3,2047
1000fd0c:	e0bff917 	ldw	r2,-28(fp)
1000fd10:	1885c83a 	sub	r2,r3,r2
1000fd14:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fd18:	e0bff617 	ldw	r2,-40(fp)
1000fd1c:	10001e26 	beq	r2,zero,1000fd98 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1000fd20:	e0fffe17 	ldw	r3,-8(fp)
1000fd24:	e0bff617 	ldw	r2,-40(fp)
1000fd28:	1880022e 	bgeu	r3,r2,1000fd34 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1000fd2c:	e0bffe17 	ldw	r2,-8(fp)
1000fd30:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000fd34:	e0bffc17 	ldw	r2,-16(fp)
1000fd38:	10c20e04 	addi	r3,r2,2104
1000fd3c:	e0bff917 	ldw	r2,-28(fp)
1000fd40:	1885883a 	add	r2,r3,r2
1000fd44:	e1bff617 	ldw	r6,-40(fp)
1000fd48:	e17ffd17 	ldw	r5,-12(fp)
1000fd4c:	1009883a 	mov	r4,r2
1000fd50:	00017240 	call	10001724 <memcpy>
      ptr   += n;
1000fd54:	e0fffd17 	ldw	r3,-12(fp)
1000fd58:	e0bff617 	ldw	r2,-40(fp)
1000fd5c:	1885883a 	add	r2,r3,r2
1000fd60:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000fd64:	e0fffe17 	ldw	r3,-8(fp)
1000fd68:	e0bff617 	ldw	r2,-40(fp)
1000fd6c:	1885c83a 	sub	r2,r3,r2
1000fd70:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fd74:	e0fff917 	ldw	r3,-28(fp)
1000fd78:	e0bff617 	ldw	r2,-40(fp)
1000fd7c:	1885883a 	add	r2,r3,r2
1000fd80:	10c1ffcc 	andi	r3,r2,2047
1000fd84:	e0bffc17 	ldw	r2,-16(fp)
1000fd88:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fd8c:	e0bffe17 	ldw	r2,-8(fp)
1000fd90:	00bfc716 	blt	zero,r2,1000fcb0 <__alt_data_end+0xf800fcb0>
1000fd94:	00000106 	br	1000fd9c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1000fd98:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fd9c:	0005303a 	rdctl	r2,status
1000fda0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fda4:	e0fffb17 	ldw	r3,-20(fp)
1000fda8:	00bfff84 	movi	r2,-2
1000fdac:	1884703a 	and	r2,r3,r2
1000fdb0:	1001703a 	wrctl	status,r2
  
  return context;
1000fdb4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000fdb8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000fdbc:	e0bffc17 	ldw	r2,-16(fp)
1000fdc0:	10800817 	ldw	r2,32(r2)
1000fdc4:	10c00094 	ori	r3,r2,2
1000fdc8:	e0bffc17 	ldw	r2,-16(fp)
1000fdcc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fdd0:	e0bffc17 	ldw	r2,-16(fp)
1000fdd4:	10800017 	ldw	r2,0(r2)
1000fdd8:	10800104 	addi	r2,r2,4
1000fddc:	1007883a 	mov	r3,r2
1000fde0:	e0bffc17 	ldw	r2,-16(fp)
1000fde4:	10800817 	ldw	r2,32(r2)
1000fde8:	18800035 	stwio	r2,0(r3)
1000fdec:	e0bffa17 	ldw	r2,-24(fp)
1000fdf0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fdf4:	e0bff817 	ldw	r2,-32(fp)
1000fdf8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000fdfc:	e0bffe17 	ldw	r2,-8(fp)
1000fe00:	0080100e 	bge	zero,r2,1000fe44 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1000fe04:	e0bfff17 	ldw	r2,-4(fp)
1000fe08:	1090000c 	andi	r2,r2,16384
1000fe0c:	1000101e 	bne	r2,zero,1000fe50 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000fe10:	0001883a 	nop
1000fe14:	e0bffc17 	ldw	r2,-16(fp)
1000fe18:	10c00d17 	ldw	r3,52(r2)
1000fe1c:	e0bff517 	ldw	r2,-44(fp)
1000fe20:	1880051e 	bne	r3,r2,1000fe38 <altera_avalon_jtag_uart_write+0x1b8>
1000fe24:	e0bffc17 	ldw	r2,-16(fp)
1000fe28:	10c00917 	ldw	r3,36(r2)
1000fe2c:	e0bffc17 	ldw	r2,-16(fp)
1000fe30:	10800117 	ldw	r2,4(r2)
1000fe34:	18bff736 	bltu	r3,r2,1000fe14 <__alt_data_end+0xf800fe14>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000fe38:	e0bffc17 	ldw	r2,-16(fp)
1000fe3c:	10800917 	ldw	r2,36(r2)
1000fe40:	1000051e 	bne	r2,zero,1000fe58 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1000fe44:	e0bffe17 	ldw	r2,-8(fp)
1000fe48:	00bfd016 	blt	zero,r2,1000fd8c <__alt_data_end+0xf800fd8c>
1000fe4c:	00000306 	br	1000fe5c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1000fe50:	0001883a 	nop
1000fe54:	00000106 	br	1000fe5c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1000fe58:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000fe5c:	e0fffd17 	ldw	r3,-12(fp)
1000fe60:	e0bff717 	ldw	r2,-36(fp)
1000fe64:	18800426 	beq	r3,r2,1000fe78 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1000fe68:	e0fffd17 	ldw	r3,-12(fp)
1000fe6c:	e0bff717 	ldw	r2,-36(fp)
1000fe70:	1885c83a 	sub	r2,r3,r2
1000fe74:	00000606 	br	1000fe90 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1000fe78:	e0bfff17 	ldw	r2,-4(fp)
1000fe7c:	1090000c 	andi	r2,r2,16384
1000fe80:	10000226 	beq	r2,zero,1000fe8c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1000fe84:	00bffd44 	movi	r2,-11
1000fe88:	00000106 	br	1000fe90 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000fe8c:	00bffec4 	movi	r2,-5
}
1000fe90:	e037883a 	mov	sp,fp
1000fe94:	dfc00117 	ldw	ra,4(sp)
1000fe98:	df000017 	ldw	fp,0(sp)
1000fe9c:	dec00204 	addi	sp,sp,8
1000fea0:	f800283a 	ret

1000fea4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000fea4:	defff504 	addi	sp,sp,-44
1000fea8:	df000a15 	stw	fp,40(sp)
1000feac:	df000a04 	addi	fp,sp,40
1000feb0:	e13ffc15 	stw	r4,-16(fp)
1000feb4:	e17ffd15 	stw	r5,-12(fp)
1000feb8:	e1bffe15 	stw	r6,-8(fp)
1000febc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000fec0:	e03ff615 	stw	zero,-40(fp)
1000fec4:	00840074 	movhi	r2,4097
1000fec8:	10951b04 	addi	r2,r2,21612
1000fecc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000fed0:	10003f26 	beq	r2,zero,1000ffd0 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000fed4:	e0bffc17 	ldw	r2,-16(fp)
1000fed8:	10003b26 	beq	r2,zero,1000ffc8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000fedc:	e0bffc17 	ldw	r2,-16(fp)
1000fee0:	e0fffe17 	ldw	r3,-8(fp)
1000fee4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000fee8:	e0bffc17 	ldw	r2,-16(fp)
1000feec:	e0ffff17 	ldw	r3,-4(fp)
1000fef0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fef4:	0005303a 	rdctl	r2,status
1000fef8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fefc:	e0fff917 	ldw	r3,-28(fp)
1000ff00:	00bfff84 	movi	r2,-2
1000ff04:	1884703a 	and	r2,r3,r2
1000ff08:	1001703a 	wrctl	status,r2
  
  return context;
1000ff0c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1000ff10:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000ff14:	00840074 	movhi	r2,4097
1000ff18:	10951c04 	addi	r2,r2,21616
1000ff1c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000ff20:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000ff24:	e0fffd17 	ldw	r3,-12(fp)
1000ff28:	e0bff617 	ldw	r2,-40(fp)
1000ff2c:	1885883a 	add	r2,r3,r2
1000ff30:	10c00044 	addi	r3,r2,1
1000ff34:	e0bffc17 	ldw	r2,-16(fp)
1000ff38:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000ff3c:	e0bffc17 	ldw	r2,-16(fp)
1000ff40:	10c00217 	ldw	r3,8(r2)
1000ff44:	e0bff617 	ldw	r2,-40(fp)
1000ff48:	1880042e 	bgeu	r3,r2,1000ff5c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000ff4c:	e0bffc17 	ldw	r2,-16(fp)
1000ff50:	00c00044 	movi	r3,1
1000ff54:	10c00405 	stb	r3,16(r2)
1000ff58:	00000206 	br	1000ff64 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000ff5c:	e0bffc17 	ldw	r2,-16(fp)
1000ff60:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000ff64:	e0fffc17 	ldw	r3,-16(fp)
1000ff68:	00840074 	movhi	r2,4097
1000ff6c:	108e1304 	addi	r2,r2,14412
1000ff70:	e0bffa15 	stw	r2,-24(fp)
1000ff74:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ff78:	e0bffb17 	ldw	r2,-20(fp)
1000ff7c:	e0fffa17 	ldw	r3,-24(fp)
1000ff80:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ff84:	e0bffa17 	ldw	r2,-24(fp)
1000ff88:	10c00017 	ldw	r3,0(r2)
1000ff8c:	e0bffb17 	ldw	r2,-20(fp)
1000ff90:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ff94:	e0bffa17 	ldw	r2,-24(fp)
1000ff98:	10800017 	ldw	r2,0(r2)
1000ff9c:	e0fffb17 	ldw	r3,-20(fp)
1000ffa0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ffa4:	e0bffa17 	ldw	r2,-24(fp)
1000ffa8:	e0fffb17 	ldw	r3,-20(fp)
1000ffac:	10c00015 	stw	r3,0(r2)
1000ffb0:	e0bff817 	ldw	r2,-32(fp)
1000ffb4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ffb8:	e0bff717 	ldw	r2,-36(fp)
1000ffbc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000ffc0:	0005883a 	mov	r2,zero
1000ffc4:	00000306 	br	1000ffd4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000ffc8:	00bffa84 	movi	r2,-22
1000ffcc:	00000106 	br	1000ffd4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000ffd0:	00bfde84 	movi	r2,-134
  }
}
1000ffd4:	e037883a 	mov	sp,fp
1000ffd8:	df000017 	ldw	fp,0(sp)
1000ffdc:	dec00104 	addi	sp,sp,4
1000ffe0:	f800283a 	ret

1000ffe4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000ffe4:	deffff04 	addi	sp,sp,-4
1000ffe8:	df000015 	stw	fp,0(sp)
1000ffec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000fff0:	0001883a 	nop
1000fff4:	e037883a 	mov	sp,fp
1000fff8:	df000017 	ldw	fp,0(sp)
1000fffc:	dec00104 	addi	sp,sp,4
10010000:	f800283a 	ret

10010004 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010004:	defffe04 	addi	sp,sp,-8
10010008:	dfc00115 	stw	ra,4(sp)
1001000c:	df000015 	stw	fp,0(sp)
10010010:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010014:	00840074 	movhi	r2,4097
10010018:	108e1004 	addi	r2,r2,14400
1001001c:	10800017 	ldw	r2,0(r2)
10010020:	10000526 	beq	r2,zero,10010038 <alt_get_errno+0x34>
10010024:	00840074 	movhi	r2,4097
10010028:	108e1004 	addi	r2,r2,14400
1001002c:	10800017 	ldw	r2,0(r2)
10010030:	103ee83a 	callr	r2
10010034:	00000206 	br	10010040 <alt_get_errno+0x3c>
10010038:	00840074 	movhi	r2,4097
1001003c:	10951604 	addi	r2,r2,21592
}
10010040:	e037883a 	mov	sp,fp
10010044:	dfc00117 	ldw	ra,4(sp)
10010048:	df000017 	ldw	fp,0(sp)
1001004c:	dec00204 	addi	sp,sp,8
10010050:	f800283a 	ret

10010054 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010054:	defffa04 	addi	sp,sp,-24
10010058:	dfc00515 	stw	ra,20(sp)
1001005c:	df000415 	stw	fp,16(sp)
10010060:	df000404 	addi	fp,sp,16
10010064:	e13ffe15 	stw	r4,-8(fp)
10010068:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1001006c:	e0bffe17 	ldw	r2,-8(fp)
10010070:	10000326 	beq	r2,zero,10010080 <alt_dev_llist_insert+0x2c>
10010074:	e0bffe17 	ldw	r2,-8(fp)
10010078:	10800217 	ldw	r2,8(r2)
1001007c:	1000061e 	bne	r2,zero,10010098 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010080:	00100040 	call	10010004 <alt_get_errno>
10010084:	1007883a 	mov	r3,r2
10010088:	00800584 	movi	r2,22
1001008c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010090:	00bffa84 	movi	r2,-22
10010094:	00001306 	br	100100e4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010098:	e0bffe17 	ldw	r2,-8(fp)
1001009c:	e0ffff17 	ldw	r3,-4(fp)
100100a0:	e0fffc15 	stw	r3,-16(fp)
100100a4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100100a8:	e0bffd17 	ldw	r2,-12(fp)
100100ac:	e0fffc17 	ldw	r3,-16(fp)
100100b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100100b4:	e0bffc17 	ldw	r2,-16(fp)
100100b8:	10c00017 	ldw	r3,0(r2)
100100bc:	e0bffd17 	ldw	r2,-12(fp)
100100c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100100c4:	e0bffc17 	ldw	r2,-16(fp)
100100c8:	10800017 	ldw	r2,0(r2)
100100cc:	e0fffd17 	ldw	r3,-12(fp)
100100d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100100d4:	e0bffc17 	ldw	r2,-16(fp)
100100d8:	e0fffd17 	ldw	r3,-12(fp)
100100dc:	10c00015 	stw	r3,0(r2)

  return 0;  
100100e0:	0005883a 	mov	r2,zero
}
100100e4:	e037883a 	mov	sp,fp
100100e8:	dfc00117 	ldw	ra,4(sp)
100100ec:	df000017 	ldw	fp,0(sp)
100100f0:	dec00204 	addi	sp,sp,8
100100f4:	f800283a 	ret

100100f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100100f8:	defffd04 	addi	sp,sp,-12
100100fc:	dfc00215 	stw	ra,8(sp)
10010100:	df000115 	stw	fp,4(sp)
10010104:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010108:	00840074 	movhi	r2,4097
1001010c:	10844604 	addi	r2,r2,4376
10010110:	e0bfff15 	stw	r2,-4(fp)
10010114:	00000606 	br	10010130 <_do_ctors+0x38>
        (*ctor) (); 
10010118:	e0bfff17 	ldw	r2,-4(fp)
1001011c:	10800017 	ldw	r2,0(r2)
10010120:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010124:	e0bfff17 	ldw	r2,-4(fp)
10010128:	10bfff04 	addi	r2,r2,-4
1001012c:	e0bfff15 	stw	r2,-4(fp)
10010130:	e0ffff17 	ldw	r3,-4(fp)
10010134:	00840074 	movhi	r2,4097
10010138:	10844704 	addi	r2,r2,4380
1001013c:	18bff62e 	bgeu	r3,r2,10010118 <__alt_data_end+0xf8010118>
        (*ctor) (); 
}
10010140:	0001883a 	nop
10010144:	e037883a 	mov	sp,fp
10010148:	dfc00117 	ldw	ra,4(sp)
1001014c:	df000017 	ldw	fp,0(sp)
10010150:	dec00204 	addi	sp,sp,8
10010154:	f800283a 	ret

10010158 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010158:	defffd04 	addi	sp,sp,-12
1001015c:	dfc00215 	stw	ra,8(sp)
10010160:	df000115 	stw	fp,4(sp)
10010164:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010168:	00840074 	movhi	r2,4097
1001016c:	10844604 	addi	r2,r2,4376
10010170:	e0bfff15 	stw	r2,-4(fp)
10010174:	00000606 	br	10010190 <_do_dtors+0x38>
        (*dtor) (); 
10010178:	e0bfff17 	ldw	r2,-4(fp)
1001017c:	10800017 	ldw	r2,0(r2)
10010180:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010184:	e0bfff17 	ldw	r2,-4(fp)
10010188:	10bfff04 	addi	r2,r2,-4
1001018c:	e0bfff15 	stw	r2,-4(fp)
10010190:	e0ffff17 	ldw	r3,-4(fp)
10010194:	00840074 	movhi	r2,4097
10010198:	10844704 	addi	r2,r2,4380
1001019c:	18bff62e 	bgeu	r3,r2,10010178 <__alt_data_end+0xf8010178>
        (*dtor) (); 
}
100101a0:	0001883a 	nop
100101a4:	e037883a 	mov	sp,fp
100101a8:	dfc00117 	ldw	ra,4(sp)
100101ac:	df000017 	ldw	fp,0(sp)
100101b0:	dec00204 	addi	sp,sp,8
100101b4:	f800283a 	ret

100101b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100101b8:	deffff04 	addi	sp,sp,-4
100101bc:	df000015 	stw	fp,0(sp)
100101c0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100101c4:	0001883a 	nop
100101c8:	e037883a 	mov	sp,fp
100101cc:	df000017 	ldw	fp,0(sp)
100101d0:	dec00104 	addi	sp,sp,4
100101d4:	f800283a 	ret

100101d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100101d8:	defff904 	addi	sp,sp,-28
100101dc:	dfc00615 	stw	ra,24(sp)
100101e0:	df000515 	stw	fp,20(sp)
100101e4:	df000504 	addi	fp,sp,20
100101e8:	e13ffc15 	stw	r4,-16(fp)
100101ec:	e17ffd15 	stw	r5,-12(fp)
100101f0:	e1bffe15 	stw	r6,-8(fp)
100101f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100101f8:	e0800217 	ldw	r2,8(fp)
100101fc:	d8800015 	stw	r2,0(sp)
10010200:	e1ffff17 	ldw	r7,-4(fp)
10010204:	e1bffe17 	ldw	r6,-8(fp)
10010208:	e17ffd17 	ldw	r5,-12(fp)
1001020c:	e13ffc17 	ldw	r4,-16(fp)
10010210:	00103b80 	call	100103b8 <alt_iic_isr_register>
}  
10010214:	e037883a 	mov	sp,fp
10010218:	dfc00117 	ldw	ra,4(sp)
1001021c:	df000017 	ldw	fp,0(sp)
10010220:	dec00204 	addi	sp,sp,8
10010224:	f800283a 	ret

10010228 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010228:	defff904 	addi	sp,sp,-28
1001022c:	df000615 	stw	fp,24(sp)
10010230:	df000604 	addi	fp,sp,24
10010234:	e13ffe15 	stw	r4,-8(fp)
10010238:	e17fff15 	stw	r5,-4(fp)
1001023c:	e0bfff17 	ldw	r2,-4(fp)
10010240:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010244:	0005303a 	rdctl	r2,status
10010248:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001024c:	e0fffb17 	ldw	r3,-20(fp)
10010250:	00bfff84 	movi	r2,-2
10010254:	1884703a 	and	r2,r3,r2
10010258:	1001703a 	wrctl	status,r2
  
  return context;
1001025c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010260:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010264:	00c00044 	movi	r3,1
10010268:	e0bffa17 	ldw	r2,-24(fp)
1001026c:	1884983a 	sll	r2,r3,r2
10010270:	1007883a 	mov	r3,r2
10010274:	00840074 	movhi	r2,4097
10010278:	10951a04 	addi	r2,r2,21608
1001027c:	10800017 	ldw	r2,0(r2)
10010280:	1886b03a 	or	r3,r3,r2
10010284:	00840074 	movhi	r2,4097
10010288:	10951a04 	addi	r2,r2,21608
1001028c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010290:	00840074 	movhi	r2,4097
10010294:	10951a04 	addi	r2,r2,21608
10010298:	10800017 	ldw	r2,0(r2)
1001029c:	100170fa 	wrctl	ienable,r2
100102a0:	e0bffc17 	ldw	r2,-16(fp)
100102a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100102a8:	e0bffd17 	ldw	r2,-12(fp)
100102ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100102b0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100102b4:	0001883a 	nop
}
100102b8:	e037883a 	mov	sp,fp
100102bc:	df000017 	ldw	fp,0(sp)
100102c0:	dec00104 	addi	sp,sp,4
100102c4:	f800283a 	ret

100102c8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100102c8:	defff904 	addi	sp,sp,-28
100102cc:	df000615 	stw	fp,24(sp)
100102d0:	df000604 	addi	fp,sp,24
100102d4:	e13ffe15 	stw	r4,-8(fp)
100102d8:	e17fff15 	stw	r5,-4(fp)
100102dc:	e0bfff17 	ldw	r2,-4(fp)
100102e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100102e4:	0005303a 	rdctl	r2,status
100102e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100102ec:	e0fffb17 	ldw	r3,-20(fp)
100102f0:	00bfff84 	movi	r2,-2
100102f4:	1884703a 	and	r2,r3,r2
100102f8:	1001703a 	wrctl	status,r2
  
  return context;
100102fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010300:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010304:	00c00044 	movi	r3,1
10010308:	e0bffa17 	ldw	r2,-24(fp)
1001030c:	1884983a 	sll	r2,r3,r2
10010310:	0084303a 	nor	r2,zero,r2
10010314:	1007883a 	mov	r3,r2
10010318:	00840074 	movhi	r2,4097
1001031c:	10951a04 	addi	r2,r2,21608
10010320:	10800017 	ldw	r2,0(r2)
10010324:	1886703a 	and	r3,r3,r2
10010328:	00840074 	movhi	r2,4097
1001032c:	10951a04 	addi	r2,r2,21608
10010330:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010334:	00840074 	movhi	r2,4097
10010338:	10951a04 	addi	r2,r2,21608
1001033c:	10800017 	ldw	r2,0(r2)
10010340:	100170fa 	wrctl	ienable,r2
10010344:	e0bffc17 	ldw	r2,-16(fp)
10010348:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001034c:	e0bffd17 	ldw	r2,-12(fp)
10010350:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010354:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010358:	0001883a 	nop
}
1001035c:	e037883a 	mov	sp,fp
10010360:	df000017 	ldw	fp,0(sp)
10010364:	dec00104 	addi	sp,sp,4
10010368:	f800283a 	ret

1001036c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1001036c:	defffc04 	addi	sp,sp,-16
10010370:	df000315 	stw	fp,12(sp)
10010374:	df000304 	addi	fp,sp,12
10010378:	e13ffe15 	stw	r4,-8(fp)
1001037c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010380:	000530fa 	rdctl	r2,ienable
10010384:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010388:	00c00044 	movi	r3,1
1001038c:	e0bfff17 	ldw	r2,-4(fp)
10010390:	1884983a 	sll	r2,r3,r2
10010394:	1007883a 	mov	r3,r2
10010398:	e0bffd17 	ldw	r2,-12(fp)
1001039c:	1884703a 	and	r2,r3,r2
100103a0:	1004c03a 	cmpne	r2,r2,zero
100103a4:	10803fcc 	andi	r2,r2,255
}
100103a8:	e037883a 	mov	sp,fp
100103ac:	df000017 	ldw	fp,0(sp)
100103b0:	dec00104 	addi	sp,sp,4
100103b4:	f800283a 	ret

100103b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100103b8:	defff504 	addi	sp,sp,-44
100103bc:	dfc00a15 	stw	ra,40(sp)
100103c0:	df000915 	stw	fp,36(sp)
100103c4:	df000904 	addi	fp,sp,36
100103c8:	e13ffc15 	stw	r4,-16(fp)
100103cc:	e17ffd15 	stw	r5,-12(fp)
100103d0:	e1bffe15 	stw	r6,-8(fp)
100103d4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100103d8:	00bffa84 	movi	r2,-22
100103dc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100103e0:	e0bffd17 	ldw	r2,-12(fp)
100103e4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100103e8:	e0bff817 	ldw	r2,-32(fp)
100103ec:	10800808 	cmpgei	r2,r2,32
100103f0:	1000271e 	bne	r2,zero,10010490 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100103f4:	0005303a 	rdctl	r2,status
100103f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100103fc:	e0fffb17 	ldw	r3,-20(fp)
10010400:	00bfff84 	movi	r2,-2
10010404:	1884703a 	and	r2,r3,r2
10010408:	1001703a 	wrctl	status,r2
  
  return context;
1001040c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010410:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10010414:	00840074 	movhi	r2,4097
10010418:	10953104 	addi	r2,r2,21700
1001041c:	e0fff817 	ldw	r3,-32(fp)
10010420:	180690fa 	slli	r3,r3,3
10010424:	10c5883a 	add	r2,r2,r3
10010428:	e0fffe17 	ldw	r3,-8(fp)
1001042c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010430:	00840074 	movhi	r2,4097
10010434:	10953104 	addi	r2,r2,21700
10010438:	e0fff817 	ldw	r3,-32(fp)
1001043c:	180690fa 	slli	r3,r3,3
10010440:	10c5883a 	add	r2,r2,r3
10010444:	10800104 	addi	r2,r2,4
10010448:	e0ffff17 	ldw	r3,-4(fp)
1001044c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010450:	e0bffe17 	ldw	r2,-8(fp)
10010454:	10000526 	beq	r2,zero,1001046c <alt_iic_isr_register+0xb4>
10010458:	e0bff817 	ldw	r2,-32(fp)
1001045c:	100b883a 	mov	r5,r2
10010460:	e13ffc17 	ldw	r4,-16(fp)
10010464:	00102280 	call	10010228 <alt_ic_irq_enable>
10010468:	00000406 	br	1001047c <alt_iic_isr_register+0xc4>
1001046c:	e0bff817 	ldw	r2,-32(fp)
10010470:	100b883a 	mov	r5,r2
10010474:	e13ffc17 	ldw	r4,-16(fp)
10010478:	00102c80 	call	100102c8 <alt_ic_irq_disable>
1001047c:	e0bff715 	stw	r2,-36(fp)
10010480:	e0bffa17 	ldw	r2,-24(fp)
10010484:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010488:	e0bff917 	ldw	r2,-28(fp)
1001048c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010490:	e0bff717 	ldw	r2,-36(fp)
}
10010494:	e037883a 	mov	sp,fp
10010498:	dfc00117 	ldw	ra,4(sp)
1001049c:	df000017 	ldw	fp,0(sp)
100104a0:	dec00204 	addi	sp,sp,8
100104a4:	f800283a 	ret

100104a8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100104a8:	defff804 	addi	sp,sp,-32
100104ac:	dfc00715 	stw	ra,28(sp)
100104b0:	df000615 	stw	fp,24(sp)
100104b4:	dc000515 	stw	r16,20(sp)
100104b8:	df000604 	addi	fp,sp,24
100104bc:	e13ffb15 	stw	r4,-20(fp)
100104c0:	e17ffc15 	stw	r5,-16(fp)
100104c4:	e1bffd15 	stw	r6,-12(fp)
100104c8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100104cc:	e1bffe17 	ldw	r6,-8(fp)
100104d0:	e17ffd17 	ldw	r5,-12(fp)
100104d4:	e13ffc17 	ldw	r4,-16(fp)
100104d8:	001074c0 	call	1001074c <open>
100104dc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100104e0:	e0bffa17 	ldw	r2,-24(fp)
100104e4:	10002216 	blt	r2,zero,10010570 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100104e8:	04040074 	movhi	r16,4097
100104ec:	84098d04 	addi	r16,r16,9780
100104f0:	e0bffa17 	ldw	r2,-24(fp)
100104f4:	01400304 	movi	r5,12
100104f8:	1009883a 	mov	r4,r2
100104fc:	00016040 	call	10001604 <__mulsi3>
10010500:	8085883a 	add	r2,r16,r2
10010504:	10c00017 	ldw	r3,0(r2)
10010508:	e0bffb17 	ldw	r2,-20(fp)
1001050c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10010510:	04040074 	movhi	r16,4097
10010514:	84098d04 	addi	r16,r16,9780
10010518:	e0bffa17 	ldw	r2,-24(fp)
1001051c:	01400304 	movi	r5,12
10010520:	1009883a 	mov	r4,r2
10010524:	00016040 	call	10001604 <__mulsi3>
10010528:	8085883a 	add	r2,r16,r2
1001052c:	10800104 	addi	r2,r2,4
10010530:	10c00017 	ldw	r3,0(r2)
10010534:	e0bffb17 	ldw	r2,-20(fp)
10010538:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1001053c:	04040074 	movhi	r16,4097
10010540:	84098d04 	addi	r16,r16,9780
10010544:	e0bffa17 	ldw	r2,-24(fp)
10010548:	01400304 	movi	r5,12
1001054c:	1009883a 	mov	r4,r2
10010550:	00016040 	call	10001604 <__mulsi3>
10010554:	8085883a 	add	r2,r16,r2
10010558:	10800204 	addi	r2,r2,8
1001055c:	10c00017 	ldw	r3,0(r2)
10010560:	e0bffb17 	ldw	r2,-20(fp)
10010564:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010568:	e13ffa17 	ldw	r4,-24(fp)
1001056c:	000f0ec0 	call	1000f0ec <alt_release_fd>
  }
} 
10010570:	0001883a 	nop
10010574:	e6ffff04 	addi	sp,fp,-4
10010578:	dfc00217 	ldw	ra,8(sp)
1001057c:	df000117 	ldw	fp,4(sp)
10010580:	dc000017 	ldw	r16,0(sp)
10010584:	dec00304 	addi	sp,sp,12
10010588:	f800283a 	ret

1001058c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1001058c:	defffb04 	addi	sp,sp,-20
10010590:	dfc00415 	stw	ra,16(sp)
10010594:	df000315 	stw	fp,12(sp)
10010598:	df000304 	addi	fp,sp,12
1001059c:	e13ffd15 	stw	r4,-12(fp)
100105a0:	e17ffe15 	stw	r5,-8(fp)
100105a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100105a8:	01c07fc4 	movi	r7,511
100105ac:	01800044 	movi	r6,1
100105b0:	e17ffd17 	ldw	r5,-12(fp)
100105b4:	01040074 	movhi	r4,4097
100105b8:	21099004 	addi	r4,r4,9792
100105bc:	00104a80 	call	100104a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100105c0:	01c07fc4 	movi	r7,511
100105c4:	000d883a 	mov	r6,zero
100105c8:	e17ffe17 	ldw	r5,-8(fp)
100105cc:	01040074 	movhi	r4,4097
100105d0:	21098d04 	addi	r4,r4,9780
100105d4:	00104a80 	call	100104a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100105d8:	01c07fc4 	movi	r7,511
100105dc:	01800044 	movi	r6,1
100105e0:	e17fff17 	ldw	r5,-4(fp)
100105e4:	01040074 	movhi	r4,4097
100105e8:	21099304 	addi	r4,r4,9804
100105ec:	00104a80 	call	100104a8 <alt_open_fd>
}  
100105f0:	0001883a 	nop
100105f4:	e037883a 	mov	sp,fp
100105f8:	dfc00117 	ldw	ra,4(sp)
100105fc:	df000017 	ldw	fp,0(sp)
10010600:	dec00204 	addi	sp,sp,8
10010604:	f800283a 	ret

10010608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010608:	defffe04 	addi	sp,sp,-8
1001060c:	dfc00115 	stw	ra,4(sp)
10010610:	df000015 	stw	fp,0(sp)
10010614:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010618:	00840074 	movhi	r2,4097
1001061c:	108e1004 	addi	r2,r2,14400
10010620:	10800017 	ldw	r2,0(r2)
10010624:	10000526 	beq	r2,zero,1001063c <alt_get_errno+0x34>
10010628:	00840074 	movhi	r2,4097
1001062c:	108e1004 	addi	r2,r2,14400
10010630:	10800017 	ldw	r2,0(r2)
10010634:	103ee83a 	callr	r2
10010638:	00000206 	br	10010644 <alt_get_errno+0x3c>
1001063c:	00840074 	movhi	r2,4097
10010640:	10951604 	addi	r2,r2,21592
}
10010644:	e037883a 	mov	sp,fp
10010648:	dfc00117 	ldw	ra,4(sp)
1001064c:	df000017 	ldw	fp,0(sp)
10010650:	dec00204 	addi	sp,sp,8
10010654:	f800283a 	ret

10010658 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010658:	defffb04 	addi	sp,sp,-20
1001065c:	dfc00415 	stw	ra,16(sp)
10010660:	df000315 	stw	fp,12(sp)
10010664:	dc000215 	stw	r16,8(sp)
10010668:	df000304 	addi	fp,sp,12
1001066c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010670:	e0bffe17 	ldw	r2,-8(fp)
10010674:	10800217 	ldw	r2,8(r2)
10010678:	10d00034 	orhi	r3,r2,16384
1001067c:	e0bffe17 	ldw	r2,-8(fp)
10010680:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010684:	e03ffd15 	stw	zero,-12(fp)
10010688:	00002306 	br	10010718 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1001068c:	04040074 	movhi	r16,4097
10010690:	84098d04 	addi	r16,r16,9780
10010694:	e0bffd17 	ldw	r2,-12(fp)
10010698:	01400304 	movi	r5,12
1001069c:	1009883a 	mov	r4,r2
100106a0:	00016040 	call	10001604 <__mulsi3>
100106a4:	8085883a 	add	r2,r16,r2
100106a8:	10c00017 	ldw	r3,0(r2)
100106ac:	e0bffe17 	ldw	r2,-8(fp)
100106b0:	10800017 	ldw	r2,0(r2)
100106b4:	1880151e 	bne	r3,r2,1001070c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100106b8:	04040074 	movhi	r16,4097
100106bc:	84098d04 	addi	r16,r16,9780
100106c0:	e0bffd17 	ldw	r2,-12(fp)
100106c4:	01400304 	movi	r5,12
100106c8:	1009883a 	mov	r4,r2
100106cc:	00016040 	call	10001604 <__mulsi3>
100106d0:	8085883a 	add	r2,r16,r2
100106d4:	10800204 	addi	r2,r2,8
100106d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100106dc:	10000b0e 	bge	r2,zero,1001070c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100106e0:	01400304 	movi	r5,12
100106e4:	e13ffd17 	ldw	r4,-12(fp)
100106e8:	00016040 	call	10001604 <__mulsi3>
100106ec:	1007883a 	mov	r3,r2
100106f0:	00840074 	movhi	r2,4097
100106f4:	10898d04 	addi	r2,r2,9780
100106f8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100106fc:	e0bffe17 	ldw	r2,-8(fp)
10010700:	18800226 	beq	r3,r2,1001070c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10010704:	00bffcc4 	movi	r2,-13
10010708:	00000a06 	br	10010734 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1001070c:	e0bffd17 	ldw	r2,-12(fp)
10010710:	10800044 	addi	r2,r2,1
10010714:	e0bffd15 	stw	r2,-12(fp)
10010718:	00840074 	movhi	r2,4097
1001071c:	108e0f04 	addi	r2,r2,14396
10010720:	10800017 	ldw	r2,0(r2)
10010724:	1007883a 	mov	r3,r2
10010728:	e0bffd17 	ldw	r2,-12(fp)
1001072c:	18bfd72e 	bgeu	r3,r2,1001068c <__alt_data_end+0xf801068c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010730:	0005883a 	mov	r2,zero
}
10010734:	e6ffff04 	addi	sp,fp,-4
10010738:	dfc00217 	ldw	ra,8(sp)
1001073c:	df000117 	ldw	fp,4(sp)
10010740:	dc000017 	ldw	r16,0(sp)
10010744:	dec00304 	addi	sp,sp,12
10010748:	f800283a 	ret

1001074c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1001074c:	defff604 	addi	sp,sp,-40
10010750:	dfc00915 	stw	ra,36(sp)
10010754:	df000815 	stw	fp,32(sp)
10010758:	df000804 	addi	fp,sp,32
1001075c:	e13ffd15 	stw	r4,-12(fp)
10010760:	e17ffe15 	stw	r5,-8(fp)
10010764:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10010768:	00bfffc4 	movi	r2,-1
1001076c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10010770:	00bffb44 	movi	r2,-19
10010774:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10010778:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1001077c:	01440074 	movhi	r5,4097
10010780:	294e0d04 	addi	r5,r5,14388
10010784:	e13ffd17 	ldw	r4,-12(fp)
10010788:	0010a740 	call	10010a74 <alt_find_dev>
1001078c:	e0bff815 	stw	r2,-32(fp)
10010790:	e0bff817 	ldw	r2,-32(fp)
10010794:	1000051e 	bne	r2,zero,100107ac <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10010798:	e13ffd17 	ldw	r4,-12(fp)
1001079c:	0010b040 	call	10010b04 <alt_find_file>
100107a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100107a4:	00800044 	movi	r2,1
100107a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100107ac:	e0bff817 	ldw	r2,-32(fp)
100107b0:	10002b26 	beq	r2,zero,10010860 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
100107b4:	e13ff817 	ldw	r4,-32(fp)
100107b8:	0010c180 	call	10010c18 <alt_get_fd>
100107bc:	e0bff915 	stw	r2,-28(fp)
100107c0:	e0bff917 	ldw	r2,-28(fp)
100107c4:	1000030e 	bge	r2,zero,100107d4 <open+0x88>
    {
      status = index;
100107c8:	e0bff917 	ldw	r2,-28(fp)
100107cc:	e0bffa15 	stw	r2,-24(fp)
100107d0:	00002506 	br	10010868 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
100107d4:	01400304 	movi	r5,12
100107d8:	e13ff917 	ldw	r4,-28(fp)
100107dc:	00016040 	call	10001604 <__mulsi3>
100107e0:	1007883a 	mov	r3,r2
100107e4:	00840074 	movhi	r2,4097
100107e8:	10898d04 	addi	r2,r2,9780
100107ec:	1885883a 	add	r2,r3,r2
100107f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100107f4:	e0fffe17 	ldw	r3,-8(fp)
100107f8:	00900034 	movhi	r2,16384
100107fc:	10bfffc4 	addi	r2,r2,-1
10010800:	1886703a 	and	r3,r3,r2
10010804:	e0bffc17 	ldw	r2,-16(fp)
10010808:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1001080c:	e0bffb17 	ldw	r2,-20(fp)
10010810:	1000051e 	bne	r2,zero,10010828 <open+0xdc>
10010814:	e13ffc17 	ldw	r4,-16(fp)
10010818:	00106580 	call	10010658 <alt_file_locked>
1001081c:	e0bffa15 	stw	r2,-24(fp)
10010820:	e0bffa17 	ldw	r2,-24(fp)
10010824:	10001016 	blt	r2,zero,10010868 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10010828:	e0bff817 	ldw	r2,-32(fp)
1001082c:	10800317 	ldw	r2,12(r2)
10010830:	10000826 	beq	r2,zero,10010854 <open+0x108>
10010834:	e0bff817 	ldw	r2,-32(fp)
10010838:	10800317 	ldw	r2,12(r2)
1001083c:	e1ffff17 	ldw	r7,-4(fp)
10010840:	e1bffe17 	ldw	r6,-8(fp)
10010844:	e17ffd17 	ldw	r5,-12(fp)
10010848:	e13ffc17 	ldw	r4,-16(fp)
1001084c:	103ee83a 	callr	r2
10010850:	00000106 	br	10010858 <open+0x10c>
10010854:	0005883a 	mov	r2,zero
10010858:	e0bffa15 	stw	r2,-24(fp)
1001085c:	00000206 	br	10010868 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10010860:	00bffb44 	movi	r2,-19
10010864:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10010868:	e0bffa17 	ldw	r2,-24(fp)
1001086c:	1000090e 	bge	r2,zero,10010894 <open+0x148>
  {
    alt_release_fd (index);  
10010870:	e13ff917 	ldw	r4,-28(fp)
10010874:	000f0ec0 	call	1000f0ec <alt_release_fd>
    ALT_ERRNO = -status;
10010878:	00106080 	call	10010608 <alt_get_errno>
1001087c:	1007883a 	mov	r3,r2
10010880:	e0bffa17 	ldw	r2,-24(fp)
10010884:	0085c83a 	sub	r2,zero,r2
10010888:	18800015 	stw	r2,0(r3)
    return -1;
1001088c:	00bfffc4 	movi	r2,-1
10010890:	00000106 	br	10010898 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10010894:	e0bff917 	ldw	r2,-28(fp)
}
10010898:	e037883a 	mov	sp,fp
1001089c:	dfc00117 	ldw	ra,4(sp)
100108a0:	df000017 	ldw	fp,0(sp)
100108a4:	dec00204 	addi	sp,sp,8
100108a8:	f800283a 	ret

100108ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100108ac:	defffa04 	addi	sp,sp,-24
100108b0:	df000515 	stw	fp,20(sp)
100108b4:	df000504 	addi	fp,sp,20
100108b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100108bc:	0005303a 	rdctl	r2,status
100108c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100108c4:	e0fffc17 	ldw	r3,-16(fp)
100108c8:	00bfff84 	movi	r2,-2
100108cc:	1884703a 	and	r2,r3,r2
100108d0:	1001703a 	wrctl	status,r2
  
  return context;
100108d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100108d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100108dc:	e0bfff17 	ldw	r2,-4(fp)
100108e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100108e4:	e0bffd17 	ldw	r2,-12(fp)
100108e8:	10800017 	ldw	r2,0(r2)
100108ec:	e0fffd17 	ldw	r3,-12(fp)
100108f0:	18c00117 	ldw	r3,4(r3)
100108f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100108f8:	e0bffd17 	ldw	r2,-12(fp)
100108fc:	10800117 	ldw	r2,4(r2)
10010900:	e0fffd17 	ldw	r3,-12(fp)
10010904:	18c00017 	ldw	r3,0(r3)
10010908:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1001090c:	e0bffd17 	ldw	r2,-12(fp)
10010910:	e0fffd17 	ldw	r3,-12(fp)
10010914:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10010918:	e0bffd17 	ldw	r2,-12(fp)
1001091c:	e0fffd17 	ldw	r3,-12(fp)
10010920:	10c00015 	stw	r3,0(r2)
10010924:	e0bffb17 	ldw	r2,-20(fp)
10010928:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001092c:	e0bffe17 	ldw	r2,-8(fp)
10010930:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10010934:	0001883a 	nop
10010938:	e037883a 	mov	sp,fp
1001093c:	df000017 	ldw	fp,0(sp)
10010940:	dec00104 	addi	sp,sp,4
10010944:	f800283a 	ret

10010948 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10010948:	defffb04 	addi	sp,sp,-20
1001094c:	dfc00415 	stw	ra,16(sp)
10010950:	df000315 	stw	fp,12(sp)
10010954:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010958:	d0a00e17 	ldw	r2,-32712(gp)
1001095c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10010960:	d0a71717 	ldw	r2,-25508(gp)
10010964:	10800044 	addi	r2,r2,1
10010968:	d0a71715 	stw	r2,-25508(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001096c:	00002e06 	br	10010a28 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10010970:	e0bffd17 	ldw	r2,-12(fp)
10010974:	10800017 	ldw	r2,0(r2)
10010978:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001097c:	e0bffd17 	ldw	r2,-12(fp)
10010980:	10800403 	ldbu	r2,16(r2)
10010984:	10803fcc 	andi	r2,r2,255
10010988:	10000426 	beq	r2,zero,1001099c <alt_tick+0x54>
1001098c:	d0a71717 	ldw	r2,-25508(gp)
10010990:	1000021e 	bne	r2,zero,1001099c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10010994:	e0bffd17 	ldw	r2,-12(fp)
10010998:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001099c:	e0bffd17 	ldw	r2,-12(fp)
100109a0:	10800217 	ldw	r2,8(r2)
100109a4:	d0e71717 	ldw	r3,-25508(gp)
100109a8:	18801d36 	bltu	r3,r2,10010a20 <alt_tick+0xd8>
100109ac:	e0bffd17 	ldw	r2,-12(fp)
100109b0:	10800403 	ldbu	r2,16(r2)
100109b4:	10803fcc 	andi	r2,r2,255
100109b8:	1000191e 	bne	r2,zero,10010a20 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100109bc:	e0bffd17 	ldw	r2,-12(fp)
100109c0:	10800317 	ldw	r2,12(r2)
100109c4:	e0fffd17 	ldw	r3,-12(fp)
100109c8:	18c00517 	ldw	r3,20(r3)
100109cc:	1809883a 	mov	r4,r3
100109d0:	103ee83a 	callr	r2
100109d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100109d8:	e0bfff17 	ldw	r2,-4(fp)
100109dc:	1000031e 	bne	r2,zero,100109ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100109e0:	e13ffd17 	ldw	r4,-12(fp)
100109e4:	00108ac0 	call	100108ac <alt_alarm_stop>
100109e8:	00000d06 	br	10010a20 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100109ec:	e0bffd17 	ldw	r2,-12(fp)
100109f0:	10c00217 	ldw	r3,8(r2)
100109f4:	e0bfff17 	ldw	r2,-4(fp)
100109f8:	1887883a 	add	r3,r3,r2
100109fc:	e0bffd17 	ldw	r2,-12(fp)
10010a00:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10010a04:	e0bffd17 	ldw	r2,-12(fp)
10010a08:	10c00217 	ldw	r3,8(r2)
10010a0c:	d0a71717 	ldw	r2,-25508(gp)
10010a10:	1880032e 	bgeu	r3,r2,10010a20 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10010a14:	e0bffd17 	ldw	r2,-12(fp)
10010a18:	00c00044 	movi	r3,1
10010a1c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10010a20:	e0bffe17 	ldw	r2,-8(fp)
10010a24:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010a28:	e0fffd17 	ldw	r3,-12(fp)
10010a2c:	d0a00e04 	addi	r2,gp,-32712
10010a30:	18bfcf1e 	bne	r3,r2,10010970 <__alt_data_end+0xf8010970>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10010a34:	0001883a 	nop
}
10010a38:	0001883a 	nop
10010a3c:	e037883a 	mov	sp,fp
10010a40:	dfc00117 	ldw	ra,4(sp)
10010a44:	df000017 	ldw	fp,0(sp)
10010a48:	dec00204 	addi	sp,sp,8
10010a4c:	f800283a 	ret

10010a50 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10010a50:	deffff04 	addi	sp,sp,-4
10010a54:	df000015 	stw	fp,0(sp)
10010a58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10010a5c:	000170fa 	wrctl	ienable,zero
}
10010a60:	0001883a 	nop
10010a64:	e037883a 	mov	sp,fp
10010a68:	df000017 	ldw	fp,0(sp)
10010a6c:	dec00104 	addi	sp,sp,4
10010a70:	f800283a 	ret

10010a74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10010a74:	defffa04 	addi	sp,sp,-24
10010a78:	dfc00515 	stw	ra,20(sp)
10010a7c:	df000415 	stw	fp,16(sp)
10010a80:	df000404 	addi	fp,sp,16
10010a84:	e13ffe15 	stw	r4,-8(fp)
10010a88:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10010a8c:	e0bfff17 	ldw	r2,-4(fp)
10010a90:	10800017 	ldw	r2,0(r2)
10010a94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10010a98:	e13ffe17 	ldw	r4,-8(fp)
10010a9c:	00086ec0 	call	100086ec <strlen>
10010aa0:	10800044 	addi	r2,r2,1
10010aa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010aa8:	00000d06 	br	10010ae0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10010aac:	e0bffc17 	ldw	r2,-16(fp)
10010ab0:	10800217 	ldw	r2,8(r2)
10010ab4:	e0fffd17 	ldw	r3,-12(fp)
10010ab8:	180d883a 	mov	r6,r3
10010abc:	e17ffe17 	ldw	r5,-8(fp)
10010ac0:	1009883a 	mov	r4,r2
10010ac4:	0010dd40 	call	10010dd4 <memcmp>
10010ac8:	1000021e 	bne	r2,zero,10010ad4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10010acc:	e0bffc17 	ldw	r2,-16(fp)
10010ad0:	00000706 	br	10010af0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10010ad4:	e0bffc17 	ldw	r2,-16(fp)
10010ad8:	10800017 	ldw	r2,0(r2)
10010adc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010ae0:	e0fffc17 	ldw	r3,-16(fp)
10010ae4:	e0bfff17 	ldw	r2,-4(fp)
10010ae8:	18bff01e 	bne	r3,r2,10010aac <__alt_data_end+0xf8010aac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10010aec:	0005883a 	mov	r2,zero
}
10010af0:	e037883a 	mov	sp,fp
10010af4:	dfc00117 	ldw	ra,4(sp)
10010af8:	df000017 	ldw	fp,0(sp)
10010afc:	dec00204 	addi	sp,sp,8
10010b00:	f800283a 	ret

10010b04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10010b04:	defffb04 	addi	sp,sp,-20
10010b08:	dfc00415 	stw	ra,16(sp)
10010b0c:	df000315 	stw	fp,12(sp)
10010b10:	df000304 	addi	fp,sp,12
10010b14:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10010b18:	00840074 	movhi	r2,4097
10010b1c:	108e0b04 	addi	r2,r2,14380
10010b20:	10800017 	ldw	r2,0(r2)
10010b24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010b28:	00003106 	br	10010bf0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10010b2c:	e0bffd17 	ldw	r2,-12(fp)
10010b30:	10800217 	ldw	r2,8(r2)
10010b34:	1009883a 	mov	r4,r2
10010b38:	00086ec0 	call	100086ec <strlen>
10010b3c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10010b40:	e0bffd17 	ldw	r2,-12(fp)
10010b44:	10c00217 	ldw	r3,8(r2)
10010b48:	e0bffe17 	ldw	r2,-8(fp)
10010b4c:	10bfffc4 	addi	r2,r2,-1
10010b50:	1885883a 	add	r2,r3,r2
10010b54:	10800003 	ldbu	r2,0(r2)
10010b58:	10803fcc 	andi	r2,r2,255
10010b5c:	1080201c 	xori	r2,r2,128
10010b60:	10bfe004 	addi	r2,r2,-128
10010b64:	10800bd8 	cmpnei	r2,r2,47
10010b68:	1000031e 	bne	r2,zero,10010b78 <alt_find_file+0x74>
    {
      len -= 1;
10010b6c:	e0bffe17 	ldw	r2,-8(fp)
10010b70:	10bfffc4 	addi	r2,r2,-1
10010b74:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010b78:	e0bffe17 	ldw	r2,-8(fp)
10010b7c:	e0ffff17 	ldw	r3,-4(fp)
10010b80:	1885883a 	add	r2,r3,r2
10010b84:	10800003 	ldbu	r2,0(r2)
10010b88:	10803fcc 	andi	r2,r2,255
10010b8c:	1080201c 	xori	r2,r2,128
10010b90:	10bfe004 	addi	r2,r2,-128
10010b94:	10800be0 	cmpeqi	r2,r2,47
10010b98:	1000081e 	bne	r2,zero,10010bbc <alt_find_file+0xb8>
10010b9c:	e0bffe17 	ldw	r2,-8(fp)
10010ba0:	e0ffff17 	ldw	r3,-4(fp)
10010ba4:	1885883a 	add	r2,r3,r2
10010ba8:	10800003 	ldbu	r2,0(r2)
10010bac:	10803fcc 	andi	r2,r2,255
10010bb0:	1080201c 	xori	r2,r2,128
10010bb4:	10bfe004 	addi	r2,r2,-128
10010bb8:	10000a1e 	bne	r2,zero,10010be4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10010bbc:	e0bffd17 	ldw	r2,-12(fp)
10010bc0:	10800217 	ldw	r2,8(r2)
10010bc4:	e0fffe17 	ldw	r3,-8(fp)
10010bc8:	180d883a 	mov	r6,r3
10010bcc:	e17fff17 	ldw	r5,-4(fp)
10010bd0:	1009883a 	mov	r4,r2
10010bd4:	0010dd40 	call	10010dd4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010bd8:	1000021e 	bne	r2,zero,10010be4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10010bdc:	e0bffd17 	ldw	r2,-12(fp)
10010be0:	00000806 	br	10010c04 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10010be4:	e0bffd17 	ldw	r2,-12(fp)
10010be8:	10800017 	ldw	r2,0(r2)
10010bec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010bf0:	e0fffd17 	ldw	r3,-12(fp)
10010bf4:	00840074 	movhi	r2,4097
10010bf8:	108e0b04 	addi	r2,r2,14380
10010bfc:	18bfcb1e 	bne	r3,r2,10010b2c <__alt_data_end+0xf8010b2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10010c00:	0005883a 	mov	r2,zero
}
10010c04:	e037883a 	mov	sp,fp
10010c08:	dfc00117 	ldw	ra,4(sp)
10010c0c:	df000017 	ldw	fp,0(sp)
10010c10:	dec00204 	addi	sp,sp,8
10010c14:	f800283a 	ret

10010c18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10010c18:	defffa04 	addi	sp,sp,-24
10010c1c:	dfc00515 	stw	ra,20(sp)
10010c20:	df000415 	stw	fp,16(sp)
10010c24:	dc000315 	stw	r16,12(sp)
10010c28:	df000404 	addi	fp,sp,16
10010c2c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10010c30:	00bffa04 	movi	r2,-24
10010c34:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010c38:	e03ffc15 	stw	zero,-16(fp)
10010c3c:	00002106 	br	10010cc4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10010c40:	04040074 	movhi	r16,4097
10010c44:	84098d04 	addi	r16,r16,9780
10010c48:	e0bffc17 	ldw	r2,-16(fp)
10010c4c:	01400304 	movi	r5,12
10010c50:	1009883a 	mov	r4,r2
10010c54:	00016040 	call	10001604 <__mulsi3>
10010c58:	8085883a 	add	r2,r16,r2
10010c5c:	10800017 	ldw	r2,0(r2)
10010c60:	1000151e 	bne	r2,zero,10010cb8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10010c64:	04040074 	movhi	r16,4097
10010c68:	84098d04 	addi	r16,r16,9780
10010c6c:	e0bffc17 	ldw	r2,-16(fp)
10010c70:	01400304 	movi	r5,12
10010c74:	1009883a 	mov	r4,r2
10010c78:	00016040 	call	10001604 <__mulsi3>
10010c7c:	8085883a 	add	r2,r16,r2
10010c80:	e0fffe17 	ldw	r3,-8(fp)
10010c84:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10010c88:	00840074 	movhi	r2,4097
10010c8c:	108e0f04 	addi	r2,r2,14396
10010c90:	10c00017 	ldw	r3,0(r2)
10010c94:	e0bffc17 	ldw	r2,-16(fp)
10010c98:	1880040e 	bge	r3,r2,10010cac <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10010c9c:	00840074 	movhi	r2,4097
10010ca0:	108e0f04 	addi	r2,r2,14396
10010ca4:	e0fffc17 	ldw	r3,-16(fp)
10010ca8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10010cac:	e0bffc17 	ldw	r2,-16(fp)
10010cb0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10010cb4:	00000606 	br	10010cd0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010cb8:	e0bffc17 	ldw	r2,-16(fp)
10010cbc:	10800044 	addi	r2,r2,1
10010cc0:	e0bffc15 	stw	r2,-16(fp)
10010cc4:	e0bffc17 	ldw	r2,-16(fp)
10010cc8:	10800810 	cmplti	r2,r2,32
10010ccc:	103fdc1e 	bne	r2,zero,10010c40 <__alt_data_end+0xf8010c40>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10010cd0:	e0bffd17 	ldw	r2,-12(fp)
}
10010cd4:	e6ffff04 	addi	sp,fp,-4
10010cd8:	dfc00217 	ldw	ra,8(sp)
10010cdc:	df000117 	ldw	fp,4(sp)
10010ce0:	dc000017 	ldw	r16,0(sp)
10010ce4:	dec00304 	addi	sp,sp,12
10010ce8:	f800283a 	ret

10010cec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10010cec:	defffe04 	addi	sp,sp,-8
10010cf0:	df000115 	stw	fp,4(sp)
10010cf4:	df000104 	addi	fp,sp,4
10010cf8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10010cfc:	e0bfff17 	ldw	r2,-4(fp)
10010d00:	10bffe84 	addi	r2,r2,-6
10010d04:	10c00428 	cmpgeui	r3,r2,16
10010d08:	18001a1e 	bne	r3,zero,10010d74 <alt_exception_cause_generated_bad_addr+0x88>
10010d0c:	100690ba 	slli	r3,r2,2
10010d10:	00840074 	movhi	r2,4097
10010d14:	10834904 	addi	r2,r2,3364
10010d18:	1885883a 	add	r2,r3,r2
10010d1c:	10800017 	ldw	r2,0(r2)
10010d20:	1000683a 	jmp	r2
10010d24:	10010d64 	muli	zero,r2,1077
10010d28:	10010d64 	muli	zero,r2,1077
10010d2c:	10010d74 	orhi	zero,r2,1077
10010d30:	10010d74 	orhi	zero,r2,1077
10010d34:	10010d74 	orhi	zero,r2,1077
10010d38:	10010d64 	muli	zero,r2,1077
10010d3c:	10010d6c 	andhi	zero,r2,1077
10010d40:	10010d74 	orhi	zero,r2,1077
10010d44:	10010d64 	muli	zero,r2,1077
10010d48:	10010d64 	muli	zero,r2,1077
10010d4c:	10010d74 	orhi	zero,r2,1077
10010d50:	10010d64 	muli	zero,r2,1077
10010d54:	10010d6c 	andhi	zero,r2,1077
10010d58:	10010d74 	orhi	zero,r2,1077
10010d5c:	10010d74 	orhi	zero,r2,1077
10010d60:	10010d64 	muli	zero,r2,1077
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10010d64:	00800044 	movi	r2,1
10010d68:	00000306 	br	10010d78 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10010d6c:	0005883a 	mov	r2,zero
10010d70:	00000106 	br	10010d78 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10010d74:	0005883a 	mov	r2,zero
  }
}
10010d78:	e037883a 	mov	sp,fp
10010d7c:	df000017 	ldw	fp,0(sp)
10010d80:	dec00104 	addi	sp,sp,4
10010d84:	f800283a 	ret

10010d88 <atexit>:
10010d88:	200b883a 	mov	r5,r4
10010d8c:	000f883a 	mov	r7,zero
10010d90:	000d883a 	mov	r6,zero
10010d94:	0009883a 	mov	r4,zero
10010d98:	0010e501 	jmpi	10010e50 <__register_exitproc>

10010d9c <exit>:
10010d9c:	defffe04 	addi	sp,sp,-8
10010da0:	000b883a 	mov	r5,zero
10010da4:	dc000015 	stw	r16,0(sp)
10010da8:	dfc00115 	stw	ra,4(sp)
10010dac:	2021883a 	mov	r16,r4
10010db0:	0010f680 	call	10010f68 <__call_exitprocs>
10010db4:	00840074 	movhi	r2,4097
10010db8:	108e0504 	addi	r2,r2,14356
10010dbc:	11000017 	ldw	r4,0(r2)
10010dc0:	20800f17 	ldw	r2,60(r4)
10010dc4:	10000126 	beq	r2,zero,10010dcc <exit+0x30>
10010dc8:	103ee83a 	callr	r2
10010dcc:	8009883a 	mov	r4,r16
10010dd0:	00110e80 	call	100110e8 <_exit>

10010dd4 <memcmp>:
10010dd4:	01c000c4 	movi	r7,3
10010dd8:	3980192e 	bgeu	r7,r6,10010e40 <memcmp+0x6c>
10010ddc:	2144b03a 	or	r2,r4,r5
10010de0:	11c4703a 	and	r2,r2,r7
10010de4:	10000f26 	beq	r2,zero,10010e24 <memcmp+0x50>
10010de8:	20800003 	ldbu	r2,0(r4)
10010dec:	28c00003 	ldbu	r3,0(r5)
10010df0:	10c0151e 	bne	r2,r3,10010e48 <memcmp+0x74>
10010df4:	31bfff84 	addi	r6,r6,-2
10010df8:	01ffffc4 	movi	r7,-1
10010dfc:	00000406 	br	10010e10 <memcmp+0x3c>
10010e00:	20800003 	ldbu	r2,0(r4)
10010e04:	28c00003 	ldbu	r3,0(r5)
10010e08:	31bfffc4 	addi	r6,r6,-1
10010e0c:	10c00e1e 	bne	r2,r3,10010e48 <memcmp+0x74>
10010e10:	21000044 	addi	r4,r4,1
10010e14:	29400044 	addi	r5,r5,1
10010e18:	31fff91e 	bne	r6,r7,10010e00 <__alt_data_end+0xf8010e00>
10010e1c:	0005883a 	mov	r2,zero
10010e20:	f800283a 	ret
10010e24:	20c00017 	ldw	r3,0(r4)
10010e28:	28800017 	ldw	r2,0(r5)
10010e2c:	18bfee1e 	bne	r3,r2,10010de8 <__alt_data_end+0xf8010de8>
10010e30:	31bfff04 	addi	r6,r6,-4
10010e34:	21000104 	addi	r4,r4,4
10010e38:	29400104 	addi	r5,r5,4
10010e3c:	39bff936 	bltu	r7,r6,10010e24 <__alt_data_end+0xf8010e24>
10010e40:	303fe91e 	bne	r6,zero,10010de8 <__alt_data_end+0xf8010de8>
10010e44:	003ff506 	br	10010e1c <__alt_data_end+0xf8010e1c>
10010e48:	10c5c83a 	sub	r2,r2,r3
10010e4c:	f800283a 	ret

10010e50 <__register_exitproc>:
10010e50:	defffa04 	addi	sp,sp,-24
10010e54:	dc000315 	stw	r16,12(sp)
10010e58:	04040074 	movhi	r16,4097
10010e5c:	840e0504 	addi	r16,r16,14356
10010e60:	80c00017 	ldw	r3,0(r16)
10010e64:	dc400415 	stw	r17,16(sp)
10010e68:	dfc00515 	stw	ra,20(sp)
10010e6c:	18805217 	ldw	r2,328(r3)
10010e70:	2023883a 	mov	r17,r4
10010e74:	10003726 	beq	r2,zero,10010f54 <__register_exitproc+0x104>
10010e78:	10c00117 	ldw	r3,4(r2)
10010e7c:	010007c4 	movi	r4,31
10010e80:	20c00e16 	blt	r4,r3,10010ebc <__register_exitproc+0x6c>
10010e84:	1a000044 	addi	r8,r3,1
10010e88:	8800221e 	bne	r17,zero,10010f14 <__register_exitproc+0xc4>
10010e8c:	18c00084 	addi	r3,r3,2
10010e90:	18c7883a 	add	r3,r3,r3
10010e94:	18c7883a 	add	r3,r3,r3
10010e98:	12000115 	stw	r8,4(r2)
10010e9c:	10c7883a 	add	r3,r2,r3
10010ea0:	19400015 	stw	r5,0(r3)
10010ea4:	0005883a 	mov	r2,zero
10010ea8:	dfc00517 	ldw	ra,20(sp)
10010eac:	dc400417 	ldw	r17,16(sp)
10010eb0:	dc000317 	ldw	r16,12(sp)
10010eb4:	dec00604 	addi	sp,sp,24
10010eb8:	f800283a 	ret
10010ebc:	00800034 	movhi	r2,0
10010ec0:	10800004 	addi	r2,r2,0
10010ec4:	10002626 	beq	r2,zero,10010f60 <__register_exitproc+0x110>
10010ec8:	01006404 	movi	r4,400
10010ecc:	d9400015 	stw	r5,0(sp)
10010ed0:	d9800115 	stw	r6,4(sp)
10010ed4:	d9c00215 	stw	r7,8(sp)
10010ed8:	00000000 	call	10000000 <__reset>
10010edc:	d9400017 	ldw	r5,0(sp)
10010ee0:	d9800117 	ldw	r6,4(sp)
10010ee4:	d9c00217 	ldw	r7,8(sp)
10010ee8:	10001d26 	beq	r2,zero,10010f60 <__register_exitproc+0x110>
10010eec:	81000017 	ldw	r4,0(r16)
10010ef0:	10000115 	stw	zero,4(r2)
10010ef4:	02000044 	movi	r8,1
10010ef8:	22405217 	ldw	r9,328(r4)
10010efc:	0007883a 	mov	r3,zero
10010f00:	12400015 	stw	r9,0(r2)
10010f04:	20805215 	stw	r2,328(r4)
10010f08:	10006215 	stw	zero,392(r2)
10010f0c:	10006315 	stw	zero,396(r2)
10010f10:	883fde26 	beq	r17,zero,10010e8c <__alt_data_end+0xf8010e8c>
10010f14:	18c9883a 	add	r4,r3,r3
10010f18:	2109883a 	add	r4,r4,r4
10010f1c:	1109883a 	add	r4,r2,r4
10010f20:	21802215 	stw	r6,136(r4)
10010f24:	01800044 	movi	r6,1
10010f28:	12406217 	ldw	r9,392(r2)
10010f2c:	30cc983a 	sll	r6,r6,r3
10010f30:	4992b03a 	or	r9,r9,r6
10010f34:	12406215 	stw	r9,392(r2)
10010f38:	21c04215 	stw	r7,264(r4)
10010f3c:	01000084 	movi	r4,2
10010f40:	893fd21e 	bne	r17,r4,10010e8c <__alt_data_end+0xf8010e8c>
10010f44:	11006317 	ldw	r4,396(r2)
10010f48:	218cb03a 	or	r6,r4,r6
10010f4c:	11806315 	stw	r6,396(r2)
10010f50:	003fce06 	br	10010e8c <__alt_data_end+0xf8010e8c>
10010f54:	18805304 	addi	r2,r3,332
10010f58:	18805215 	stw	r2,328(r3)
10010f5c:	003fc606 	br	10010e78 <__alt_data_end+0xf8010e78>
10010f60:	00bfffc4 	movi	r2,-1
10010f64:	003fd006 	br	10010ea8 <__alt_data_end+0xf8010ea8>

10010f68 <__call_exitprocs>:
10010f68:	defff504 	addi	sp,sp,-44
10010f6c:	df000915 	stw	fp,36(sp)
10010f70:	dd400615 	stw	r21,24(sp)
10010f74:	dc800315 	stw	r18,12(sp)
10010f78:	dfc00a15 	stw	ra,40(sp)
10010f7c:	ddc00815 	stw	r23,32(sp)
10010f80:	dd800715 	stw	r22,28(sp)
10010f84:	dd000515 	stw	r20,20(sp)
10010f88:	dcc00415 	stw	r19,16(sp)
10010f8c:	dc400215 	stw	r17,8(sp)
10010f90:	dc000115 	stw	r16,4(sp)
10010f94:	d9000015 	stw	r4,0(sp)
10010f98:	2839883a 	mov	fp,r5
10010f9c:	04800044 	movi	r18,1
10010fa0:	057fffc4 	movi	r21,-1
10010fa4:	00840074 	movhi	r2,4097
10010fa8:	108e0504 	addi	r2,r2,14356
10010fac:	12000017 	ldw	r8,0(r2)
10010fb0:	45005217 	ldw	r20,328(r8)
10010fb4:	44c05204 	addi	r19,r8,328
10010fb8:	a0001c26 	beq	r20,zero,1001102c <__call_exitprocs+0xc4>
10010fbc:	a0800117 	ldw	r2,4(r20)
10010fc0:	15ffffc4 	addi	r23,r2,-1
10010fc4:	b8000d16 	blt	r23,zero,10010ffc <__call_exitprocs+0x94>
10010fc8:	14000044 	addi	r16,r2,1
10010fcc:	8421883a 	add	r16,r16,r16
10010fd0:	8421883a 	add	r16,r16,r16
10010fd4:	84402004 	addi	r17,r16,128
10010fd8:	a463883a 	add	r17,r20,r17
10010fdc:	a421883a 	add	r16,r20,r16
10010fe0:	e0001e26 	beq	fp,zero,1001105c <__call_exitprocs+0xf4>
10010fe4:	80804017 	ldw	r2,256(r16)
10010fe8:	e0801c26 	beq	fp,r2,1001105c <__call_exitprocs+0xf4>
10010fec:	bdffffc4 	addi	r23,r23,-1
10010ff0:	843fff04 	addi	r16,r16,-4
10010ff4:	8c7fff04 	addi	r17,r17,-4
10010ff8:	bd7ff91e 	bne	r23,r21,10010fe0 <__alt_data_end+0xf8010fe0>
10010ffc:	00800034 	movhi	r2,0
10011000:	10800004 	addi	r2,r2,0
10011004:	10000926 	beq	r2,zero,1001102c <__call_exitprocs+0xc4>
10011008:	a0800117 	ldw	r2,4(r20)
1001100c:	1000301e 	bne	r2,zero,100110d0 <__call_exitprocs+0x168>
10011010:	a0800017 	ldw	r2,0(r20)
10011014:	10003226 	beq	r2,zero,100110e0 <__call_exitprocs+0x178>
10011018:	a009883a 	mov	r4,r20
1001101c:	98800015 	stw	r2,0(r19)
10011020:	00000000 	call	10000000 <__reset>
10011024:	9d000017 	ldw	r20,0(r19)
10011028:	a03fe41e 	bne	r20,zero,10010fbc <__alt_data_end+0xf8010fbc>
1001102c:	dfc00a17 	ldw	ra,40(sp)
10011030:	df000917 	ldw	fp,36(sp)
10011034:	ddc00817 	ldw	r23,32(sp)
10011038:	dd800717 	ldw	r22,28(sp)
1001103c:	dd400617 	ldw	r21,24(sp)
10011040:	dd000517 	ldw	r20,20(sp)
10011044:	dcc00417 	ldw	r19,16(sp)
10011048:	dc800317 	ldw	r18,12(sp)
1001104c:	dc400217 	ldw	r17,8(sp)
10011050:	dc000117 	ldw	r16,4(sp)
10011054:	dec00b04 	addi	sp,sp,44
10011058:	f800283a 	ret
1001105c:	a0800117 	ldw	r2,4(r20)
10011060:	80c00017 	ldw	r3,0(r16)
10011064:	10bfffc4 	addi	r2,r2,-1
10011068:	15c01426 	beq	r2,r23,100110bc <__call_exitprocs+0x154>
1001106c:	80000015 	stw	zero,0(r16)
10011070:	183fde26 	beq	r3,zero,10010fec <__alt_data_end+0xf8010fec>
10011074:	95c8983a 	sll	r4,r18,r23
10011078:	a0806217 	ldw	r2,392(r20)
1001107c:	a5800117 	ldw	r22,4(r20)
10011080:	2084703a 	and	r2,r4,r2
10011084:	10000b26 	beq	r2,zero,100110b4 <__call_exitprocs+0x14c>
10011088:	a0806317 	ldw	r2,396(r20)
1001108c:	2088703a 	and	r4,r4,r2
10011090:	20000c1e 	bne	r4,zero,100110c4 <__call_exitprocs+0x15c>
10011094:	89400017 	ldw	r5,0(r17)
10011098:	d9000017 	ldw	r4,0(sp)
1001109c:	183ee83a 	callr	r3
100110a0:	a0800117 	ldw	r2,4(r20)
100110a4:	15bfbf1e 	bne	r2,r22,10010fa4 <__alt_data_end+0xf8010fa4>
100110a8:	98800017 	ldw	r2,0(r19)
100110ac:	153fcf26 	beq	r2,r20,10010fec <__alt_data_end+0xf8010fec>
100110b0:	003fbc06 	br	10010fa4 <__alt_data_end+0xf8010fa4>
100110b4:	183ee83a 	callr	r3
100110b8:	003ff906 	br	100110a0 <__alt_data_end+0xf80110a0>
100110bc:	a5c00115 	stw	r23,4(r20)
100110c0:	003feb06 	br	10011070 <__alt_data_end+0xf8011070>
100110c4:	89000017 	ldw	r4,0(r17)
100110c8:	183ee83a 	callr	r3
100110cc:	003ff406 	br	100110a0 <__alt_data_end+0xf80110a0>
100110d0:	a0800017 	ldw	r2,0(r20)
100110d4:	a027883a 	mov	r19,r20
100110d8:	1029883a 	mov	r20,r2
100110dc:	003fb606 	br	10010fb8 <__alt_data_end+0xf8010fb8>
100110e0:	0005883a 	mov	r2,zero
100110e4:	003ffb06 	br	100110d4 <__alt_data_end+0xf80110d4>

100110e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100110e8:	defffd04 	addi	sp,sp,-12
100110ec:	df000215 	stw	fp,8(sp)
100110f0:	df000204 	addi	fp,sp,8
100110f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100110f8:	0001883a 	nop
100110fc:	e0bfff17 	ldw	r2,-4(fp)
10011100:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011104:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011108:	10000226 	beq	r2,zero,10011114 <_exit+0x2c>
    ALT_SIM_FAIL();
1001110c:	002af070 	cmpltui	zero,zero,43969
10011110:	00000106 	br	10011118 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011114:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011118:	003fff06 	br	10011118 <__alt_data_end+0xf8011118>
