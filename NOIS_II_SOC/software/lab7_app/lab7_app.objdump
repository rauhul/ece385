
lab7_app.elf:     file format elf32-littlenios2
lab7_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000020

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000008f4 memsz 0x000008f4 flags r-x
    LOAD off    0x00001914 vaddr 0x10000914 paddr 0x10000f00 align 2**12
         filesz 0x000005ec memsz 0x000005ec flags rw-
    LOAD off    0x000024ec vaddr 0x100014ec paddr 0x100014ec align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  10000020  10000020  00001f00  2**0
                  CONTENTS
  2 .text         000008e4  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  10000904  10000904  00001904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  10000914  10000f00  00001914  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  100014ec  100014ec  000024ec  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00001f00  2**0
                  CONTENTS
  7 .sdram        00000000  100014fc  100014fc  00001f00  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002b0  00000000  00000000  00001f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000039fc  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000118d  00000000  00000000  00005bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001214  00000000  00000000  00006d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000040c  00000000  00000000  00007f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000ee2  00000000  00000000  00008384  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000430  00000000  00000000  00009266  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00009698  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000080  00000000  00000000  000096a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000a8e6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000a8e9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000a8f5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000a8f6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0000a8f7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000a8fb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0000a8ff  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0000a903  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0000a907  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0000a90b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0000a90f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000025  00000000  00000000  0000a917  2**0
                  CONTENTS, READONLY
 30 .jdi          00003db5  00000000  00000000  0000a93c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00053568  00000000  00000000  0000e6f1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000020 l    d  .text	00000000 .text
10000904 l    d  .rodata	00000000 .rodata
10000914 l    d  .rwdata	00000000 .rwdata
100014ec l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100014fc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab7_app_bsp//obj/HAL/src/crt0.o
10000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
10000120 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
100002c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10000410 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
10000abc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000020c g     F .text	00000060 alt_main
10000f00 g       *ABS*	00000000 __flash_rwdata_start
100005a0 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100014f8 g     O .bss	00000004 errno
100014f0 g     O .bss	00000004 alt_argv
10008ee0 g       *ABS*	00000000 _gp
1000093c g     O .rwdata	00000180 alt_fd_list
10000904 g       *ABS*	00000000 __DTOR_END__
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10000ef0 g     O .rwdata	00000004 alt_max_fd
10000ef8 g     O .rwdata	00000004 _global_impure_ptr
100014fc g       *ABS*	00000000 __bss_end
10000914 g     O .rwdata	00000028 alt_dev_null
100003f0 g     F .text	00000020 alt_dcache_flush_all
10000f00 g       *ABS*	00000000 __ram_rwdata_end
10000ee8 g     O .rwdata	00000008 alt_dev_list
10000914 g       *ABS*	00000000 __ram_rodata_end
100014fc g       *ABS*	00000000 end
10000904 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10000728 g     F .text	00000180 __call_exitprocs
10000020 g     F .text	0000003c _start
100002a4 g     F .text	00000024 alt_sys_init
10000610 g     F .text	00000118 __register_exitproc
100008a8 g     F .text	00000028 .hidden __mulsi3
10000914 g       *ABS*	00000000 __ram_rwdata_start
10000904 g       *ABS*	00000000 __ram_rodata_start
100014fc g       *ABS*	00000000 __alt_stack_base
100014ec g       *ABS*	00000000 __bss_start
1000005c g     F .text	000000c4 main
100014f4 g     O .bss	00000004 alt_envp
10000ef4 g     O .rwdata	00000004 alt_errno
10000904 g       *ABS*	00000000 __CTOR_END__
10000904 g       *ABS*	00000000 __flash_rodata_start
10000904 g       *ABS*	00000000 __DTOR_LIST__
1000026c g     F .text	00000038 alt_irq_init
1000051c g     F .text	00000084 alt_release_fd
100005c4 g     F .text	00000014 atexit
10000efc g     O .rwdata	00000004 _impure_ptr
100014ec g     O .bss	00000004 alt_argc
1000049c g     F .text	00000060 _do_dtors
10000ee0 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10000f00 g       *ABS*	00000000 _edata
100014fc g       *ABS*	00000000 _end
10000020 g       *ABS*	00000000 __ram_exceptions_end
100005d8 g     F .text	00000038 exit
18000000 g       *ABS*	00000000 __alt_data_end
10000000 g       *ABS*	00000000 __alt_mem_sdram
100008d0 g     F .text	00000034 _exit
100004fc g     F .text	00000020 alt_icache_flush_all
1000043c g     F .text	00000060 _do_ctors
10000318 g     F .text	000000d8 close
10000188 g     F .text	00000084 alt_load



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08400814 	ori	at,at,32
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .text:

10000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000020:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000028:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
1000002c:	d6a3b814 	ori	gp,gp,36576
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000030:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000034:	10853b14 	ori	r2,r2,5356

    movhi r3, %hi(__bss_end)
10000038:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
1000003c:	18c53f14 	ori	r3,r3,5372

    beq r2, r3, 1f
10000040:	10c00326 	beq	r2,r3,10000050 <_start+0x30>

0:
    stw zero, (r2)
10000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000004c:	10fffd36 	bltu	r2,r3,10000044 <__alt_data_end+0xf8000044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000050:	00001880 	call	10000188 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000054:	000020c0 	call	1000020c <alt_main>

10000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000058:	003fff06 	br	10000058 <__alt_data_end+0xf8000058>

1000005c <main>:
#define KEY_0 (*KEY_PIO & 0b00000001)
#define KEY_1 (*KEY_PIO & 0b00000010)
#define KEY_2 (*KEY_PIO & 0b00000100)
#define KEY_3 (*KEY_PIO & 0b00001000)

int main() {
1000005c:	defffb04 	addi	sp,sp,-20
10000060:	df000415 	stw	fp,16(sp)
10000064:	df000404 	addi	fp,sp,16
	volatile unsigned int *LED_PIO = (unsigned int*)0x20; //make a pointer to access the LED PIO block
10000068:	00800804 	movi	r2,32
1000006c:	e0bffd15 	stw	r2,-12(fp)
	volatile unsigned int *SW_PIO  = (unsigned int*)0x50; //make a pointer to access the SW PIO block
10000070:	00801404 	movi	r2,80
10000074:	e0bffe15 	stw	r2,-8(fp)
	volatile unsigned int *KEY_PIO = (unsigned int*)0x60; //make a pointer to access the PIO block
10000078:	00801804 	movi	r2,96
1000007c:	e0bfff15 	stw	r2,-4(fp)

	*LED_PIO = 0; //clear all LEDs
10000080:	e0bffd17 	ldw	r2,-12(fp)
10000084:	10000015 	stw	zero,0(r2)
	unsigned int sum = 0; // clear sum
10000088:	e03ffc15 	stw	zero,-16(fp)
	while (1) { //infinite loop
		if (!KEY_2) {
1000008c:	e0bfff17 	ldw	r2,-4(fp)
10000090:	10800017 	ldw	r2,0(r2)
10000094:	1080010c 	andi	r2,r2,4
10000098:	1000041e 	bne	r2,zero,100000ac <main+0x50>
			sum = 0; // clear sum
1000009c:	e03ffc15 	stw	zero,-16(fp)
			*LED_PIO = sum;
100000a0:	e0bffd17 	ldw	r2,-12(fp)
100000a4:	e0fffc17 	ldw	r3,-16(fp)
100000a8:	10c00015 	stw	r3,0(r2)
		}
		while (!KEY_2);
100000ac:	0001883a 	nop
100000b0:	e0bfff17 	ldw	r2,-4(fp)
100000b4:	10800017 	ldw	r2,0(r2)
100000b8:	1080010c 	andi	r2,r2,4
100000bc:	103ffc26 	beq	r2,zero,100000b0 <__alt_data_end+0xf80000b0>

		if (!KEY_3) {
100000c0:	e0bfff17 	ldw	r2,-4(fp)
100000c4:	10800017 	ldw	r2,0(r2)
100000c8:	1080020c 	andi	r2,r2,8
100000cc:	10000e1e 	bne	r2,zero,10000108 <main+0xac>
			sum += *SW_PIO;
100000d0:	e0bffe17 	ldw	r2,-8(fp)
100000d4:	10800017 	ldw	r2,0(r2)
100000d8:	e0fffc17 	ldw	r3,-16(fp)
100000dc:	1885883a 	add	r2,r3,r2
100000e0:	e0bffc15 	stw	r2,-16(fp)
			if (sum > 255) {
100000e4:	e0bffc17 	ldw	r2,-16(fp)
100000e8:	10804030 	cmpltui	r2,r2,256
100000ec:	1000031e 	bne	r2,zero,100000fc <main+0xa0>
				sum -= 255;
100000f0:	e0bffc17 	ldw	r2,-16(fp)
100000f4:	10bfc044 	addi	r2,r2,-255
100000f8:	e0bffc15 	stw	r2,-16(fp)
			}
			*LED_PIO = sum;
100000fc:	e0bffd17 	ldw	r2,-12(fp)
10000100:	e0fffc17 	ldw	r3,-16(fp)
10000104:	10c00015 	stw	r3,0(r2)
		}
		while (!KEY_3);
10000108:	0001883a 	nop
1000010c:	e0bfff17 	ldw	r2,-4(fp)
10000110:	10800017 	ldw	r2,0(r2)
10000114:	1080020c 	andi	r2,r2,8
10000118:	103ffc26 	beq	r2,zero,1000010c <__alt_data_end+0xf800010c>
	}
1000011c:	003fdb06 	br	1000008c <__alt_data_end+0xf800008c>

10000120 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10000120:	defffc04 	addi	sp,sp,-16
10000124:	df000315 	stw	fp,12(sp)
10000128:	df000304 	addi	fp,sp,12
1000012c:	e13ffd15 	stw	r4,-12(fp)
10000130:	e17ffe15 	stw	r5,-8(fp)
10000134:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10000138:	e0fffe17 	ldw	r3,-8(fp)
1000013c:	e0bffd17 	ldw	r2,-12(fp)
10000140:	18800c26 	beq	r3,r2,10000174 <alt_load_section+0x54>
  {
    while( to != end )
10000144:	00000806 	br	10000168 <alt_load_section+0x48>
    {
      *to++ = *from++;
10000148:	e0bffe17 	ldw	r2,-8(fp)
1000014c:	10c00104 	addi	r3,r2,4
10000150:	e0fffe15 	stw	r3,-8(fp)
10000154:	e0fffd17 	ldw	r3,-12(fp)
10000158:	19000104 	addi	r4,r3,4
1000015c:	e13ffd15 	stw	r4,-12(fp)
10000160:	18c00017 	ldw	r3,0(r3)
10000164:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10000168:	e0fffe17 	ldw	r3,-8(fp)
1000016c:	e0bfff17 	ldw	r2,-4(fp)
10000170:	18bff51e 	bne	r3,r2,10000148 <__alt_data_end+0xf8000148>
    {
      *to++ = *from++;
    }
  }
}
10000174:	0001883a 	nop
10000178:	e037883a 	mov	sp,fp
1000017c:	df000017 	ldw	fp,0(sp)
10000180:	dec00104 	addi	sp,sp,4
10000184:	f800283a 	ret

10000188 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10000188:	defffe04 	addi	sp,sp,-8
1000018c:	dfc00115 	stw	ra,4(sp)
10000190:	df000015 	stw	fp,0(sp)
10000194:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10000198:	01840034 	movhi	r6,4096
1000019c:	3183c004 	addi	r6,r6,3840
100001a0:	01440034 	movhi	r5,4096
100001a4:	29424504 	addi	r5,r5,2324
100001a8:	01040034 	movhi	r4,4096
100001ac:	2103c004 	addi	r4,r4,3840
100001b0:	00001200 	call	10000120 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100001b4:	01840034 	movhi	r6,4096
100001b8:	31800804 	addi	r6,r6,32
100001bc:	01440034 	movhi	r5,4096
100001c0:	29400804 	addi	r5,r5,32
100001c4:	01040034 	movhi	r4,4096
100001c8:	21000804 	addi	r4,r4,32
100001cc:	00001200 	call	10000120 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100001d0:	01840034 	movhi	r6,4096
100001d4:	31824504 	addi	r6,r6,2324
100001d8:	01440034 	movhi	r5,4096
100001dc:	29424104 	addi	r5,r5,2308
100001e0:	01040034 	movhi	r4,4096
100001e4:	21024104 	addi	r4,r4,2308
100001e8:	00001200 	call	10000120 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100001ec:	00003f00 	call	100003f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
100001f0:	00004fc0 	call	100004fc <alt_icache_flush_all>
}
100001f4:	0001883a 	nop
100001f8:	e037883a 	mov	sp,fp
100001fc:	dfc00117 	ldw	ra,4(sp)
10000200:	df000017 	ldw	fp,0(sp)
10000204:	dec00204 	addi	sp,sp,8
10000208:	f800283a 	ret

1000020c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000020c:	defffd04 	addi	sp,sp,-12
10000210:	dfc00215 	stw	ra,8(sp)
10000214:	df000115 	stw	fp,4(sp)
10000218:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000021c:	0009883a 	mov	r4,zero
10000220:	000026c0 	call	1000026c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10000224:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10000228:	00002a40 	call	100002a4 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000022c:	000043c0 	call	1000043c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10000230:	01040034 	movhi	r4,4096
10000234:	21012704 	addi	r4,r4,1180
10000238:	00005c40 	call	100005c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000023c:	d0a18317 	ldw	r2,-31220(gp)
10000240:	d0e18417 	ldw	r3,-31216(gp)
10000244:	d1218517 	ldw	r4,-31212(gp)
10000248:	200d883a 	mov	r6,r4
1000024c:	180b883a 	mov	r5,r3
10000250:	1009883a 	mov	r4,r2
10000254:	000005c0 	call	1000005c <main>
10000258:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000025c:	01000044 	movi	r4,1
10000260:	00003180 	call	10000318 <close>
  exit (result);
10000264:	e13fff17 	ldw	r4,-4(fp)
10000268:	00005d80 	call	100005d8 <exit>

1000026c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000026c:	defffd04 	addi	sp,sp,-12
10000270:	dfc00215 	stw	ra,8(sp)
10000274:	df000115 	stw	fp,4(sp)
10000278:	df000104 	addi	fp,sp,4
1000027c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10000280:	00005a00 	call	100005a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10000284:	00800044 	movi	r2,1
10000288:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000028c:	0001883a 	nop
10000290:	e037883a 	mov	sp,fp
10000294:	dfc00117 	ldw	ra,4(sp)
10000298:	df000017 	ldw	fp,0(sp)
1000029c:	dec00204 	addi	sp,sp,8
100002a0:	f800283a 	ret

100002a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100002a4:	deffff04 	addi	sp,sp,-4
100002a8:	df000015 	stw	fp,0(sp)
100002ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100002b0:	0001883a 	nop
}
100002b4:	0001883a 	nop
100002b8:	e037883a 	mov	sp,fp
100002bc:	df000017 	ldw	fp,0(sp)
100002c0:	dec00104 	addi	sp,sp,4
100002c4:	f800283a 	ret

100002c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100002c8:	defffe04 	addi	sp,sp,-8
100002cc:	dfc00115 	stw	ra,4(sp)
100002d0:	df000015 	stw	fp,0(sp)
100002d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100002d8:	00840034 	movhi	r2,4096
100002dc:	1083bd04 	addi	r2,r2,3828
100002e0:	10800017 	ldw	r2,0(r2)
100002e4:	10000526 	beq	r2,zero,100002fc <alt_get_errno+0x34>
100002e8:	00840034 	movhi	r2,4096
100002ec:	1083bd04 	addi	r2,r2,3828
100002f0:	10800017 	ldw	r2,0(r2)
100002f4:	103ee83a 	callr	r2
100002f8:	00000206 	br	10000304 <alt_get_errno+0x3c>
100002fc:	00840034 	movhi	r2,4096
10000300:	10853e04 	addi	r2,r2,5368
}
10000304:	e037883a 	mov	sp,fp
10000308:	dfc00117 	ldw	ra,4(sp)
1000030c:	df000017 	ldw	fp,0(sp)
10000310:	dec00204 	addi	sp,sp,8
10000314:	f800283a 	ret

10000318 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10000318:	defffb04 	addi	sp,sp,-20
1000031c:	dfc00415 	stw	ra,16(sp)
10000320:	df000315 	stw	fp,12(sp)
10000324:	df000304 	addi	fp,sp,12
10000328:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000032c:	e0bfff17 	ldw	r2,-4(fp)
10000330:	10000816 	blt	r2,zero,10000354 <close+0x3c>
10000334:	01400304 	movi	r5,12
10000338:	e13fff17 	ldw	r4,-4(fp)
1000033c:	00008a80 	call	100008a8 <__mulsi3>
10000340:	1007883a 	mov	r3,r2
10000344:	00840034 	movhi	r2,4096
10000348:	10824f04 	addi	r2,r2,2364
1000034c:	1885883a 	add	r2,r3,r2
10000350:	00000106 	br	10000358 <close+0x40>
10000354:	0005883a 	mov	r2,zero
10000358:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000035c:	e0bffd17 	ldw	r2,-12(fp)
10000360:	10001926 	beq	r2,zero,100003c8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10000364:	e0bffd17 	ldw	r2,-12(fp)
10000368:	10800017 	ldw	r2,0(r2)
1000036c:	10800417 	ldw	r2,16(r2)
10000370:	10000626 	beq	r2,zero,1000038c <close+0x74>
10000374:	e0bffd17 	ldw	r2,-12(fp)
10000378:	10800017 	ldw	r2,0(r2)
1000037c:	10800417 	ldw	r2,16(r2)
10000380:	e13ffd17 	ldw	r4,-12(fp)
10000384:	103ee83a 	callr	r2
10000388:	00000106 	br	10000390 <close+0x78>
1000038c:	0005883a 	mov	r2,zero
10000390:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10000394:	e13fff17 	ldw	r4,-4(fp)
10000398:	000051c0 	call	1000051c <alt_release_fd>
    if (rval < 0)
1000039c:	e0bffe17 	ldw	r2,-8(fp)
100003a0:	1000070e 	bge	r2,zero,100003c0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100003a4:	00002c80 	call	100002c8 <alt_get_errno>
100003a8:	1007883a 	mov	r3,r2
100003ac:	e0bffe17 	ldw	r2,-8(fp)
100003b0:	0085c83a 	sub	r2,zero,r2
100003b4:	18800015 	stw	r2,0(r3)
      return -1;
100003b8:	00bfffc4 	movi	r2,-1
100003bc:	00000706 	br	100003dc <close+0xc4>
    }
    return 0;
100003c0:	0005883a 	mov	r2,zero
100003c4:	00000506 	br	100003dc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100003c8:	00002c80 	call	100002c8 <alt_get_errno>
100003cc:	1007883a 	mov	r3,r2
100003d0:	00801444 	movi	r2,81
100003d4:	18800015 	stw	r2,0(r3)
    return -1;
100003d8:	00bfffc4 	movi	r2,-1
  }
}
100003dc:	e037883a 	mov	sp,fp
100003e0:	dfc00117 	ldw	ra,4(sp)
100003e4:	df000017 	ldw	fp,0(sp)
100003e8:	dec00204 	addi	sp,sp,8
100003ec:	f800283a 	ret

100003f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100003f0:	deffff04 	addi	sp,sp,-4
100003f4:	df000015 	stw	fp,0(sp)
100003f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100003fc:	0001883a 	nop
10000400:	e037883a 	mov	sp,fp
10000404:	df000017 	ldw	fp,0(sp)
10000408:	dec00104 	addi	sp,sp,4
1000040c:	f800283a 	ret

10000410 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10000410:	defffc04 	addi	sp,sp,-16
10000414:	df000315 	stw	fp,12(sp)
10000418:	df000304 	addi	fp,sp,12
1000041c:	e13ffd15 	stw	r4,-12(fp)
10000420:	e17ffe15 	stw	r5,-8(fp)
10000424:	e1bfff15 	stw	r6,-4(fp)
  return len;
10000428:	e0bfff17 	ldw	r2,-4(fp)
}
1000042c:	e037883a 	mov	sp,fp
10000430:	df000017 	ldw	fp,0(sp)
10000434:	dec00104 	addi	sp,sp,4
10000438:	f800283a 	ret

1000043c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000043c:	defffd04 	addi	sp,sp,-12
10000440:	dfc00215 	stw	ra,8(sp)
10000444:	df000115 	stw	fp,4(sp)
10000448:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000044c:	00840034 	movhi	r2,4096
10000450:	10824004 	addi	r2,r2,2304
10000454:	e0bfff15 	stw	r2,-4(fp)
10000458:	00000606 	br	10000474 <_do_ctors+0x38>
        (*ctor) (); 
1000045c:	e0bfff17 	ldw	r2,-4(fp)
10000460:	10800017 	ldw	r2,0(r2)
10000464:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10000468:	e0bfff17 	ldw	r2,-4(fp)
1000046c:	10bfff04 	addi	r2,r2,-4
10000470:	e0bfff15 	stw	r2,-4(fp)
10000474:	e0ffff17 	ldw	r3,-4(fp)
10000478:	00840034 	movhi	r2,4096
1000047c:	10824104 	addi	r2,r2,2308
10000480:	18bff62e 	bgeu	r3,r2,1000045c <__alt_data_end+0xf800045c>
        (*ctor) (); 
}
10000484:	0001883a 	nop
10000488:	e037883a 	mov	sp,fp
1000048c:	dfc00117 	ldw	ra,4(sp)
10000490:	df000017 	ldw	fp,0(sp)
10000494:	dec00204 	addi	sp,sp,8
10000498:	f800283a 	ret

1000049c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000049c:	defffd04 	addi	sp,sp,-12
100004a0:	dfc00215 	stw	ra,8(sp)
100004a4:	df000115 	stw	fp,4(sp)
100004a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100004ac:	00840034 	movhi	r2,4096
100004b0:	10824004 	addi	r2,r2,2304
100004b4:	e0bfff15 	stw	r2,-4(fp)
100004b8:	00000606 	br	100004d4 <_do_dtors+0x38>
        (*dtor) (); 
100004bc:	e0bfff17 	ldw	r2,-4(fp)
100004c0:	10800017 	ldw	r2,0(r2)
100004c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100004c8:	e0bfff17 	ldw	r2,-4(fp)
100004cc:	10bfff04 	addi	r2,r2,-4
100004d0:	e0bfff15 	stw	r2,-4(fp)
100004d4:	e0ffff17 	ldw	r3,-4(fp)
100004d8:	00840034 	movhi	r2,4096
100004dc:	10824104 	addi	r2,r2,2308
100004e0:	18bff62e 	bgeu	r3,r2,100004bc <__alt_data_end+0xf80004bc>
        (*dtor) (); 
}
100004e4:	0001883a 	nop
100004e8:	e037883a 	mov	sp,fp
100004ec:	dfc00117 	ldw	ra,4(sp)
100004f0:	df000017 	ldw	fp,0(sp)
100004f4:	dec00204 	addi	sp,sp,8
100004f8:	f800283a 	ret

100004fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100004fc:	deffff04 	addi	sp,sp,-4
10000500:	df000015 	stw	fp,0(sp)
10000504:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10000508:	0001883a 	nop
1000050c:	e037883a 	mov	sp,fp
10000510:	df000017 	ldw	fp,0(sp)
10000514:	dec00104 	addi	sp,sp,4
10000518:	f800283a 	ret

1000051c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000051c:	defffc04 	addi	sp,sp,-16
10000520:	dfc00315 	stw	ra,12(sp)
10000524:	df000215 	stw	fp,8(sp)
10000528:	dc000115 	stw	r16,4(sp)
1000052c:	df000204 	addi	fp,sp,8
10000530:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10000534:	e0bffe17 	ldw	r2,-8(fp)
10000538:	108000d0 	cmplti	r2,r2,3
1000053c:	1000111e 	bne	r2,zero,10000584 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10000540:	04040034 	movhi	r16,4096
10000544:	84024f04 	addi	r16,r16,2364
10000548:	e0bffe17 	ldw	r2,-8(fp)
1000054c:	01400304 	movi	r5,12
10000550:	1009883a 	mov	r4,r2
10000554:	00008a80 	call	100008a8 <__mulsi3>
10000558:	8085883a 	add	r2,r16,r2
1000055c:	10800204 	addi	r2,r2,8
10000560:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10000564:	04040034 	movhi	r16,4096
10000568:	84024f04 	addi	r16,r16,2364
1000056c:	e0bffe17 	ldw	r2,-8(fp)
10000570:	01400304 	movi	r5,12
10000574:	1009883a 	mov	r4,r2
10000578:	00008a80 	call	100008a8 <__mulsi3>
1000057c:	8085883a 	add	r2,r16,r2
10000580:	10000015 	stw	zero,0(r2)
  }
}
10000584:	0001883a 	nop
10000588:	e6ffff04 	addi	sp,fp,-4
1000058c:	dfc00217 	ldw	ra,8(sp)
10000590:	df000117 	ldw	fp,4(sp)
10000594:	dc000017 	ldw	r16,0(sp)
10000598:	dec00304 	addi	sp,sp,12
1000059c:	f800283a 	ret

100005a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100005a0:	deffff04 	addi	sp,sp,-4
100005a4:	df000015 	stw	fp,0(sp)
100005a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100005ac:	000170fa 	wrctl	ienable,zero
}
100005b0:	0001883a 	nop
100005b4:	e037883a 	mov	sp,fp
100005b8:	df000017 	ldw	fp,0(sp)
100005bc:	dec00104 	addi	sp,sp,4
100005c0:	f800283a 	ret

100005c4 <atexit>:
100005c4:	200b883a 	mov	r5,r4
100005c8:	000f883a 	mov	r7,zero
100005cc:	000d883a 	mov	r6,zero
100005d0:	0009883a 	mov	r4,zero
100005d4:	00006101 	jmpi	10000610 <__register_exitproc>

100005d8 <exit>:
100005d8:	defffe04 	addi	sp,sp,-8
100005dc:	000b883a 	mov	r5,zero
100005e0:	dc000015 	stw	r16,0(sp)
100005e4:	dfc00115 	stw	ra,4(sp)
100005e8:	2021883a 	mov	r16,r4
100005ec:	00007280 	call	10000728 <__call_exitprocs>
100005f0:	00840034 	movhi	r2,4096
100005f4:	1083be04 	addi	r2,r2,3832
100005f8:	11000017 	ldw	r4,0(r2)
100005fc:	20800f17 	ldw	r2,60(r4)
10000600:	10000126 	beq	r2,zero,10000608 <exit+0x30>
10000604:	103ee83a 	callr	r2
10000608:	8009883a 	mov	r4,r16
1000060c:	00008d00 	call	100008d0 <_exit>

10000610 <__register_exitproc>:
10000610:	defffa04 	addi	sp,sp,-24
10000614:	dc000315 	stw	r16,12(sp)
10000618:	04040034 	movhi	r16,4096
1000061c:	8403be04 	addi	r16,r16,3832
10000620:	80c00017 	ldw	r3,0(r16)
10000624:	dc400415 	stw	r17,16(sp)
10000628:	dfc00515 	stw	ra,20(sp)
1000062c:	18805217 	ldw	r2,328(r3)
10000630:	2023883a 	mov	r17,r4
10000634:	10003726 	beq	r2,zero,10000714 <__register_exitproc+0x104>
10000638:	10c00117 	ldw	r3,4(r2)
1000063c:	010007c4 	movi	r4,31
10000640:	20c00e16 	blt	r4,r3,1000067c <__register_exitproc+0x6c>
10000644:	1a000044 	addi	r8,r3,1
10000648:	8800221e 	bne	r17,zero,100006d4 <__register_exitproc+0xc4>
1000064c:	18c00084 	addi	r3,r3,2
10000650:	18c7883a 	add	r3,r3,r3
10000654:	18c7883a 	add	r3,r3,r3
10000658:	12000115 	stw	r8,4(r2)
1000065c:	10c7883a 	add	r3,r2,r3
10000660:	19400015 	stw	r5,0(r3)
10000664:	0005883a 	mov	r2,zero
10000668:	dfc00517 	ldw	ra,20(sp)
1000066c:	dc400417 	ldw	r17,16(sp)
10000670:	dc000317 	ldw	r16,12(sp)
10000674:	dec00604 	addi	sp,sp,24
10000678:	f800283a 	ret
1000067c:	00800034 	movhi	r2,0
10000680:	10800004 	addi	r2,r2,0
10000684:	10002626 	beq	r2,zero,10000720 <__register_exitproc+0x110>
10000688:	01006404 	movi	r4,400
1000068c:	d9400015 	stw	r5,0(sp)
10000690:	d9800115 	stw	r6,4(sp)
10000694:	d9c00215 	stw	r7,8(sp)
10000698:	00000000 	call	10000000 <__reset>
1000069c:	d9400017 	ldw	r5,0(sp)
100006a0:	d9800117 	ldw	r6,4(sp)
100006a4:	d9c00217 	ldw	r7,8(sp)
100006a8:	10001d26 	beq	r2,zero,10000720 <__register_exitproc+0x110>
100006ac:	81000017 	ldw	r4,0(r16)
100006b0:	10000115 	stw	zero,4(r2)
100006b4:	02000044 	movi	r8,1
100006b8:	22405217 	ldw	r9,328(r4)
100006bc:	0007883a 	mov	r3,zero
100006c0:	12400015 	stw	r9,0(r2)
100006c4:	20805215 	stw	r2,328(r4)
100006c8:	10006215 	stw	zero,392(r2)
100006cc:	10006315 	stw	zero,396(r2)
100006d0:	883fde26 	beq	r17,zero,1000064c <__alt_data_end+0xf800064c>
100006d4:	18c9883a 	add	r4,r3,r3
100006d8:	2109883a 	add	r4,r4,r4
100006dc:	1109883a 	add	r4,r2,r4
100006e0:	21802215 	stw	r6,136(r4)
100006e4:	01800044 	movi	r6,1
100006e8:	12406217 	ldw	r9,392(r2)
100006ec:	30cc983a 	sll	r6,r6,r3
100006f0:	4992b03a 	or	r9,r9,r6
100006f4:	12406215 	stw	r9,392(r2)
100006f8:	21c04215 	stw	r7,264(r4)
100006fc:	01000084 	movi	r4,2
10000700:	893fd21e 	bne	r17,r4,1000064c <__alt_data_end+0xf800064c>
10000704:	11006317 	ldw	r4,396(r2)
10000708:	218cb03a 	or	r6,r4,r6
1000070c:	11806315 	stw	r6,396(r2)
10000710:	003fce06 	br	1000064c <__alt_data_end+0xf800064c>
10000714:	18805304 	addi	r2,r3,332
10000718:	18805215 	stw	r2,328(r3)
1000071c:	003fc606 	br	10000638 <__alt_data_end+0xf8000638>
10000720:	00bfffc4 	movi	r2,-1
10000724:	003fd006 	br	10000668 <__alt_data_end+0xf8000668>

10000728 <__call_exitprocs>:
10000728:	defff504 	addi	sp,sp,-44
1000072c:	df000915 	stw	fp,36(sp)
10000730:	dd400615 	stw	r21,24(sp)
10000734:	dc800315 	stw	r18,12(sp)
10000738:	dfc00a15 	stw	ra,40(sp)
1000073c:	ddc00815 	stw	r23,32(sp)
10000740:	dd800715 	stw	r22,28(sp)
10000744:	dd000515 	stw	r20,20(sp)
10000748:	dcc00415 	stw	r19,16(sp)
1000074c:	dc400215 	stw	r17,8(sp)
10000750:	dc000115 	stw	r16,4(sp)
10000754:	d9000015 	stw	r4,0(sp)
10000758:	2839883a 	mov	fp,r5
1000075c:	04800044 	movi	r18,1
10000760:	057fffc4 	movi	r21,-1
10000764:	00840034 	movhi	r2,4096
10000768:	1083be04 	addi	r2,r2,3832
1000076c:	12000017 	ldw	r8,0(r2)
10000770:	45005217 	ldw	r20,328(r8)
10000774:	44c05204 	addi	r19,r8,328
10000778:	a0001c26 	beq	r20,zero,100007ec <__call_exitprocs+0xc4>
1000077c:	a0800117 	ldw	r2,4(r20)
10000780:	15ffffc4 	addi	r23,r2,-1
10000784:	b8000d16 	blt	r23,zero,100007bc <__call_exitprocs+0x94>
10000788:	14000044 	addi	r16,r2,1
1000078c:	8421883a 	add	r16,r16,r16
10000790:	8421883a 	add	r16,r16,r16
10000794:	84402004 	addi	r17,r16,128
10000798:	a463883a 	add	r17,r20,r17
1000079c:	a421883a 	add	r16,r20,r16
100007a0:	e0001e26 	beq	fp,zero,1000081c <__call_exitprocs+0xf4>
100007a4:	80804017 	ldw	r2,256(r16)
100007a8:	e0801c26 	beq	fp,r2,1000081c <__call_exitprocs+0xf4>
100007ac:	bdffffc4 	addi	r23,r23,-1
100007b0:	843fff04 	addi	r16,r16,-4
100007b4:	8c7fff04 	addi	r17,r17,-4
100007b8:	bd7ff91e 	bne	r23,r21,100007a0 <__alt_data_end+0xf80007a0>
100007bc:	00800034 	movhi	r2,0
100007c0:	10800004 	addi	r2,r2,0
100007c4:	10000926 	beq	r2,zero,100007ec <__call_exitprocs+0xc4>
100007c8:	a0800117 	ldw	r2,4(r20)
100007cc:	1000301e 	bne	r2,zero,10000890 <__call_exitprocs+0x168>
100007d0:	a0800017 	ldw	r2,0(r20)
100007d4:	10003226 	beq	r2,zero,100008a0 <__call_exitprocs+0x178>
100007d8:	a009883a 	mov	r4,r20
100007dc:	98800015 	stw	r2,0(r19)
100007e0:	00000000 	call	10000000 <__reset>
100007e4:	9d000017 	ldw	r20,0(r19)
100007e8:	a03fe41e 	bne	r20,zero,1000077c <__alt_data_end+0xf800077c>
100007ec:	dfc00a17 	ldw	ra,40(sp)
100007f0:	df000917 	ldw	fp,36(sp)
100007f4:	ddc00817 	ldw	r23,32(sp)
100007f8:	dd800717 	ldw	r22,28(sp)
100007fc:	dd400617 	ldw	r21,24(sp)
10000800:	dd000517 	ldw	r20,20(sp)
10000804:	dcc00417 	ldw	r19,16(sp)
10000808:	dc800317 	ldw	r18,12(sp)
1000080c:	dc400217 	ldw	r17,8(sp)
10000810:	dc000117 	ldw	r16,4(sp)
10000814:	dec00b04 	addi	sp,sp,44
10000818:	f800283a 	ret
1000081c:	a0800117 	ldw	r2,4(r20)
10000820:	80c00017 	ldw	r3,0(r16)
10000824:	10bfffc4 	addi	r2,r2,-1
10000828:	15c01426 	beq	r2,r23,1000087c <__call_exitprocs+0x154>
1000082c:	80000015 	stw	zero,0(r16)
10000830:	183fde26 	beq	r3,zero,100007ac <__alt_data_end+0xf80007ac>
10000834:	95c8983a 	sll	r4,r18,r23
10000838:	a0806217 	ldw	r2,392(r20)
1000083c:	a5800117 	ldw	r22,4(r20)
10000840:	2084703a 	and	r2,r4,r2
10000844:	10000b26 	beq	r2,zero,10000874 <__call_exitprocs+0x14c>
10000848:	a0806317 	ldw	r2,396(r20)
1000084c:	2088703a 	and	r4,r4,r2
10000850:	20000c1e 	bne	r4,zero,10000884 <__call_exitprocs+0x15c>
10000854:	89400017 	ldw	r5,0(r17)
10000858:	d9000017 	ldw	r4,0(sp)
1000085c:	183ee83a 	callr	r3
10000860:	a0800117 	ldw	r2,4(r20)
10000864:	15bfbf1e 	bne	r2,r22,10000764 <__alt_data_end+0xf8000764>
10000868:	98800017 	ldw	r2,0(r19)
1000086c:	153fcf26 	beq	r2,r20,100007ac <__alt_data_end+0xf80007ac>
10000870:	003fbc06 	br	10000764 <__alt_data_end+0xf8000764>
10000874:	183ee83a 	callr	r3
10000878:	003ff906 	br	10000860 <__alt_data_end+0xf8000860>
1000087c:	a5c00115 	stw	r23,4(r20)
10000880:	003feb06 	br	10000830 <__alt_data_end+0xf8000830>
10000884:	89000017 	ldw	r4,0(r17)
10000888:	183ee83a 	callr	r3
1000088c:	003ff406 	br	10000860 <__alt_data_end+0xf8000860>
10000890:	a0800017 	ldw	r2,0(r20)
10000894:	a027883a 	mov	r19,r20
10000898:	1029883a 	mov	r20,r2
1000089c:	003fb606 	br	10000778 <__alt_data_end+0xf8000778>
100008a0:	0005883a 	mov	r2,zero
100008a4:	003ffb06 	br	10000894 <__alt_data_end+0xf8000894>

100008a8 <__mulsi3>:
100008a8:	0005883a 	mov	r2,zero
100008ac:	20000726 	beq	r4,zero,100008cc <__mulsi3+0x24>
100008b0:	20c0004c 	andi	r3,r4,1
100008b4:	2008d07a 	srli	r4,r4,1
100008b8:	18000126 	beq	r3,zero,100008c0 <__mulsi3+0x18>
100008bc:	1145883a 	add	r2,r2,r5
100008c0:	294b883a 	add	r5,r5,r5
100008c4:	203ffa1e 	bne	r4,zero,100008b0 <__alt_data_end+0xf80008b0>
100008c8:	f800283a 	ret
100008cc:	f800283a 	ret

100008d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100008d0:	defffd04 	addi	sp,sp,-12
100008d4:	df000215 	stw	fp,8(sp)
100008d8:	df000204 	addi	fp,sp,8
100008dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100008e0:	0001883a 	nop
100008e4:	e0bfff17 	ldw	r2,-4(fp)
100008e8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100008ec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100008f0:	10000226 	beq	r2,zero,100008fc <_exit+0x2c>
    ALT_SIM_FAIL();
100008f4:	002af070 	cmpltui	zero,zero,43969
100008f8:	00000106 	br	10000900 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100008fc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10000900:	003fff06 	br	10000900 <__alt_data_end+0xf8000900>
