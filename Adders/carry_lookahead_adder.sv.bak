module carry_lookahead_adder
(
    input   logic[15:0]     A,
    input   logic[15:0]     B,
    output  logic[15:0]     Sum,
    output  logic           CO
);
    wire g1, g2, g3;
    wire p1, p2, p3;
    wire c1, c2, c3;   

    carry_lookahead_adder_submodule S0(.A(A[ 3: 0]), .B(B[ 3: 0]), .Gi( 0), .Pi( 0), .Ci( 0), .Sum(Sum[ 3: 0]), .G(g1), .P(p1), .C(c1));
    carry_lookahead_adder_submodule S1(.A(A[ 7: 4]), .B(B[ 7: 4]), .Gi(g1), .Pi(p1), .Ci(c1), .Sum(Sum[ 7: 4]), .G(g2), .P(p2), .C(c2));
    carry_lookahead_adder_submodule S2(.A(A[11: 8]), .B(B[11: 8]), .Gi(g2), .Pi(p2), .Ci(c2), .Sum(Sum[11: 8]), .G(g3), .P(p3), .C(c3));
    carry_lookahead_adder_submodule S3(.A(A[15:12]), .B(B[15:12]), .Gi(g3), .Pi(p3), .Ci(c3), .Sum(Sum[15:12]), .C(CO));

endmodule

module carry_lookahead_adder_submodule (
    input   logic[3:0]   A,
    input   logic[3:0]   B,
    input   logic        Gi,
    input   logic        Pi,
    input   logic        Ci,
    output  logic[3:0]   Sum,
    output  logic        G,
    output  logic        P,
    output  logic        C
);

    wire g1, g2, g3;
    wire p1, p2, p3;
    wire c1, c2, c3;   
    
    carry_lookahead_adder_bit B0(.A(A[0]), .B(B[0]), .Gi(Gi), .Pi(Pi), .Ci(Ci), .Sum(Sum[0]), .G(g1), .P(p1), .C(c1));
    carry_lookahead_adder_bit B1(.A(A[1]), .B(B[1]), .Gi(g1), .Pi(p1), .Ci(c1), .Sum(Sum[1]), .G(g2), .P(p2), .C(c2));
    carry_lookahead_adder_bit B2(.A(A[2]), .B(B[2]), .Gi(g2), .Pi(p2), .Ci(c2), .Sum(Sum[2]), .G(g3), .P(p3), .C(c3));
    carry_lookahead_adder_bit B3(.A(A[3]), .B(B[3]), .Gi(g3), .Pi(p3), .Ci(c3), .Sum(Sum[3]), .G( G), .P( P), .C( C));

endmodule

module carry_lookahead_adder_bit (
    input   logic   A,
    input   logic   B,
    input   logic   Gi,
    input   logic   Pi,
    input   logic   Ci,
    output  logic   Sum,
    output  logic   G,
    output  logic   P,
    output  logic   C
);

    assign G =  A & B;
    assign P =  A ^ B;
    assign C = Gi | (Pi & Ci);

    full_adder FA0 (.x(A), .y(B), .z(Ci), .s(Sum));

endmodule